#!/bin/bash

# For Ubuntu!
export NEEDRESTART_MODE=a
export DEBIAN_FRONTEND=noninteractive

# Hash
#me
hash1="68b329da9893e34099c7d8ad5cb9c940"
#common
hash2="c357311ed3a47a08b423e1b42ec5c130"
#bits
hash3="091ba2e12e1dde612c5091e0b6fd24c4"

# Versão:
version="v5.1 - 04.06.2025"

# ------------------------------------------------------------------------------

# PASSWORD
function init {
  if ! password=$(dialog --backtitle "Ubuntu Server Manager - by José Humberto" --title "Digite a senha!" --insecure --passwordbox "" 7 30 2>&1 > /dev/tty); then
    exit
  fi

  hash0=$(echo "$password" | md5sum | awk '{print $1}')

  if [ -z "$password" ]; then
    dialog --title "ERROR" --msgbox "É necessário digitar uma senha para continuar." 6 40
    clear
  elif [ "$hash0" = "$hash1" ]; then
    start
  elif [ "$hash0" = "$hash2" ]; then
    startocult
  elif [ "$hash0" = "$hash3" ]; then
    start
  else
    clear
    dialog --title "ERROR" --msgbox "Senha incorreta. \nTente novamente!" 6 30
    timeout=$((timeout+1)); sleep $timeout
    init
  fi
}

hash1="fe5dfdd991450623c39efc7705e47ad5"

function start {
  if ! var0=$(dialog --title "SUPERVISOR" --backtitle "Bem-Vindo ao USM $version" --ok-label "Acessar" --cancel-label "Sair" --menu " " 0 0 0 \
  1 'Docker Orchestration' \
  2 'Docker Maintenance' \
  3 'Linite Model-1' \
  4 'AutoConfig pfSense (VM)' \
  5 'DWAgent (ARM)' \
  6 'Set Wayland (labwc 24.04+)' \
  7 'Set OpenBox ObaMenu' \
  X 'Sair' 2>&1 > /dev/tty ); then
    exit
  fi
  
  case "$var0" in
  1) clear ; echo "Por favor, insira a senha do usuário $USER!" ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/orchestration | sudo bash ; start ;;
  2) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/docker-tools | bash ; start ;;
  3) curl -sSL https://raw.githubusercontent.com/urbancompasspony/linite/main/model-1 | bash ; start ;;
  4) curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/auto_pfsense | sudo bash ; start ;;
  5) dwgeneric0 ; start ;;
  6) wayland00 ; start ;;
  7) clear ; mkdir -p /home/administrador/.config/openbox ; wget https://raw.githubusercontent.com/urbancompasspony/linux.cheat.sheet/main/Wayland/LabWC/menu.xml -O /home/administrador/.config/openbox ; start ;;
  X) exit ;;
  esac
}

function startocult {
  managers ; startocult
}

function managers {
  if ! var0=$(dialog --title 'Suporte ao Servidor' --backtitle "Bem-Vindo ao USM $version" --ok-label "Acessar" --cancel-label "Sair" --menu " " 0 0 0 \
  1 'Informacoes do Servidor' \
  2 'Iniciar Area de Trabalho (localhost)' \
  3 'Gerir o Active Directory (se existente)' \
  4 'Ferramentas & Ajustes Diversos' \
  5 'Solucao de Problemas' \
  6 'Continuidade do Negocio (CdN)' \
  7 'Alterar Hostname do Servidor' \
  8 'Reiniciar Servidor' \
  9 'Desligar Servidor' \
  X 'Sair' 2>&1 > /dev/tty ); then
    exit
  fi

  case "$var0" in
  1) allinfoz0 ; managers ;;
  2) desktop00 ; managers ;;
  3) domain00 ; managers ;;
  4) curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/tools | tee /home/administrador/.t00lz ; chmod +x /home/administrador/.t00lz ; clear ; bash /home/administrador/.t00lz ; managers ;;
  5) curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/solucao_de_problemas | tee /home/administrador/.sp ; chmod +x /home/administrador/.sp ; clear ; bash /home/administrador/.sp ; managers ;;
  6) curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/refs/heads/main/CDN/00-Base | tee /home/administrador/.base ; chmod +x /home/administrador/.base ; clear ; bash /home/administrador/.base ; managers ;;
  7) hostname_menu ; start ;;
  8) reb00t ; managers ;;
  9) shutd0 ; managers ;;
  X) exit ;;
  esac
}

function allinfoz0 {
  if [ -f /srv/settings.yaml ]; then
    YAML_FILE="/srv/settings.yaml"

    meuipwan=$(dig @resolver4.opendns.com myip.opendns.com +short)
    meugateway=$(ip route get 1.1.1.1 | grep -oP 'via \K\S+')
    meuiplan=$(ip route get 1.1.1.1 | grep -oP 'src \K\S+')
    minhasubnet="${meugateway%.*}.0"

    info1=$(yq -r '.Informacoes' "$YAML_FILE")
    info2=$(yq -r '.Hardware.Tipo' "$YAML_FILE")
    info3=$(yq -r '.Hardware.Placa' "$YAML_FILE")

    # --------------------------------------
    dialog_text="Informacoes do Servidor:

$info1

IP WAN: $meuipwan
IP LAN Atual: $meuiplan
Gateway Identificado: $meugateway
Subnet Identificada: $minhasubnet

Hardware:
Placa: $info2
Tipo: $info3"
    # --------------------------------------

    dialog --title "VISUALIZANDO DADOS" --backtitle "" --msgbox "Pressione OK abaixo para visualizar os resultados! \n\nNavegue com as setas para cima e para baixo. \n\nPara sair pressione 'q' !" 12 40
    clear; echo "$dialog_text" | less
    clear
  else
    dialog --title 'ATENCAO' --msgbox "Servidor fora de estrutura.\nModelo M identificado.\n\nEstruture este servidor para o Modelo CDN para ler todas as informacoes!" 9 50
  fi
}

function desktop00 {
  if pstree -s $$ | grep sshd 1>&2 >/dev/null; then
    clear; echo ""; echo "Voce esta tentando acessar o desktop remotamente. Use esse menu la na tela local do servidor!"
  else
    desktop01
  fi
  sleep 3
}

function desktop01 {
  if [ -f /usr/bin/labwc ]; then
    labwc
    return
  else
    startx
    return
  fi
}

hash1="e4439267203fb5277d347e6cd6e440b5"

function reb00t {
  if dialog --title 'Reiniciar' --backtitle "Reinicio" --yesno 'Deseja reiniciar este sistema?' 0 0; then
    sudo reboot
  fi
}

hash1="7c6126d9cc35fccb0c8a3a42147ea85f"

function shutd0 {
  if dialog --title 'Desligar' --backtitle "Desligamento" --yesno 'Deseja desligar este sistema?' 0 0; then
    sudo shutdown -h now
  fi
}

function wayland00 {
  clear
  sudo apt update
  sudo apt install openbox wayland-utils labwc obconf -y
  mkdir -p /home/administrador/.config/labwc
  rsync -va /etc/xdg/openbox/ .config/labwc/
  wget https://raw.githubusercontent.com/urbancompasspony/linux.cheat.sheet/main/Wayland/LabWC/menu.xml -O .config/labwc/menu.xml
}

function domain00 {
  if docker ps -a | grep dominio 1>&2 >/dev/null; then
    docker exec -it dominio /root/.init
    return
  else
    clear; echo ""; echo "Nenhum Controlador de Dominio encontrado neste sistema!"; echo ""; sleep 3
  fi
}

function dwgeneric0 {
  wget https://www.dwservice.net/download/dwagent_generic.sh -O /home/administrador/dwagent_generic.sh
  chmod +x dwagent_generic.sh
  sudo bash dwagent_generic.sh
}

function change_hostname {
  # Captura o hostname atual
  current_hostname=$(hostname)
  current_fqdn=$(hostname -f 2>/dev/null || echo "$current_hostname")
  
  # Exibe informações atuais
  dialog --title "Hostname Atual" --msgbox "Hostname atual: $current_hostname\nFQDN atual: $current_fqdn" 8 50
  
  # Solicita o novo hostname
  if ! new_hostname=$(dialog --title "Alterar Hostname" --backtitle "Configuração de Sistema" --inputbox "Digite o novo hostname:\n\nRegras:\n- Apenas letras, números e hífens\n- Máximo 63 caracteres\n- Não pode começar ou terminar com hífen" 12 50 "$current_hostname" 2>&1 > /dev/tty); then
    return
  fi
  
  # Validação básica do hostname
  if [ -z "$new_hostname" ]; then
    dialog --title "ERRO" --msgbox "O hostname não pode estar vazio!" 6 40
    return
  fi
  
  # Verifica se o hostname contém apenas caracteres válidos
  if ! echo "$new_hostname" | grep -q '^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$\|^[a-zA-Z0-9]$'; then
    dialog --title "ERRO" --msgbox "Hostname inválido!\n\nUse apenas:\n- Letras (a-z, A-Z)\n- Números (0-9)\n- Hífens (-)\n\nNão pode começar ou terminar com hífen." 10 50
    return
  fi
  
  # Verifica o comprimento
  if [ ${#new_hostname} -gt 63 ]; then
    dialog --title "ERRO" --msgbox "Hostname muito longo!\nMáximo: 63 caracteres\nAtual: ${#new_hostname} caracteres" 8 40
    return
  fi
  
  # Confirmação
  if ! dialog --title "Confirmação" --backtitle "Alteração de Hostname" --yesno "Alterar hostname de:\n'$current_hostname'\npara:\n'$new_hostname'\n\nTem certeza?" 10 50; then
    dialog --title "Cancelado" --msgbox "Alteração cancelada pelo usuário." 6 40
    return
  fi
  
  # Executa as alterações
  change_hostname_execute "$new_hostname"
}

# Função para executar a alteração do hostname
function change_hostname_execute {
  local new_hostname="$1"
  local current_hostname=$(hostname)
  local temp_file="/tmp/hosts_backup_$(date +%s)"
  
  # Backup do /etc/hosts
  if ! sudo cp /etc/hosts "$temp_file"; then
    dialog --title "ERRO" --msgbox "Falha ao criar backup do /etc/hosts!" 6 40
    return
  fi
  
  dialog --title "Processando" --infobox "Alterando hostname...\nPor favor, aguarde..." 5 30
  
  # 1. Altera via hostnamectl
  if ! sudo hostnamectl set-hostname "$new_hostname"; then
    dialog --title "ERRO" --msgbox "Falha ao definir hostname via hostnamectl!" 6 40
    return
  fi
  
  # 2. Atualiza /etc/hosts
  # Remove entradas antigas do hostname
  sudo sed -i "/$current_hostname/d" /etc/hosts
  
  # Adiciona novas entradas
  if ! grep -q "127.0.0.1.*$new_hostname" /etc/hosts; then
    sudo sed -i "1a\\127.0.0.1\t$new_hostname" /etc/hosts
  fi
  
  if ! grep -q "127.0.1.1.*$new_hostname" /etc/hosts; then
    sudo sed -i "/127.0.0.1.*$new_hostname/a\\127.0.1.1\t$new_hostname" /etc/hosts
  fi
  
  # 3. Atualiza /etc/hostname (backup method)
  echo "$new_hostname" | sudo tee /etc/hostname > /dev/null
  
  sleep 1
  
  # Verifica se a alteração foi bem-sucedida
  local verification_hostname=$(hostnamectl --static)
  
  if [ "$verification_hostname" = "$new_hostname" ]; then
    dialog --title "Sucesso" --msgbox "Hostname alterado com sucesso!\n\nAnterior: $current_hostname\nNovo: $new_hostname\n\nBackup do /etc/hosts salvo em:\n$temp_file\n\nReinicie o sistema para garantir que todas as aplicações reconheçam a mudança." 12 60
  else
    # Restaura backup em caso de falha
    sudo cp "$temp_file" /etc/hosts
    dialog --title "ERRO" --msgbox "Falha na alteração do hostname!\n\nO /etc/hosts foi restaurado do backup.\nVerifique as permissões e tente novamente." 8 50
  fi
}

# Função para visualizar informações do hostname
function show_hostname_info {
  local current_hostname=$(hostname)
  local static_hostname=$(hostnamectl --static)
  local pretty_hostname=$(hostnamectl --pretty 2>/dev/null || echo "Não definido")
  local transient_hostname=$(hostnamectl --transient)
  local fqdn=$(hostname -f 2>/dev/null || echo "Não disponível")
  local domain=$(hostname -d 2>/dev/null || echo "Não definido")
  
  # Captura conteúdo relevante do /etc/hosts
  local hosts_content=$(grep -E "(127\.0\.0\.1|127\.0\.1\.1)" /etc/hosts | head -5)
  
  dialog --title "Informações do Hostname" --msgbox "Hostname atual: $current_hostname
Hostname estático: $static_hostname  
Hostname transiente: $transient_hostname
Hostname pretty: $pretty_hostname
FQDN: $fqdn
Domínio: $domain

Entradas relevantes em /etc/hosts:
$hosts_content" 15 70
}

# Menu principal para hostname
function hostname_menu {
  if ! var0=$(dialog --title "Gerenciamento de Hostname" --backtitle "Configurações do Sistema" --menu "Selecione uma opção:" 0 0 0 \
  1 'Visualizar informações do hostname' \
  2 'Alterar hostname' \
  3 'Verificar arquivo /etc/hosts' \
  4 'Testar resolução de nome' \
  X 'Voltar' 2>&1 > /dev/tty); then
    return
  fi
  
  case "$var0" in
  1) show_hostname_info ; hostname_menu ;;
  2) change_hostname ; hostname_menu ;;
  3) show_hosts_file ; hostname_menu ;;
  4) test_hostname_resolution ; hostname_menu ;;
  X) return ;;
  esac
}

# Função para mostrar o arquivo /etc/hosts
function show_hosts_file {
  local hosts_content=$(cat /etc/hosts)
  dialog --title "Conteúdo do /etc/hosts" --msgbox "$hosts_content" 20 80
}

# Função para testar resolução de nome
function test_hostname_resolution {
  local current_hostname=$(hostname)
  local test_results=""
  
  dialog --title "Testando" --infobox "Testando resolução de nomes...\nPor favor, aguarde..." 5 40
  
  # Testa resolução local
  if ping -c 1 "$current_hostname" >/dev/null 2>&1; then
    test_results="✅ Resolução local: OK\n"
  else
    test_results="❌ Resolução local: FALHA\n"
  fi
  
  # Testa resolução localhost
  if ping -c 1 localhost >/dev/null 2>&1; then
    test_results="${test_results}✅ Localhost: OK\n"
  else
    test_results="${test_results}❌ Localhost: FALHA\n"
  fi
  
  # Testa resolução DNS externa
  if ping -c 1 google.com >/dev/null 2>&1; then
    test_results="${test_results}✅ DNS externo: OK\n"
  else
    test_results="${test_results}❌ DNS externo: FALHA\n"
  fi
  
  # Mostra resultados
  dialog --title "Resultados do Teste" --msgbox "Resultados da resolução de nomes:\n\n$test_results\nHostname testado: $current_hostname" 10 50
}

# ===================================================================================================================================== #

if ! [ "$EUID" -ne 0 ]; then
  echo "Não execute esse script com sudo! Saindo..."
  exit
fi

if [ -z "$BASHRC_UPDATE_CHECKED" ]; then
  export BASHRC_UPDATE_CHECKED=1
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/bashrc/main/install.sh | bash
fi

init

exit 1
