#!/bin/bash -i

# # # # # # #  #
# SRV MGR Menu #
# # # # # # #  # 

# For Ubuntu!
export pty=True
export NEEDRESTART_MODE=a
export DEBIAN_FRONTEND=noninteractive

# Hash
hash1="68b329da9893e34099c7d8ad5cb9c940"
hash2="c357311ed3a47a08b423e1b42ec5c130"

# Versão:
version="v3.5"

# ------------------------------------------------------------------------------

# PASSWORD
function init {
password=$(dialog --backtitle "Server Manager $version" --title " " --insecure --passwordbox "Digite a senha!" 0 0 2>&1 > /dev/tty)
hash0=$(echo "$password" | md5sum | awk '{print $1}')
  [ $? -ne 0 ] && exit
  [ -z "$password" ] && {
      dialog --title "ERROR" --msgbox "É necessário digitar uma senha para continuar." 6 40
      clear
  } || {
    [ "$hash0" = "$hash1" ] && {
      start
    } || {
      [ "$hash0" = "$hash2" ] && {
        startocult
      } || {
        clear
        dialog --title "ERROR" --msgbox "Senha incorreta. \nTente novamente!" 6 30
        timeout=$((timeout+1)); sleep $timeout
        init
      }
    }
  }
}

hash1="fe5dfdd991450623c39efc7705e47ad5"

function start {
var0=$(dialog --title "Escolha um sub menu" --backtitle "Bem-Vindo ao Server Manager $version!" --menu " " 0 0 0 \
A 'Orchestra' \
B 'Support Menu' \
C 'Manut. & Relat.' \
D 'Settings' \
E 'Atualizar Bashrc' \
F 'BETA: Support Menu' \
X 'Sair' 2>&1 > /dev/tty )
case "$var0" in
A) clear ; echo "Por favor, insira a senha do usuário $USER!" ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/orchestration | sudo bash ; start ;;
B) managers ; start ;;
C) clear ; echo "Por favor, insira a senha do usuário $USER!" ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/auto_relatorio | sudo bash ; start ;;
D) clear ; echo "Por favor, insira a senha do usuário $USER!" ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/tools | sudo bash ; start ;;
E) curl -sSL https://raw.githubusercontent.com/urbancompasspony/bashrc/main/install.sh | bash ; start ;;
F) managers_testes ; start ;;
X) exit ;;
esac
}

function startocult {
  managers ; startocult
}

function managers {
var0=$(dialog --title ' ' --backtitle "Managers" --ok-label "Acessar" --cancel-label "Voltar" --menu " " 0 0 0 \
1 'Maquinas Virtuais (TUI)' \
2 'Containers (TUI)' \
3 'Active Directory (TUI)' \
4 'Testar Ping DNS' \
5 'Baixar Imagens .ISO (XPRA)' \
6 'Iniciar Area de Trabalho' \
7 'Instalar DWService' \
8 'Reiniciar Servidor' \
9 'Desligar Servidor' \
X 'Sair' 2>&1 > /dev/tty )
case "$var0" in
1) curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/vm_machine | bash ; managers ;;
2) curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/docker | bash ; managers ;;
3) docker exec -it dominio /root/.init ; managers ;;
4) dnstest ; managers ;;
5) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/isoserver | sudo bash ; managers ;;
6) clear ; pstree -s $$ | grep sshd 1>&2 >/dev/null && echo "Voce esta tentando acessar o desktop remotamente. Use esse menu la na tela do servidor local!" || startx ; sleep 3 ; managers ;;
7) dwservice0 ; managers ;;
8) reb00t ; managers ;;
9) shutd0 ; managers ;;
X) exit ;;
esac
}

function managers_testes {
var0=$(dialog --title ' ' --backtitle "Managers" --ok-label "Acessar" --cancel-label "Voltar" --menu " " 0 0 0 \
1 'Maquinas Virtuais (TUI)' \
2 'Containers (TUI)' \
3 'Active Directory (TUI)' \
4 'Testar Ping DNS' \
5 'Baixar Imagens .ISO (XPRA)' \
6 'Iniciar Area de Trabalho' \
7 'Instalar DWService' \
8 'Solucao de Problemas' \
9 'Restaurar Servicos Local' \
10 'Restaurar Servicos Nuvem' \
11 'Reiniciar Servidor' \
12 'Desligar Servidor' \
X 'Sair' 2>&1 > /dev/tty )
case "$var0" in
1) curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/vm_machine | bash ; managers_testes ;;
2) curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/docker | bash ; managers_testes ;;
3) docker exec -it dominio /root/.init ; managers_testes ;;
4) dnstest ; managers_testes ;;
5) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/isoserver | sudo bash ; managers_testes ;;
6) clear ; echo "" ; pstree -s $$ | grep sshd 1>&2 >/dev/null && echo "Voce esta tentando acessar o desktop remotamente. Use esse menu la na tela do servidor local!" || startx ; echo "" ; sleep 3 ; managers_testes ;;
7) dwservice0 ; managers_testes ;;
8) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/solucao_de_problemas | bash ; managers_testes ;;
9) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/main/Backup/03-AutoRestoreBKP | bash ; managers_testes ;;
10) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/main/Backup/04-cloud | bash ; managers_testes ;;
11) reb00t ; managers_testes ;;
12) shutd0 ; managers_testes ;;
X) exit ;;
esac
}

hash1="e4439267203fb5277d347e6cd6e440b5"

function reb00t {
  dialog --title 'Reiniciar' --backtitle "Reinício" --yesno 'Deseja reiniciar este sistema?' 0 0
  [ $? = 0 ] && {
    sudo reboot
  } || {
    echo "." >/dev/null
  }
}

hash1="7c6126d9cc35fccb0c8a3a42147ea85f"

function shutd0 {
  dialog --title 'Desligar' --backtitle "Desligamento" --yesno 'Deseja desligar este sistema?' 0 0
  [ $? = 0 ] && {
    sudo shutdown -h now
  } || {
    echo "." >/dev/null
  }
}

function dwservice0 {
  wget https://www.dwservice.net/download/dwagent_generic.sh -O /home/administrador/dwagent_generic.sh
  chmod +x dwagent_generic.sh
  sudo bash dwagent_generic.sh
}

function dnstest {
Google_P=$(ping1 "8.8.4.4")
gauge1 "8" "Testando ping para 8.8.4.4"
Google_S=$(ping1 "8.8.8.8")
gauge1 "14" "Testando ping para 8.8.8.8"
OpenDNS_P=$(ping1 "208.67.222.222")
gauge1 "19" "Testando ping para 208.67.222.222"
OpenDNS_S=$(ping1 "208.67.220.220")
gauge1 "22" "Testando ping para 208.67.220.220"
Level3_P=$(ping1 "4.2.2.1")
gauge1 "24" "Testando ping para 4.2.2.1"
Level3_S=$(ping1 "4.2.2.2")
gauge1 "28" "Testando ping para 4.2.2.2"
Comodo_P=$(ping1 "8.26.56.26")
gauge1 "32" "Testando ping para 8.26.56.26"
Comodo_S=$(ping1 "8.20.247.20")
gauge1 "36" "Testando ping para 8.20.247.20"
DNSWATCH_P=$(ping1 "84.200.69.80")
gauge1 "42" "Testando ping para 84.200.69.80"
DNSWATCH_S=$(ping1 "84.200.70.40")
gauge1 "46" "Testando ping para 84.200.70.40"
Quad9_P=$(ping1 "9.9.9.9")
gauge1 "50" "Testando ping para 9.9.9.9"
Quad9_S=$(ping1 "149.112.112.112")
gauge1 "57" "Testando ping para 149.112.112.112"
Cloudflare_P=$(ping1 "1.1.1.1")
gauge1 "67" "Testando ping para 1.1.1.1"
Cloudflare_S=$(ping1 "1.0.0.1")
gauge1 "74" "Testando ping para 1.0.0.1"
Algar_P=$(ping1 "200.225.197.34")
gauge1 "79" "Testando ping para 200.225.197.34"
Algar_S=$(ping1 "200.225.197.37")
gauge1 "85" "Testando ping para 200.225.197.37"
GIGA_P=$(ping1 "189.38.95.95")
gauge1 "88" "Testando ping para 189.38.95.95"
GIGA_S=$(ping1 "189.38.95.96")
gauge1 "93" "Testando ping para 189.38.95.96"
CLARO_P=$(ping1 "181.213.132.2")
gauge1 "98" "Testando ping para 181.213.132.2"
CLARO_S=$(ping1 "181.213.132.3")
gauge1 "100" "Testando ping para 181.213.132.3"

TEXTAO01="Google ..... 8.8.4.4 .........: $Google_P
Google ..... 8.8.8.8 .........: $Google_S
OpenDNS .... 208.67.222.222 ..: $OpenDNS_P
OpenDNS .... 208.67.220.220 ..: $OpenDNS_S
Level3 ..... 4.2.2.1 .........: $Level3_P
Level3 ..... 4.2.2.2 .........: $Level3_S
Comodo ..... 8.26.56.26 ......: $Comodo_P
Comodo ..... 8.20.247.20 .....: $Comodo_S
DNSWATCH ... 84.200.69.80 ....: $DNSWATCH_P
DNSWATCH ... 84.200.70.40 ....: $DNSWATCH_S
Quad9 ...... 9.9.9.9 .........: $Quad9_P
Quad9 ...... 149.112.112.112 .: $Quad9_S
Cloudflare . 1.1.1.1 .........: $Cloudflare_P
Cloudflare . 1.0.0.1 .........: $Cloudflare_S
Algar ...... 200.225.197.34 ..: $Algar_P
Algar ...... 200.225.197.37 ..: $Algar_S
GigaDNS .... 189.38.95.95 ....: $GIGA_P
GigaDNS .... 189.38.95.96 ....: $GIGA_S
Claro ...... 181.213.132.2 ...: $CLARO_P
Claro ...... 181.213.132.3 ...: $CLARO_S"

dialog --title 'Resultados do Teste Ping:' --msgbox "$TEXTAO01" 0 0
}

function gauge1 {
  clear
  echo  "$1" | dialog --title "Aguarde!" --gauge "$2" 8 40
  sleep 0.5
}

function ping1 {
  ping -c 1 "$1" | awk 'NR==2{print $7,$8}' |  cut -c7-
}

# ------------------------------------------------------------------------------

[ "$EUID" -ne 0 ] || {
  echo "Não execute esse script com sudo! Saindo..."
  exit
  }

init

exit 1
