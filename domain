#!/bin/bash

# For Ubuntu 22.04!
export NEEDRESTART_MODE=a
export DEBIAN_FRONTEND=noninteractive

# Variaveis Globais
export bktitle="Active Directory & Domain Controller"
export ttitle="Server Menu v4"

# Controlador de Dominio
function menu04 {
  var4=$(dialog --title "$ttitle" --backtitle "$bktitle" --menu " " 0 0 0 \
  A 'Usuarios & Grupos' \
  B 'Gestao de Pastas da Rede' \
  C 'Unidades Organizacionais' \
  D 'Settings' \
  X 'Sair' 2>&1 > /dev/tty )
  [ $? -ne 0 ] && exit
  case "$var4" in
  A) menu041 ; menu04 ;;
  B) validation ; menu04 ;;
  C) menuOUs ; menu04 ;;
  D) manut ; menu04 ;;
  X) exit ;;
  esac
}

function manut {
  var4=$(dialog --title "$ttitle" --backtitle "$bktitle" --menu " " 0 0 0 \
  A 'SYSVOL CHECK' \
  B 'SysVol Reset' \
  C 'dbcheck well-known-acls' \
  D 'dbcheck' \
  E 'GPO ACL Check' \
  F 'GPUpdate /Force via SMB' \
  G 'Upgrade MSI Files: ADMX' \
  H 'Domain details' \
  I 'Password details' \
  J 'Show SMB processes' \
  K 'FAQ & Help!' \
  L 'Upgrade this menu' \
  X '<' 2>&1 > /dev/tty )
  [ $? -ne 0 ] && return
  case "$var4" in
  A) clear ; samba-tool ntacl sysvolcheck -U administrator ; read -p "Pressione Enter para continuar!" ; manut ;;
  B) clear ; samba-tool ntacl sysvolreset -U Administrator ; read -p "Pressione Enter para continuar!" ; manut ;;
  C) clear ; samba-tool dbcheck --cross-ncs --reset-well-known-acls --fix --yes ; read -p "Pressione Enter para continuar!" ; manut ;;
  D) clear ; samba-tool dbcheck --cross-ncs --fix --yes ; read -p "Pressione Enter para continuar!" ; manut ;;
  E) clear ; samba-tool gpo aclcheck -U Administrator ; read -p "Pressione Enter para continuar!" ; manut ;;
  F) clear ; samba-gpupdate -U administrator --force --rsop ; read -p "Pressione Enter para continuar!" ; manut ;;
  G) clear ; samba-tool gpo admxload -U Administrator --admx-dir="/msifiles" ; manut ;;
  H) menuR ; manut ;;
  I) menuS ; manut ;;
  J) menuT ; manut ;;
  K) menuhelp ; read -p "Pressione Enter para continuar!" ; manut ;;
  L) wget https://raw.githubusercontent.com/urbancompasspony/server/main/domain -O /root/.init ; manut ;;
  X) echo "." >/dev/null ;;
  esac
}

function menuhelp {
clear
echo " "
echo "If using a modified version of Windows, like ReviCC, there is a big chance to have problems!"
echo " "
echo "Issue: Can't add users or groups to Security Filtering!"
echo "When trying, it is still blank. Ignored command. Some errors on ACL Permissions."
echo "Solution: UNjoin client machine from AD, rename the machine and join again!"
echo "Sad, but it is the only and simple solution. This problem comes from"
echo "losting some kind of AD Trust Relationship."
echo ""
}

function menu041 {
var41=$(dialog --title "$ttitle" --backtitle "$bktitle" --menu " " 0 0 0 \
1 'Criar Usuario' \
2 'Criar Grupo' \
3 'Exibir todos os Usuarios' \
4 'Exibir todos os Grupos' \
5 'Verificar Usuario' \
6 'Verificar Grupo' \
7 'Exibir Grupos de Usuario' \
8 'Exibir Usuarios de um Grupo' \
9 'Adicionar Usuario a um Grupo' \
10 'Remover Usuario de um Grupo' \
11 'Bloquear Usuario' \
12 'Desbloquear Usuario' \
13 'Alterar Senha de um Usuario' \
14 'Alterar Politica de um Usuario' \
15 'Testar Senha de Usuario' \
16 'Excluir Usuario' \
17 'Excluir um Grupo' \
18 'Exibir todos os Computadores' \
X '<' 2>&1 > /dev/tty )
[ $? -ne 0 ] && return
case "$var41" in
1) menuD ; menu041 ;;
2) menuI ; menu041 ;;
3) menuA ; menu041 ;;
4) menuC ; menu041 ;;
5) menuP ; menu041 ;;
6) menuQ ; menu041 ;;
7) menuO ; menu041 ;;
8) menuK ; menu041 ;;
9) menuJ ; menu041 ;;
10) menuL ; menu041 ;;
11) menuF ; menu041 ;;
12) menuG ; menu041 ;;
13) menuE ; menu041 ;;
14) menuN ; menu041 ;;
15) menupass ; menu41 ;;
16) menuH ; menu041 ;;
17) menuM ; menu041 ;;
18) menuB ; menu041 ;;
X) echo "." >/dev/null ;;
esac
}

function menuOUs {
  echo "em breve!"
  sleep 3
}

function menuA {
dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os Usuarios! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
[ $? -ne 0 ] && return
usrlst=$(samba-tool user list)
echo "$usrlst" | less
}

function menuB {
dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os Computadores! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
[ $? -ne 0 ] && return
cmplist=$(samba-tool computer list)
echo "$cmplist" | less
}

function menuC {
dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os Grupos! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
[ $? -ne 0 ] && return
grplist=$(samba-tool group list)
echo "$grplist" | less
}

function menuD {
VALUE1="joao_naves"
VALUE2="Joao Naves"
VALUE3="1234567Ab"

VALUE0=$(dialog --ok-label "Criar"  --backtitle "$bktitle" --title "Adicionar Usuario" --form "Preencha todos os campos! Apague os modelos. \n
Navegue com as setas para cima e baixo." 15 50 0 \
"Usuario: " 1 1 "$VALUE1" 1 10 34 0 \
"Exibicao:" 2 1 "$VALUE2" 2 10 34 0 \
"Senha:" 3 1 "$VALUE3" 3 10 34 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && return
validusr1=$(echo "$VALUE0" | sed -n 1p)
validsur1=$(echo "$VALUE0" | sed -n 2p)
validpss1=$(echo "$VALUE0" | sed -n 3p)
[ -z "$validpss1" ] || [ -z "$validusr1" ] || [ -z "$validsur1" ] && {
  dialog --title "ERRO" --msgbox "Nao deixe nenhum campo vazio!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr1")
  repeated2=$(samba-tool group list | grep -x "$validusr1")
  [ "$repeated" = "$validusr1" ] || [ "$repeated2" = "$validusr1" ] && {
    dialog --title "Informacao" --msgbox "Conflito detectado! \nO usuario $validusr1 nao sera criado!" 8 40
  } || {
    dialog --title 'Politica de Senha' --backtitle 'Configuracao de Senha' --yesno "$validusr1 deve trocar a senha ao logar? \n
Se escolher Nao, devera usar o RSAT caso mude de ideia." 8 40
    [ $? = 0 ] && {
       samba-tool user create "$validusr1" "$validpss1" --surname="$validsur1" --must-change-at-next-login
      dialog --title 'Politica de Senha' --backtitle 'Configuracao de Senha' --yesno "A senha de $validusr nunca expira?" 0 0
      [ $? = 0 ] && {
         samba-tool user setexpiry "$validusr1" --noexpiry
        dialog --title "Informacao" --msgbox "A senha de $validusr1 nao expira!" 8 40
        dialog --title "Informacao" --msgbox "Usuario $validusr1 criado e configurado com sucesso!" 8 40
      } || {
        echo "a" > /dev/null
        }
    } || {
       samba-tool user create "$validusr1" "$validpss1" --surname="$validsur1"
      dialog --title 'Politica de Senha' --backtitle 'Configuracao de Senha' --yesno "A senha de $validusr nunca expira?" 0 0
      [ $? = 0 ] && {
         samba-tool user setexpiry "$validusr1" --noexpiry
        dialog --title "Informacao" --msgbox "A senha de $validusr1 nao expira!" 8 40
        dialog --title "Informacao" --msgbox "Usuario $validusr1 criado e configurado com sucesso!" 8 40
      } || {
        echo "a" > /dev/null
        }
    }
  }
}

}

function menuE {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERROR" --msgbox "Usuario nao pode ficar em branco!" 7 25
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    validpss=$(dialog --title "$ttitle" --backtitle "Trocar a senha de usuario do Dominio em $HOSTNAME" --insecure --passwordbox 'Crie uma nova senha para o usuario' 0 0 2>&1 > /dev/tty )
    [ -z "$validpss" ] && {
      dialog --title "ERROR" --msgbox "Senha nao pode ficar em branco!" 7 25
    } || {
      samba-tool user setpassword "$validusr" --newpassword="$validpss"
      dialog --title "Informacao" --msgbox "Senha de $validusr trocada com sucesso!" 8 40
      }
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function menuF {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    samba-tool user disable "$validusr"
    dialog --title "Informacao" --msgbox "Usuario $validusr bloqueado com sucesso!" 7 25
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function menuG {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    samba-tool user enable "$validusr"
    dialog --title "Informacao" --msgbox "Usuario $validusr desbloqueado com sucesso!" 7 25
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function menuH {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    dialog --title 'Confirmacao' --backtitle 'Exclusao de Usuario' --yesno 'Deseja excluir este usuario?' 0 0
    [ $? = 0 ] && {
      samba-tool user delete "$validusr"
      dialog --title "Informacao" --msgbox "Usuario $validusr excluido com sucesso!" 7 25
    } || {
      echo "a" > /dev/null
      }
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
  }
}

}

function menuI {
validgrp=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
[ -z "$validgrp" ] && {
  dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validgrp")
  repeated2=$(samba-tool group list | grep -x "$validgrp")
  [ "$repeated" = "$validgrp" ] || [ "$repeated2" = "$validgrp" ] && {
    dialog --title "Informacao" --msgbox "Conflito detectado! O grupo $validgrp nao sera criado!" 8 40
  } || {
    samba-tool group add "$validgrp"
    dialog --title "Informacao" --msgbox "Grupo $validgrp criado com sucesso!" 7 25
    }
}

}

function menuJ {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de Usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {  
  validgrp=$(dialog --title "$ttitle" --backtitle "Adicionar Usuario a um Grupo em $HOSTNAME" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
  [ -z "$validgrp" ] && {
    dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
  } || {
    repeated=$(samba-tool user list | grep -x "$validusr")
    [ "$repeated" = "$validusr" ] && {
    repeated2=$(samba-tool group list | grep -x "$validgrp")
      [ "$repeated2" = "$validgrp" ] && {
        samba-tool group addmembers "$validgrp" "$validusr"
        dialog --title "Informacao" --msgbox "O usuario $validusr foi adicionado ao grupo $validgrp!" 8 40
      } || {
        dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
        }
    } || {
      dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
      }
    }
  }
}

function menuK {
validgrp=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
[ -z "$validgrp" ] && {
  dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool group list | grep -x "$validgrp")
  [ "$repeated" = "$validgrp" ] && {
    dialog --title "$ttitle" --backtitle "Listagem de Membros" --msgbox "Pressione Enter para visualizar os Grupos! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 0 0
    usrgrps=$(samba-tool group listmembers "$validgrp")
    echo "$usrgrps" | less
  } || {
    dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
  }
}

}

function menuL {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  validgrp=$(dialog --title "$ttitle" --backtitle "Remover Usuario de um Grupo em $HOSTNAME" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
  [ -z "$validgrp" ] && {
    dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
  } || {
    repeated=$(samba-tool user list | grep -x "$validusr")
    [ "$repeated" = "$validusr" ] && {
      repeated2=$(samba-tool group list | grep -x "$validgrp")
      [ "$repeated2" = "$validgrp" ] && {
        samba-tool group removemembers "$validgrp" "$validusr"
        dialog --title "Informacao" --msgbox "O usuario $validusr foi removido do grupo $validgrp!" 8 40
      } || {
        dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
      }
    } || {
      dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
      }
  }
}

}

function menuM {
validgrp=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do grupo" 0 0 2>&1 > /dev/tty)
[ -z "$validgrp" ] && {
  dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool group list | grep -x "$validgrp")
  [ "$repeated" = "$validgrp" ] && {  
    dialog --title 'Confirmacao' --backtitle 'Exclusao de Grupo' --yesno "Deseja excluir o grupo $validgrp?" 0 0
    [ $? = 0 ] && {
      samba-tool group delete "$validgrp"
      dialog --title "Informacao" --msgbox "Grupo $validgrp excluido com sucesso!" 7 25
    } || {
      echo "a" > /dev/null
      }
  } || {
    dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
  }
}

}

function menuN {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    dialog --title 'Politica de Senha' --backtitle 'Configuracao de Senha' --yesno "A senha de $validusr nao deve mais expirar?" 0 0
    [ $? = 0 ] && {
      samba-tool user setexpiry "$validusr" --noexpiry
      dialog --title "Informacao" --msgbox "A senha de $validusr nao expira!" 8 40
    } || {
      echo "a" > /dev/null
      }
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function menuO {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    dialog --title "$ttitle" --backtitle "Listagem de Grupos" --msgbox "Pressione Enter para visualizar os Grupos! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 0 0
    grpsusr=$(samba-tool user getgroups "$validusr")
    echo "$grpsusr" | less
  } || {
    dialog --title "ERRO" --msgbox "Usuario invalido!" 8 40
    }
}

}

function menuP {
validusr1=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario. \n
Exemplo: joao_naves" 9 40 2>&1 > /dev/tty)
[ -z "$validusr1" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated2=$(samba-tool user list | grep -x "$validusr1")
  [ "$repeated2" = "$validusr1" ] && {
    dialog --title "Informacao" --msgbox "O usuario $validusr1 esta cadastrado!" 8 40
    clear
    dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os dados! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
    [ $? -ne 0 ] && return
    usrdata=$(samba-tool user show $validusr1)
    echo "$usrdata" | less
  } || {
    dialog --title "Informacao" --msgbox "O usuario $validusr1 nao foi encontrado neste servidor." 8 40
    }
}

}

function menupass {
echo "em breve!"
echo "kinit USER"
}

function menuQ {
validgrp1=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de grupo" 0 0 2>&1 > /dev/tty)
[ $? -ne 0 ] && return

[ -z "$validgrp1" ] && {
  dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
} || {
  repeated3=$(samba-tool group list | grep -x "$validgrp1")
  [ "$repeated3" = "$validgrp1" ] && {
    dialog --title "Informacao" --msgbox "O grupo $validgrp1 esta cadastrado!" 8 40
    clear
    dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os dados! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
    [ $? -ne 0 ] && return
    grpdata=$(samba-tool group show $validusr1)
    echo "$grpdata" | less
  } || {
    dialog --title "Informacao" --msgbox "O grupo $validgrp1 nao foi encontrado neste servidor." 8 40
    }
}

}

function menuR {
smbv=$(samba --version)
domainv=$(samba-tool domain level show)
dialog --cr-wrap --title "Informaces encontradas" --backtitle "$bktitle" --msgbox "
Nome da Maquina: $HOSTNAME \n \n
Versao do SAMBA: $smbv \n \n
$domainv \n \n
" 0 0
}

function menuS {
  dialog --cr-wrap --title "Informaces encontradas" --backtitle "$bktitle" --msgbox  "$(samba-tool domain passwordsettings show)" 0 0
}

function menuT {
  dialog --cr-wrap --title "Informaces encontradas" --backtitle "$bktitle" --msgbox  "$(samba-tool processes)" 0 0
}

#########################
# DOMAIN FOLDER MANAGER #
#########################

function validation {
  result=$(grep -rnw /etc/samba/external/smb.conf -e 'include' 2>/dev/null 1>/dev/null && echo sim || echo nao)
  [ $result = sim ] && {
    menu
  } || {
    dialog --title "ERRO" --msgbox "Sub-sistema INCLUDE nao encontrado para este Dominio! \n
O editor de pastas compartilhadas nao pode continuar. \n
Por favor, configure-o manualmente e tente novamente." 10 50
  }
}

function menu {
var0=$(dialog --title "DOMAIN Folder Control 1.0" --backtitle " " --menu " " 0 0 0 \
A 'Mostrar Pastas Compartilhadas' \
B 'Criar Nova Pasta Compartilhada' \
C 'Excluir Pasta Compartilhada' \
D 'Revalidar Configuracoes' \
X '<' 2>&1 > /dev/tty )

case "$var0" in
A) list_all ; menu ;;
B) create ; menu ;;
C) delete ; menu ;;
D) revalidate ; menu ;;
X) echo "." >/dev/null ;;
esac
}

function list_all {
  [ -d "/etc/samba/external/smb.conf.d" ] && {
    listagem=$(ls /etc/samba/external/smb.conf.d/* | xargs -n 1 basename)
    dialog --title "Lista de Pastas Compartilhadas:" --msgbox "$listagem" 15 35
  } || {
    clear
    dialog --title "ERRO" --msgbox "Nenhum compartilhamento encontrado!" 5 40
  }
}

function create {
VALUE1="server"
VALUE2="custom_folder"
VALUE3="@supervisor"
VALUE4="yes"
VALUE5="yes"

  VALUE0=$(dialog --ok-label "Criar" --title "Compartilhamento" --form "Controlador de Dominio" 12 45 0 \
"ShrName :" 1 1 "$VALUE1" 1 10 34 0 \
"PathName:" 2 1 "$VALUE2" 2 10 34 0 \
"Grp Name:" 3 1 "$VALUE3" 3 10 34 0 \
"Writable:" 4 1 "$VALUE4" 4 10 34 0 \
"Browser :" 5 1 "$VALUE5" 5 10 34 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  [ $? -ne 0 ] && return

  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  var3=$(echo "$VALUE0" | sed -n 3p)
  var4=$(echo "$VALUE0" | sed -n 4p)
  var5=$(echo "$VALUE0" | sed -n 5p)

[ -f /etc/samba/external/smb.conf.d/$var1.conf ] && {
  dialog --title "ERRO" --msgbox "O compartilhamento já existe! Saindo..." 5 40
  exit
}

mkdir -p /mnt/$var2

tee /etc/samba/external/smb.conf.d/$var1.conf << EOF
[$var1]
path = /mnt/$var2
valid users = $var3
admin users = $var3
writable = $var4
browsable = $var5
guest ok = no
create mask = 0777
force create mode = 0777
directory mask = 0777
force directory mode = 0777
EOF

ls /etc/samba/external/smb.conf.d/* | sed -e 's/^/include = /' > /etc/samba/external/includes.conf
smbcontrol all reload-config
}

function delete {
VALUE0=$(dialog --ok-label "Ok" --title "Compartilhamento" --form "Nome do Compartilhamento" 8 35 0 \
"ShrName:" 1 1 "$VALUE1" 1 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

    case $? in
      0) echo "." > /dev/null ;;
      1) exit ;;
    esac

    var1=$(echo "$VALUE0" | sed -n 1p)
    
    dialog --title 'Confirmacao' --backtitle 'Exclusao de Compartilhamento' --yesno 'Deseja excluir este compartilhamento?' 0 0
    [ $? = 0 ] && {
      rm /etc/samba/external/smb.conf.d/$var1.conf
      ls /etc/samba/external/smb.conf.d/* | sed -e 's/^/include = /' > /etc/samba/external/includes.conf
      smbcontrol all reload-config
    } || {
      echo "a" > /dev/null
    }
}

function revalidate {
  ls /etc/samba/external/smb.conf.d/* | sed -e 's/^/include = /' > /etc/samba/external/includes.conf
  smbcontrol all reload-config
}

# Start all!
menu04

# EDITOR=nano ldbedit -H /var/lib/samba/private/sam.ldb --cross-ncs "(objectClass=nTDSDSA)" msDS-Behavior-Version
