#!/bin/bash

function tools {
  if ! var0=$(dialog --title "" --backtitle "" --menu " " 0 0 0 \
  A 'Remove not used images' \
  B 'Retore a Backup' \
  C 'Set MACVLAN' \
  D 'Remove MACVLAN' \
  E 'PiHole Maintenance' \
  F 'PiHole Install Error' \
  G 'Reset Syncthing Password' \
  H 'NC: filelocks' \
  I 'NC: add-missing-indices' \
  J 'NC: check-core & mimetype' \
  K 'NC: Disable LDAP' \
  L 'NC: Upgrade Manually CLI' \
  M 'NC: Scan App Data' \
  N 'NC: Scan User Data' \
  X '<' 2>&1 > /dev/tty ); then
    return
  fi
  
  case "$var0" in
  A) clear ; docker image prune -af ; sleep 2 ;;
  B) clear ; restorebkp ;;
  C) clear ; macvland ;;
  D) clear ; rmmacvland ;;
  E) clear ; piholemnt ;;
  F) clear ; piholeinst ;;
  G) clear ; syncpass0 ;;
  H) clear ; filelocks ;;
  I) clear ; missingindices ;;
  J) clear ; checkcore ;;
  K) clear ; disableldap ;;
  L) clear ; upgradenc ;;
  M) clear ; scanapp0 ;;
  N) clear ; scanuser0 ;;
  X) return ;;
  esac
}

function scanapp0 {
  VALUE1="nextcloud"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  var1=$(echo "$VALUE0" | sed -n 1p)
  clear; echo "Checking core integrity..."
  docker exec -u 33 "$var1" ./occ files:scan-app-data
  sleep 3
}

function scanuser0 {
  VALUE1="nextcloud"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  var1=$(echo "$VALUE0" | sed -n 1p)
  clear; echo "Checking core integrity..."
  docker exec -u 33 "$var1" ./occ files:scan --all
  sleep 3
}

function syncpass0 {
  VALUE1="syncthing"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Syncthing" 8 35 0 \
  "NomeCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  var1=$(echo "$VALUE0" | sed -n 1p)
  clear
  docker exec -it "$var1" syncthing generate --gui-password=admin --gui-user=admin
  echo ""; echo "Usuario e senha da WebGUI foram modificados para admin/admin!"
}

function upgradenc {
  VALUE1="nextcloud"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  var1=$(echo "$VALUE0" | sed -n 1p)

  clear
  echo "Upgrading..."
  docker exec -u 33 "$var1" ./occ upgrade
  sleep 3
}

function disableldap {
  VALUE1="nextcloud"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Disable LDAP" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  var1=$(echo "$VALUE0" | sed -n 1p)

  clear
  echo "Disabling LDAP Backend!"
  docker exec -u 33 "$var1" ./occ ldap:set-config "s01" "ldapConfigurationActive" "0"
  sleep 2
  docker restart "$var1"
  sleep 3
}

function checkcore {
VALUE1="nextcloud"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  var1=$(echo "$VALUE0" | sed -n 1p)
  clear; echo "Checking core integrity..."
  docker exec -u 33 "$var1" ./occ integrity:check-core
  docker exec -u 33 "$var1" ./occ maintenance:mimetype:update-js
  docker exec -u 33 "$var1" ./occ integrity:check-core
  docker exec -u 33 "$var1" ./occ maintenance:mimetype:update-js
  sleep 3
}

function missingindices {
  VALUE1="nextcloud"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  var1=$(echo "$VALUE0" | sed -n 1p)

  clear
  echo "Adding missing indices..."
  docker exec -u 33 "$var1" ./occ db:add-missing-indices
  echo "ok"; sleep 3

  clear
  echo "Fixing mimetypes..."
  docker exec -u 33 "$var1" ./occ maintenance:repair --include-expensive
  echo "ok"; sleep 3

  sleep 3
}

function piholemnt {
  VALUE1="pihole"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "PiHole" 8 35 0 \
  "NomeCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  clear
  var1=$(echo "$VALUE0" | sed -n 1p)
  docker exec "$var1" bash -c "pihole -g -r recover"
  docker exec "$var1" bash -c "rm /etc/pihole/pihole-FTL.db"
  docker restart "$var1"
}

function piholeinst {
  VALUE1="pihole"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "PiHole" 8 35 0 \
  "NomeCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  clear
  var1=$(echo "$VALUE0" | sed -n 1p)
  docker exec "$var1" bash -c "rm /etc/pihole/gravity.db"
  docker exec "$var1" bash -c "pihole -g"
  docker restart "$var1"
}

function filelocks {
  VALUE1="nextcloud-mysql"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "MySQL - NextCloud" 9 35 0 \
  "mSQLcont:" 1 1 "$VALUE1" 1 11 30 0 \
  "Password:" 2 1 "$VALUE2" 2 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)

  clear
  echo "File Locks atualmente no Banco de Dados:"
  docker exec "$var1" mysql --user=root -D nextcloud -e 'SELECT * FROM oc_file_locks;'
  sleep 5
  docker exec "$var1" mysql --user=root --password="$var2" -D nextcloud -e 'delete from oc_file_locks where 1'
  sleep 1
  clear
  echo "Conferencia de limpeza de File Locks:"
  docker exec "$var1" mysql --user=root -D nextcloud -e 'SELECT * FROM oc_file_locks;'
  echo "Se nada aparecer aqui, foi limpo com sucesso!"
  sleep 3
}

function macvland {
  var1="0"; var2="0"; var3="0"; var4="0"

  #VALUE1="${meugateway%.*}.0"
  VALUE2=$(ip route get 1.1.1.1 | grep -oP 'via \K\S+')
  VALUE3=$(ip route get 1.1.1.1 | grep -oP 'dev \K\S+')
  VALUE4="macvlan"

  VALUE0=$(dialog --help-button --help-label "Dica" --ok-label "Criar" --title "Criar novo MACVLAN" --form "MACVLAN for Containers" 11 40 0 \
"Subnet  :" 1 1 "$VALUE1" 1 11 30 0 \
"Gateway :" 2 1 "$VALUE2" 2 11 30 0 \
"Parent  :" 3 1 "$VALUE3" 3 11 30 0 \
"Name    :" 4 1 "$VALUE4" 4 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  case $? in
    0) echo "." > /dev/null ;;
    1) exit ;;
    2) dialognet ; macvland ;;
  esac

echo "$VALUE0"

  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  var3=$(echo "$VALUE0" | sed -n 3p)
  var4=$(echo "$VALUE0" | sed -n 4p)

  if [ "$var1" = "0" ] || [ "$var2" = "0" ] || [ "$var3" = "0" ] || [ "$var4" = "0" ]; then
    dialog --title "ERRO" --msgbox "O(s) campo(s) exigidos nao pode(m) ficar em branco. \nPreencha-o(s) adequadamente!" 7 40
    macvland
  else
    macvlanr=$(docker inspect "$var4" 1>/dev/null 2>/dev/null && echo yes || echo no)
    if [ "$macvlanr" = "no" ];then
      # Cria a rede docker
      docker network create -d macvlan --subnet="$var1"/24 --gateway="$var2" -o parent="$var3" "$var4"
      
      # Verifica se a cria√ß√£o foi bem-sucedida
      if [ $? -eq 0 ]; then
        echo "‚úÖ Rede $var4 criada com sucesso!"
        
        # Salva no settings.yaml
        save_macvlan_to_yaml "$var1" "$var2" "$var3" "$var4"
        
        dialog --title "Sucesso" --msgbox "Rede MACVLAN '$var4' criada e salva no settings.yaml!\n\nSubnet: $var1/24\nGateway: $var2\nInterface: $var3" 10 50
      else
        echo "‚ùå Erro ao criar a rede $var4"
        dialog --title "ERRO" --msgbox "Falha ao criar a rede MACVLAN '$var4'!" 6 40
      fi
    else
      echo "A macvlan $var4 existe! Saindo..."
      dialog --title "ERRO" --msgbox "A rede MACVLAN '$var4' j√° existe!" 6 40
    fi
  fi
}

# Fun√ß√£o para salvar configura√ß√µes MACVLAN no settings.yaml
function save_macvlan_to_yaml {
  local subnet="$1"
  local gateway="$2"
  local interface="$3"
  local network_name="$4"
  
  local yaml_file="/srv/settings.yaml"
  local datetime=$(date +"%d/%m/%Y - %H:%M:%S")
  
  echo "üíæ Salvando configura√ß√µes MACVLAN no settings.yaml..."
  
  # Verifica se o arquivo existe, se n√£o, cria estrutura b√°sica
  if [ ! -f "$yaml_file" ]; then
    echo "üìù Criando arquivo settings.yaml..."
    sudo mkdir -p /srv
    sudo tee "$yaml_file" > /dev/null << EOF
# Arquivo de configura√ß√µes do servidor
# Criado automaticamente em $datetime

Informacoes:
  Data_Instalacao: "$datetime"
  Data_Restauracao: "Nunca foi reinstalado."

Hardware:
  Tipo: "Servidor"
  Placa: "Desconhecida"

Rede:
  MACVLAN: {}
EOF
  fi
  
  # Verifica se j√° existe a se√ß√£o Rede.MACVLAN
  if ! grep -q "MACVLAN:" "$yaml_file"; then
    echo "üìù Adicionando se√ß√£o MACVLAN ao settings.yaml..."
    sudo yq -i '.Rede.MACVLAN = {}' "$yaml_file"
  fi
  
  # Adiciona as configura√ß√µes da nova rede MACVLAN
  echo "üìù Salvando rede '$network_name' no settings.yaml..."
  
  sudo yq -i "
    .Rede.MACVLAN.\"$network_name\" = {
      \"subnet\": \"$subnet/24\",
      \"gateway\": \"$gateway\",
      \"interface\": \"$interface\",
      \"data_criacao\": \"$datetime\",
      \"status\": \"ativa\"
    }
  " "$yaml_file"
  
  echo "‚úÖ Configura√ß√µes salvas com sucesso!"
  
  # Mostra confirma√ß√£o das configura√ß√µes salvas
  echo ""
  echo "üìã CONFIGURA√á√ïES SALVAS:"
  echo "   Nome da rede: $network_name"
  echo "   Subnet: $subnet/24"
  echo "   Gateway: $gateway" 
  echo "   Interface: $interface"
  echo "   Data: $datetime"
  echo ""
}

# Fun√ß√£o adicional para listar redes MACVLAN salvas
function list_saved_macvlans {
  local yaml_file="/srv/settings.yaml"
  
  if [ ! -f "$yaml_file" ]; then
    echo "‚ùå Arquivo settings.yaml n√£o encontrado!"
    return 1
  fi
  
  echo "üìã REDES MACVLAN SALVAS NO SETTINGS.YAML:"
  echo "=========================================="
  
  # Lista todas as redes MACVLAN salvas
  networks=$(yq -r '.Rede.MACVLAN | keys[]' "$yaml_file" 2>/dev/null)
  
  if [ -z "$networks" ]; then
    echo "‚ÑπÔ∏è  Nenhuma rede MACVLAN encontrada no settings.yaml"
    return
  fi
  
  echo ""
  for network in $networks; do
    subnet=$(yq -r ".Rede.MACVLAN.\"$network\".subnet" "$yaml_file")
    gateway=$(yq -r ".Rede.MACVLAN.\"$network\".gateway" "$yaml_file")
    interface=$(yq -r ".Rede.MACVLAN.\"$network\".interface" "$yaml_file")
    data_criacao=$(yq -r ".Rede.MACVLAN.\"$network\".data_criacao" "$yaml_file")
    status=$(yq -r ".Rede.MACVLAN.\"$network\".status" "$yaml_file")
    
    echo "üåê Rede: $network"
    echo "   üì° Subnet: $subnet"
    echo "   üö™ Gateway: $gateway"
    echo "   üîå Interface: $interface"
    echo "   üìÖ Criada em: $data_criacao"
    echo "   üìä Status: $status"
    
    # Verifica se a rede ainda existe no Docker
    docker_exists=$(docker network ls --format "{{.Name}}" | grep -x "$network" && echo "exists" || echo "not_found")
    if [ "$docker_exists" = "exists" ]; then
      echo "   üê≥ Docker: ‚úÖ Rede existe"
    else
      echo "   üê≥ Docker: ‚ùå Rede n√£o encontrada"
    fi
    echo ""
  done
}

# Fun√ß√£o para remover rede MACVLAN e atualizar settings.yaml
function remove_macvlan_and_update_yaml {
  local network_name="$1"
  local yaml_file="/srv/settings.yaml"
  
  if [ -z "$network_name" ]; then
    echo "‚ùå Nome da rede n√£o fornecido!"
    return 1
  fi
  
  echo "üóëÔ∏è  Removendo rede MACVLAN '$network_name'..."
  
  # Remove a rede do Docker
  if docker network rm "$network_name" 2>/dev/null; then
    echo "‚úÖ Rede '$network_name' removida do Docker"
    
    # Atualiza o status no settings.yaml ou remove completamente
    if [ -f "$yaml_file" ]; then
      # Op√ß√£o 1: Marcar como removida (manter hist√≥rico)
      sudo yq -i ".Rede.MACVLAN.\"$network_name\".status = \"removida\"" "$yaml_file" 2>/dev/null
      sudo yq -i ".Rede.MACVLAN.\"$network_name\".data_remocao = \"$(date '+%d/%m/%Y - %H:%M:%S')\"" "$yaml_file" 2>/dev/null
      
      # Op√ß√£o 2: Remover completamente (descomente a linha abaixo se preferir)
      # sudo yq -i "del(.Rede.MACVLAN.\"$network_name\")" "$yaml_file" 2>/dev/null
      
      echo "‚úÖ Configura√ß√µes atualizadas no settings.yaml"
    fi
  else
    echo "‚ùå Erro ao remover a rede '$network_name' ou rede n√£o existe"
    return 1
  fi
}

# Exemplo de uso das novas fun√ß√µes:
# list_saved_macvlans
# remove_macvlan_and_update_yaml "macvlan"

function dialognet {
  dialog --title "Informa√ß√£o" --msgbox "Checar a existencia de altnames nas informacoes a seguir!" 7 40
  dialog --title "Informa√ß√£o" --msgbox "$(ip a)" 25 70
}

tools

exit 1
