#!/bin/bash

function tools {
var0=$(dialog --title "$mTITLE" --backtitle "$bkTTITLE" --menu " " 0 0 0 \
A 'Remove not used images' \
B 'Retore a Backup' \
C 'Set MACVLAN' \
D 'Remove MACVLAN' \
E 'PiHole Maintenance' \
F 'PiHole Install Error' \
G 'NC: filelocks' \
H 'NC: add-missing-indices' \
I 'NC: check-core & mimetype' \
J 'NC: Disable LDAP' \
K 'NC: Upgrade Manually CLI' \
X '<' 2>&1 > /dev/tty )
case "$var0" in
A) docker image prune -af ; restorebkp ;;
B) clear ; restorebkp ;;
C) clear ; macvland ;;
D) clear ; docker network rm macvlan ; sleep 2 ;;
E) clear ; piholemnt ;;
F) clear ; piholeinst ;;
G) clear ; filelocks ;;
H) clear ; missingindices ;;
I) clear ; checkcore ;;
J) clear ; disableldap ;;
K) clear ; upgradenc ;;
X) echo "." > /dev/null ;;
esac
}

function upgradenc {
VALUE1="nextcloud"
VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
"NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

    case $? in
      0) echo "." > /dev/null ;;
      1) exit ;;
    esac

    var1=$(echo "$VALUE0" | sed -n 1p)

    clear
    echo "Upgrading..."
    docker exec -u 33 "$var1" ./occ upgrade
    sleep 5
}

function disableldap {
VALUE1="nextcloud"
VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Disable LDAP" 9 35 0 \
"NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

    case $? in
      0) echo "." > /dev/null ;;
      1) exit ;;
    esac

    var1=$(echo "$VALUE0" | sed -n 1p)

    clear
    echo "Disabling LDAP Backend!"
    docker exec -u 33 "$var1" ./occ ldap:set-config "s01" "ldapConfigurationActive" "0"
    sleep 2
    docker restart "$var1"
    sleep 5
}

function checkcore {
VALUE1="nextcloud"
VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
"NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

    case $? in
      0) echo "." > /dev/null ;;
      1) exit ;;
    esac

    var1=$(echo "$VALUE0" | sed -n 1p)
    clear
    echo "Checking core integrity..."
    docker exec -u 33 "$var1" ./occ integrity:check-core
    docker exec -u 33 "$var1" ./occ maintenance:mimetype:update-js
    sleep 5
}

function missingindices {
VALUE1="nextcloud"
VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
"NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

    case $? in
      0) echo "." > /dev/null ;;
      1) exit ;;
    esac

    var1=$(echo "$VALUE0" | sed -n 1p)

    clear
    echo "Adding missing indices..."
    docker exec -u 33 "$var1" ./occ db:add-missing-indices
    echo "ok"; sleep 3

    clear
    echo "Fixing mimetypes..."
    docker exec -u 33 "$var1" ./occ maintenance:repair --include-expensive
    echo "ok"; sleep 3

    sleep 5
}

function piholemnt {
VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "PiHole" 8 35 0 \
"NomeCont:" 1 1 "$VALUE1" 1 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

    case $? in
      0) echo "." > /dev/null ;;
      1) exit ;;
    esac

    var1=$(echo "$VALUE0" | sed -n 1p)
    clear
    docker exec "$var1" bash -c "pihole -g -r recover"
    docker exec "$var1" bash -c "rm /etc/pihole/pihole-FTL.db"
    docker restart "$var1"
}

function piholeinst {
VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "PiHole" 8 35 0 \
"NomeCont:" 1 1 "$VALUE1" 1 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

    case $? in
      0) echo "." > /dev/null ;;
      1) exit ;;
    esac

    var1=$(echo "$VALUE0" | sed -n 1p)
    clear
    docker exec "$var1" bash -c "rm /etc/pihole/gravity.db"
    docker exec "$var1" bash -c "pihole -g"
    docker restart "$var1"
}

function filelocks {
VALUE1="nextcloud-mysql"

VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "MySQL - NextCloud" 9 35 0 \
"mSQLcont:" 1 1 "$VALUE1" 1 11 30 0 \
"Password:" 2 1 "$VALUE2" 2 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

    case $? in
      0) echo "." > /dev/null ;;
      1) exit ;;
    esac

    var1=$(echo "$VALUE0" | sed -n 1p)
    var2=$(echo "$VALUE0" | sed -n 2p)

    clear
    echo "File Locks atualmente no Banco de Dados:"
    docker exec "$var1" mysql --user=root -D nextcloud -e 'SELECT * FROM oc_file_locks;'
    sleep 5
    docker exec "$var1" mysql --user=root --password="$var2" -D nextcloud -e 'delete from oc_file_locks where 1'
    sleep 1
    clear
    echo "Conferencia de limpeza de File Locks:"
    docker exec "$var1" mysql --user=root -D nextcloud -e 'SELECT * FROM oc_file_locks;'
    echo "Se nada aparecer aqui, foi limpo com sucesso!"
    sleep 3
}


function macvland {
  macvlanr=$(docker inspect macvlan 1>/dev/null 2>/dev/null && echo yes || echo no)
  [ "$macvlanr" = "no" ] && {
    clear
    echo "Macvlan não encontrado. Criando..."
    sleep 2

    var1="0"; var2="0"; var3="0"

    minhasubnet="${meugateway%.*}.0"
    meugateway=$(ip route get 1.1.1.1 | grep -oP 'via \K\S+')
    meudevice=$(ip route get 1.1.1.1 | grep -oP 'dev \K\S+')

    VALUE1="$minhasubnet"; VALUE2="$meugateway" ; VALUE3="$meudevice"

    VALUE0=$(dialog --help-button --help-label "Dica" --ok-label "Criar" --title "Criar novo MACVLAN" --form "MACVLAN for Containers" 10 40 0 \
"Subnet  :" 1 1 "$VALUE1" 1 11 30 0 \
"Gateway :" 2 1 "$VALUE2" 2 11 30 0 \
"Parent  :" 3 1 "$VALUE3" 3 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

    case $? in
      0) echo "." > /dev/null ;;
      1) exit ;;
      2) dialognet ; macvland ;;
    esac

    var1=$(echo "$VALUE0" | sed -n 1p)
    var2=$(echo "$VALUE0" | sed -n 2p)
    var3=$(echo "$VALUE0" | sed -n 3p)

    [ "$var1" = "0" ] || [ "$var2" = "0" ] || [ "$var3" = "0" ] && {
      clear
      echo "Não deixe nenhum campo vazio!"
      macvland
    } || {
      docker network create -d macvlan --subnet="$var1"/24 --gateway="$var2" -o parent="$var3" macvlan
    }
  } || {
    echo "Macvlan existente. Saindo..."
  }
}

function dialognet {
  dialog --title "Informação" --msgbox "Checar a existencia de altnames nas informacoes a seguir!" 7 40
  dialog --title "Informação" --msgbox "$(ip a)" 25 70
}

function restorebkp {
echo "em breve!"
sleep 2
# /srv/containers/scripts/pathrestore
#sudo tar -xvf dominio-30_01_24.tar -C /srv/containers/
}

# Start here!
tools

exit 1
