#!/bin/bash

pathmount="/tmp/pathmount"

function sambaclient {
[ -f  "$pathmount" ] && {
  VALUE1=$(sed -n '1p' "$pathmount")
  VALUE2=$(sed -n '2p' "$pathmount")
  VALUE3=$(sed -n '3p' "$pathmount") 
  VALUE4=$(sed -n '4p' "$pathmount")  
  VALUE5=$(sed -n '5p' "$pathmount")
} || {
  touch "$pathmount"

  VALUE1="//172.20.0.2/backup"
  VALUE2="/mnt/backup"
  VALUE3="admin"
  VALUE4=""
  VALUE5=",domain=WORKGROUP" 
}

VALUE0=$(dialog --help-button --help-label 'Show' --ok-label "Montar" --title "Mounting" --form "Pastas de Redes" 15 50 0 \
"PATH: " 1 1 "$VALUE1" 1 10 34 0 \
"MNT:" 2 1 "$VALUE2" 2 10 34 0 \
"USER:" 3 1 "$VALUE3" 3 10 34 0 \
"PASS:" 4 1 "$VALUE4" 4 10 34 0 \
"DOM:" 5 1 "$VALUE5" 5 10 34 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

case $? in
  1) echo "." > /dev/null ;;
  2) mntshow1=$(ls /mnt); dialog --title 'MNTs' --msgbox "$mntshow1" 0 0 ; sambaclient ;;
esac

path1=$(echo "$VALUE0" | sed -n 1p)
mntpt1=$(echo "$VALUE0" | sed -n 2p)
user1=$(echo "$VALUE0" | sed -n 3p)
pass1=$(echo "$VALUE0" | sed -n 4p)
dmn1=$(echo "$VALUE0" | sed -n 5p)

[ -z "$path1" ] || [ -z "$mntpt1" ] || [ -z "$user1" ] || [ -z "$pass1" ] && {
  dialog --title "ERRO" --msgbox "Não deixe os campos PATH, MNT, USER ou PASS vazios!" 7 30
  sambaclient
  }

echa1=$(grep "$mntpt1" -qs /proc/mounts && echo "sim" || echo "nao")
[ "$echa1" = "sim" ] && {
  dialog --title "Informação" --msgbox "Caminho em uso! Escolha outro." 7 30
  sambaclient
} || {
  echo "$path1" > "$pathmount"
  echo "$mntpt1" >> "$pathmount"
  echo "$user1" >> "$pathmount"
  echo "$pass1" >> "$pathmount"
  echo "$dmn1" >> "$pathmount"

  sudo mkdir -p "$mntpt1"
  sudo mount -t cifs -o user="$user1",password="$pass1""$dmn1",iocharset=utf8,file_mode=0777,dir_mode=0777,noperm "$path1" "$mntpt1"
  mntshow2=$(df -hT)
  }
}

function satas {
  for number in $(find /sys/class/scsi_host/host* -maxdepth 0); do
    echo "Scanning on $number!"
    echo "0 0 0" | sudo tee $number/scan
  done
  echo "All done!"
  sleep 5
}

function dnstest {
Google_P=$(ping1 "8.8.4.4")
gauge1 "8"
Google_S=$(ping1 "8.8.8.8")
gauge1 "14"
OpenDNS_P=$(ping1 "208.67.222.222")
gauge1 "19"
OpenDNS_S=$(ping1 "208.67.220.220")
gauge1 "22"
Level3_P=$(ping1 "4.2.2.1")
gauge1 "24"
Level3_S=$(ping1 "4.2.2.2")
gauge1 "28"
Comodo_P=$(ping1 "8.26.56.26")
gauge1 "32"
Comodo_S=$(ping1 "8.20.247.20")
gauge1 "36"
DNSWATCH_P=$(ping1 "84.200.69.80")
gauge1 "42"
DNSWATCH_S=$(ping1 "84.200.70.40")
gauge1 "46"
Quad9_P=$(ping1 "9.9.9.9")
gauge1 "50"
Quad9_S=$(ping1 "149.112.112.112")
gauge1 "57"
Cloudflare_P=$(ping1 "1.1.1.1")
gauge1 "67"
Cloudflare_S=$(ping1 "1.0.0.1")
gauge1 "74"
Algar_P=$(ping1 "200.225.197.34")
gauge1 "79"
Algar_S=$(ping1 "200.225.197.37")
gauge1 "85"
GIGA_P=$(ping1 "189.38.95.95")
gauge1 "88"
GIGA_S=$(ping1 "189.38.95.96")
gauge1 "93"
CLARO_P=$(ping1 "181.213.132.2")
gauge1 "98"
CLARO_S=$(ping1 "181.213.132.3")
gauge1 "100"

TEXTAO01="Google 8.8.4.4: $Google_P
Google 8.8.8.8: $Google_S
OpenDNS 208.67.222.222: $OpenDNS_P
OpenDNS 208.67.220.220: $OpenDNS_S
Level3 4.2.2.1: $Level3_P
Level3 4.2.2.2: $Level3_S
Comodo 8.26.56.26: $Comodo_P
Comodo 8.20.247.20: $Comodo_S
DNSWATCH 84.200.69.80: $DNSWATCH_P
DNSWATCH 84.200.70.40: $DNSWATCH_S
Quad9 9.9.9.9: $Quad9_P
Quad9 149.112.112.112: $Quad9_S
Cloudflare 1.1.1.1: $Cloudflare_P
Cloudflare 1.0.0.1: $Cloudflare_S
Algar 200.225.197.34: $Algar_P
Algar 200.225.197.37: $Algar_S
GigaDNS 189.38.95.95: $GIGA_P
GigaDNS 189.38.95.96: $GIGA_S
Claro 181.213.132.2: $CLARO_P
Claro 181.213.132.3: $CLARO_S"

dialog --title 'Resultados do Ping:' --msgbox "$TEXTAO01" 0 0
}

function gauge1 {
  echo  "$1" | dialog --title "Testando Ping..." --gauge "Aguarde a conclusão!" 8 40
}

function ping1 {
  ping -c 1 "$1" | awk 'NR==2{print $7,$8}'
}

function xpraset {
sudo mkdir -p /srv/containers/scripts
passs="0"

  sudo apt install -y \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    curl \
    dpkg \
    gcc \
    sed \
    sudo \
    grep \
    wget \
    xterm \
    less \
    gpgv \
    libfuse2 \
    libglib2.0-0 \
    libxext6 \
    libsm6 \
    libxrender1 \
    lsb-release \
    mesa-utils \
    xvfb \
    ssh-askpass \
    virt-manager \
    dbus-x11 \
    libglib2.0-bin \
    gir1.2-spiceclientgtk-3.0

sudo apt-get install -y wget && \
    wget -q https://xpra.org/gpg.asc -O- | sudo apt-key add - &&  \
    echo "deb https://xpra.org/ $(lsb_release -c | awk {'print $2'}) main" | sudo tee -a /etc/apt/sources.list.d/xpra.list && \
    sudo apt-get update && \
    sudo apt-get install -y xpra

VALUE0=$(dialog --title "Definição de Senha" --form "" 8 40 0 \
"Senha: " 1 1 "" 1 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
passs=$(echo "$VALUE0" | sed -n 1p)

[ $passs = "0" ] && {
  clear
  echo "Não deixe o campo em branco! Cancelando..."
  sleep 3
} || {
  echo -e "while true;
do
xpra start --bind-tcp=0.0.0.0:9876,auth=password:value=$passs --html=on --start=virt-manager --daemon=no --xvfb="/usr/bin/Xvfb +extension Composite -screen 0 "1360x768"x24+32 -nolisten tcp -noreset" --pulseaudio=no --notifications=no --bell=no :100
sleep 5
done" | sudo tee /srv/containers/scripts/xpra

  sudo chmod +x /srv/containers/scripts/xpra
  echo "@reboot sleep 15; bash /srv/containers/scripts/xpra" > /tmp/crontab_new
  crontab -l | cat - /tmp/crontab_new > crontab.txt && crontab crontab.txt
  rm crontab.txt

  bash /srv/containers/scripts/xpra &
  }
}

function macvland {
  macvlanr=$(docker inspect macvlan 1>/dev/null 2>/dev/null && echo yes || echo no)
  [ "$macvlanr" = "no" ] && {
    clear
    echo "Macvlan não encontrado. Criando..."
    sleep 2

    var1="0"; var2="0"; var3="0"
    VALUE1="192.168.0.0"; VALUE2="192.168.0.1" ; VALUE3="enp2s0"

    VALUE0=$(dialog --ok-label "Criar" --title "Novo MACVLAN" --form "LAN for Containers" 10 40 0 \
"Subnet  :" 1 1 "$VALUE1" 1 11 30 0 \
"Gateway :" 2 1 "$VALUE2" 2 11 30 0 \
"Parent  :" 3 1 "$VALUE3" 3 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
    [ $? -ne 0 ] && exit
    var1=$(echo "$VALUE0" | sed -n 1p)
    var2=$(echo "$VALUE0" | sed -n 2p)
    var3=$(echo "$VALUE0" | sed -n 3p)

    [ "$var1" = "0" ] || [ "$var2" = "0" ] || [ "$var3" = "0" ] && {
      clear
      echo "Não deixe nenhum campo vazio! Saindo..."
      sleep 3
    } || {
      docker network create -d macvlan --subnet="$var1"/24 --gateway="$var2" -o parent="$var3" macvlan
    }
  } || {
    echo "." > /dev/null
  }
}

function start {
var0=$(dialog --title 'Tools' --backtitle "Ferramentas úteis!" --menu " " 0 0 0 \
A 'SMB Client' \
B 'Test Beep' \
C 'Sync all SATA' \
D 'Test DNS' \
E 'ISO Downloader' \
F 'Set Macvlan' \
G 'Remove Macvlan' \
H 'Auto Config Time&Date' \
X '<' 2>&1 > /dev/tty )

case "$var0" in

A) sambaclient ; start ;;
B) sudo env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep ; start ;;
C) satas ; start ;;
D) dnstest ; start ;;
E) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/isoserver | bash ; start ;;
F) macvland ; start ;;
G) clear ; docker network rm macvlan ; sleep 2 ; start ;;
H) clear ; sudo timedatectl set-timezone America/Bahia ; date ; sleep 3 ; start ;;
X) echo "Saindo..." ;;
esac
}

sudo apt install dialog cifs-utils smbclient -y
start
