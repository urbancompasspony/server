#!/bin/bash

pathmount="/tmp/pathmount"
YAML_FILE="/srv/system.yaml"

function start {
  if ! var0=$(dialog --title 'Ferramentas' --backtitle "Ferramentas e Utilidades" --ok-label "Acessar" --cancel-label "Voltar" --menu " " 0 0 0 \
  0 'Buscar Pastas ou Arquivos' \
  1 'Instalar o DWService' \
  2 'Tailscale Localhost' \
  3 'Baixar Imagens .ISO (XPRA)' \
  4 'Atualizar Driver VirtIO (XPRA)' \
  5 'Testar o Beep' \
  6 'Sync SATAs' \
  7 'Ping DNS (para pfSense)' \
  8 'SpeedTest by Ookla' \
  9 'Teste de Placa de Rede' \
  10 'Ajustar Modo Kiosk' \
  11 'Alterar Hostname do Servidor' \
  X '<' 2>&1 > /dev/tty ); then
    return
  fi
  case "$var0" in
  0) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/refs/heads/main/search-tool.sh | sudo bash ; start ;;
  1) dwservice0 ; start ;;
  2) tailscale0 ; start ;;
  3) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/isoserver | sudo bash ; start ;;
  4) clear; sudo wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso -O /var/lib/libvirt/images/virtio-win.iso ; start ;;
  5) clear ; sudo env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep ; start ;;
  6) clear ; satas ; start ;;
  7) clear ; dnstest ; start ;;
  8) speedtest0 ; start ;;
  9) iperftest ; start ;;
  10) kiosk0 ; start ;;
  11) hostname_menu_with_yaml ; start ;;
  X) echo "." >/dev/null ;;
  esac
}

# Fun√ß√£o para salvar hostname no system.yaml
function save_hostname_to_yaml {
  local hostname="$1"
  local datetime=$(date +"%d/%m/%Y - %H:%M:%S")
  
  echo "üíæ Salvando hostname no system.yaml..."
  
  # Verifica se o arquivo existe, se n√£o, cria estrutura b√°sica
  if [ ! -f "$YAML_FILE" ]; then
    clear; echo "PADR√ÉO CDN INEXISTENTE! Saindo."; sleep 5
    return
  else
    # Arquivo existe, apenas atualiza a se√ß√£o Sistema
    echo "üìù Atualizando hostname no system.yaml..."
    
    # Verifica se a se√ß√£o Sistema existe
    if ! yq -e '.Sistema' "$YAML_FILE" >/dev/null 2>&1; then
      sudo yq -i '.Sistema = {}' "$YAML_FILE"
    fi
    
    # Atualiza hostname e data
    sudo yq -i ".Sistema.Hostname = \"$hostname\"" "$YAML_FILE"
    sudo yq -i ".Sistema.Data_Hostname = \"$datetime\"" "$YAML_FILE"
  fi
  
  echo "‚úÖ Hostname '$hostname' salvo no system.yaml!"
}

# Fun√ß√£o para obter hostname do system.yaml
function get_hostname_from_yaml {
  if [ ! -f "$YAML_FILE" ]; then
    echo ""
    return 1
  fi
  
  hostname_from_yaml=$(yq -r '.Sistema.Hostname // empty' "$YAML_FILE" 2>/dev/null)
  echo "$hostname_from_yaml"
}

# Fun√ß√£o para verificar se hostname no sistema difere do YAML
function check_hostname_sync {
  local current_hostname=$(hostname)
  local yaml_hostname=$(get_hostname_from_yaml)
  
  if [ -z "$yaml_hostname" ]; then
    echo "‚ö†Ô∏è  Hostname n√£o definido no system.yaml"
    return 1
  elif [ "$current_hostname" != "$yaml_hostname" ]; then
    echo "‚ö†Ô∏è  Hostname desatualizado:"
    echo "   Sistema atual: $current_hostname"
    echo "   No system.yaml: $yaml_hostname"
    return 2
  else
    echo "‚úÖ Hostname sincronizado: $current_hostname"
    return 0
  fi
}

# Fun√ß√£o modificada para alterar hostname (com salvamento no YAML)
function change_hostname_with_yaml {
  # Captura o hostname atual
  current_hostname=$(hostname)
  current_fqdn=$(hostname -f 2>/dev/null || echo "$current_hostname")
  
  # Exibe informa√ß√µes atuais
  dialog --title "Hostname Atual" --msgbox "Hostname atual: $current_hostname\nFQDN atual: $current_fqdn" 8 50
  
  # Solicita o novo hostname
  if ! new_hostname=$(dialog --title "Alterar Hostname" --backtitle "Configura√ß√£o de Sistema" --inputbox "Digite o novo hostname:\n\nRegras:\n- Apenas letras, n√∫meros e h√≠fens\n- M√°ximo 63 caracteres\n- N√£o pode come√ßar ou terminar com h√≠fen" 12 50 "$current_hostname" 2>&1 > /dev/tty); then
    return
  fi
  
  # Valida√ß√£o b√°sica do hostname
  if [ -z "$new_hostname" ]; then
    dialog --title "ERRO" --msgbox "O hostname n√£o pode estar vazio!" 6 40
    return
  fi
  
  # Verifica se o hostname cont√©m apenas caracteres v√°lidos
  if ! echo "$new_hostname" | grep -q '^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$\|^[a-zA-Z0-9]$'; then
    dialog --title "ERRO" --msgbox "Hostname inv√°lido!\n\nUse apenas:\n- Letras (a-z, A-Z)\n- N√∫meros (0-9)\n- H√≠fens (-)\n\nN√£o pode come√ßar ou terminar com h√≠fen." 10 50
    return
  fi
  
  # Verifica o comprimento
  if [ ${#new_hostname} -gt 63 ]; then
    dialog --title "ERRO" --msgbox "Hostname muito longo!\nM√°ximo: 63 caracteres\nAtual: ${#new_hostname} caracteres" 8 40
    return
  fi
  
  # Confirma√ß√£o
  if ! dialog --title "Confirma√ß√£o" --backtitle "Altera√ß√£o de Hostname" --yesno "Alterar hostname de:\n'$current_hostname'\npara:\n'$new_hostname'\n\nSalvar no system.yaml?\n\nTem certeza?" 12 50; then
    dialog --title "Cancelado" --msgbox "Altera√ß√£o cancelada pelo usu√°rio." 6 40
    return
  fi
  
  # Executa as altera√ß√µes
  change_hostname_execute_with_yaml "$new_hostname"
}

# Fun√ß√£o para executar a altera√ß√£o do hostname (com salvamento no YAML)
function change_hostname_execute_with_yaml {
  local new_hostname="$1"
  local current_hostname=$(hostname)
  local temp_file="/tmp/hosts_backup_$(date +%s)"
  
  # Backup do /etc/hosts
  if ! sudo cp /etc/hosts "$temp_file"; then
    dialog --title "ERRO" --msgbox "Falha ao criar backup do /etc/hosts!" 6 40
    return
  fi
  
  dialog --title "Processando" --infobox "Alterando hostname...\nPor favor, aguarde..." 5 30
  
  # 1. Altera via hostnamectl
  if ! sudo hostnamectl set-hostname "$new_hostname"; then
    dialog --title "ERRO" --msgbox "Falha ao definir hostname via hostnamectl!" 6 40
    return
  fi
  
  # 2. Atualiza /etc/hosts
  # Remove entradas antigas do hostname
  sudo sed -i "/$current_hostname/d" /etc/hosts
  
  # Adiciona novas entradas
  if ! grep -q "127.0.0.1.*$new_hostname" /etc/hosts; then
    sudo sed -i "1a\\127.0.0.1\t$new_hostname" /etc/hosts
  fi
  
  if ! grep -q "127.0.1.1.*$new_hostname" /etc/hosts; then
    sudo sed -i "/127.0.0.1.*$new_hostname/a\\127.0.1.1\t$new_hostname" /etc/hosts
  fi
  
  # 3. Atualiza /etc/hostname (backup method)
  echo "$new_hostname" | sudo tee /etc/hostname > /dev/null
  
  # 4. NOVO: Salva no system.yaml
  save_hostname_to_yaml "$new_hostname"
  
  sleep 1
  
  # Verifica se a altera√ß√£o foi bem-sucedida
  local verification_hostname=$(hostnamectl --static)
  
  if [ "$verification_hostname" = "$new_hostname" ]; then
    dialog --title "Sucesso" --msgbox "Hostname alterado com sucesso!\n\nAnterior: $current_hostname\nNovo: $new_hostname\n\n‚úÖ Sistema atualizado\n‚úÖ Salvo no system.yaml\n\nBackup do /etc/hosts salvo em:\n$temp_file\n\nReinicie o sistema para garantir que todas as aplica√ß√µes reconhe√ßam a mudan√ßa." 15 60
  else
    # Restaura backup em caso de falha
    sudo cp "$temp_file" /etc/hosts
    dialog --title "ERRO" --msgbox "Falha na altera√ß√£o do hostname!\n\nO /etc/hosts foi restaurado do backup.\nVerifique as permiss√µes e tente novamente." 8 50
  fi
}

# Fun√ß√£o para aplicar hostname do system.yaml ao sistema
function apply_hostname_from_yaml {
  local yaml_hostname=$(get_hostname_from_yaml)
  local current_hostname=$(hostname)
  
  if [ -z "$yaml_hostname" ]; then
    dialog --title "ERRO" --msgbox "Nenhum hostname encontrado no system.yaml!\n\nDefina um hostname primeiro usando a op√ß√£o 'Alterar hostname'." 8 50
    return
  fi
  
  if [ "$current_hostname" = "$yaml_hostname" ]; then
    dialog --title "Informa√ß√£o" --msgbox "O hostname do sistema j√° est√° sincronizado!\n\nHostname atual: $current_hostname\nHostname no YAML: $yaml_hostname" 8 50
    return
  fi
  
  # Mostra informa√ß√µes e pede confirma√ß√£o
  if ! dialog --title "Aplicar Hostname do YAML" --backtitle "Sincroniza√ß√£o de Hostname" --yesno "Aplicar hostname do system.yaml?\n\nHostname atual: $current_hostname\nHostname no YAML: $yaml_hostname\n\nIsto ir√° alterar o hostname do sistema.\n\nContinuar?" 12 50; then
    dialog --title "Cancelado" --msgbox "Opera√ß√£o cancelada pelo usu√°rio." 6 40
    return
  fi
  
  # Aplica o hostname do YAML
  apply_hostname_execute "$yaml_hostname"
}

# Fun√ß√£o para executar aplica√ß√£o do hostname do YAML
function apply_hostname_execute {
  local new_hostname="$1"
  local current_hostname=$(hostname)
  local temp_file="/tmp/hosts_backup_$(date +%s)"
  local datetime=$(date +"%d/%m/%Y - %H:%M:%S")
  
  # Backup do /etc/hosts
  if ! sudo cp /etc/hosts "$temp_file"; then
    dialog --title "ERRO" --msgbox "Falha ao criar backup do /etc/hosts!" 6 40
    return
  fi
  
  dialog --title "Processando" --infobox "Aplicando hostname do YAML...\nPor favor, aguarde..." 5 40
  
  # 1. Altera via hostnamectl
  if ! sudo hostnamectl set-hostname "$new_hostname"; then
    dialog --title "ERRO" --msgbox "Falha ao definir hostname via hostnamectl!" 6 40
    return
  fi
  
  # 2. Atualiza /etc/hosts
  # Remove entradas antigas do hostname
  sudo sed -i "/$current_hostname/d" /etc/hosts
  
  # Adiciona novas entradas
  if ! grep -q "127.0.0.1.*$new_hostname" /etc/hosts; then
    sudo sed -i "1a\\127.0.0.1\t$new_hostname" /etc/hosts
  fi
  
  if ! grep -q "127.0.1.1.*$new_hostname" /etc/hosts; then
    sudo sed -i "/127.0.0.1.*$new_hostname/a\\127.0.1.1\t$new_hostname" /etc/hosts
  fi
  
  # 3. Atualiza /etc/hostname
  echo "$new_hostname" | sudo tee /etc/hostname > /dev/null
  
  # 4. Atualiza data de aplica√ß√£o no YAML
  if [ -f "$YAML_FILE" ]; then
    sudo yq -i ".Sistema.Data_Aplicacao = \"$datetime\"" "$YAML_FILE"
  fi
  
  sleep 1
  
  # Verifica se a altera√ß√£o foi bem-sucedida
  local verification_hostname=$(hostnamectl --static)
  
  if [ "$verification_hostname" = "$new_hostname" ]; then
    dialog --title "Sucesso" --msgbox "Hostname aplicado com sucesso!\n\nAnterior: $current_hostname\nNovo: $new_hostname\n\n‚úÖ Hostname do YAML aplicado\n‚úÖ Data de aplica√ß√£o atualizada\n\nBackup do /etc/hosts salvo em:\n$temp_file\n\nReinicie o sistema para garantir que todas as aplica√ß√µes reconhe√ßam a mudan√ßa." 16 60
  else
    # Restaura backup em caso de falha
    sudo cp "$temp_file" /etc/hosts
    dialog --title "ERRO" --msgbox "Falha na aplica√ß√£o do hostname!\n\nO /etc/hosts foi restaurado do backup.\nVerifique as permiss√µes e tente novamente." 8 50
  fi
}

# Fun√ß√£o para mostrar informa√ß√µes detalhadas do hostname (incluindo YAML)
function show_hostname_info_with_yaml {
  local current_hostname=$(hostname)
  local static_hostname=$(hostnamectl --static)
  local pretty_hostname=$(hostnamectl --pretty 2>/dev/null || echo "N√£o definido")
  local transient_hostname=$(hostnamectl --transient)
  local fqdn=$(hostname -f 2>/dev/null || echo "N√£o dispon√≠vel")
  local domain=$(hostname -d 2>/dev/null || echo "N√£o definido")
  
  # Informa√ß√µes do YAML
  local yaml_hostname=$(get_hostname_from_yaml)
  local yaml_info=""
  
  if [ -n "$yaml_hostname" ]; then
    local yaml_date=$(yq -r '.Sistema.Data_Hostname // "N√£o dispon√≠vel"' "$YAML_FILE" 2>/dev/null)
    local yaml_applied=$(yq -r '.Sistema.Data_Aplicacao // "Nunca aplicado"' "$YAML_FILE" 2>/dev/null)
    
    yaml_info="
INFORMA√á√ïES DO SYSTEM.YAML:
Hostname salvo: $yaml_hostname
Data de defini√ß√£o: $yaml_date
√öltima aplica√ß√£o: $yaml_applied"
    
    if [ "$current_hostname" != "$yaml_hostname" ]; then
      yaml_info="$yaml_info
‚ö†Ô∏è  STATUS: Desatualizado!"
    else
      yaml_info="$yaml_info
‚úÖ STATUS: Sincronizado"
    fi
  else
    yaml_info="
INFORMA√á√ïES DO SYSTEM.YAML:
‚ùå Hostname n√£o definido no YAML"
  fi
  
  # Captura conte√∫do relevante do /etc/hosts
  local hosts_content=$(grep -E "(127\.0\.0\.1|127\.0\.1\.1)" /etc/hosts | head -5)
  
  dialog --title "Informa√ß√µes Completas do Hostname" --msgbox "INFORMA√á√ïES DO SISTEMA:
Hostname atual: $current_hostname
Hostname est√°tico: $static_hostname  
Hostname transiente: $transient_hostname
Hostname pretty: $pretty_hostname
FQDN: $fqdn
Dom√≠nio: $domain
$yaml_info

ENTRADAS EM /etc/hosts:
$hosts_content" 20 80
}

# Menu principal para hostname (modificado)
function hostname_menu_with_yaml {
  while true; do
    # Verifica status de sincroniza√ß√£o para mostrar no menu
    local sync_status=""
    case $(check_hostname_sync >/dev/null 2>&1; echo $?) in
      1) sync_status=" [‚ùå N√£o definido no YAML]" ;;
      2) sync_status=" [‚ö†Ô∏è Desatualizado]" ;;
      0) sync_status=" [‚úÖ Sincronizado]" ;;
    esac
    
    if ! var0=$(dialog --title "Gerenciamento de Hostname${sync_status}" --backtitle "Configura√ß√µes do Sistema" --menu "Selecione uma op√ß√£o:" 0 0 0 \
      1 'Visualizar informa√ß√µes completas do hostname' \
      2 'Alterar hostname (salva no YAML)' \
      3 'Aplicar hostname do system.yaml ao sistema' \
      4 'Verificar sincroniza√ß√£o YAML ‚Üî Sistema' \
      5 'Verificar arquivo /etc/hosts' \
      6 'Testar resolu√ß√£o de nome' \
      X 'Voltar' 2>&1 > /dev/tty); then
      return
    fi
    
    case "$var0" in
    1) show_hostname_info_with_yaml ;;
    2) change_hostname_with_yaml ;;
    3) apply_hostname_from_yaml ;;
    4) check_hostname_sync_dialog ;;
    5) show_hosts_file ;;
    6) test_hostname_resolution ;;
    X) return ;;
    esac
  done
}

# Fun√ß√£o para exibir status de sincroniza√ß√£o em dialog
function check_hostname_sync_dialog {
  local current_hostname=$(hostname)
  local yaml_hostname=$(get_hostname_from_yaml)
  local message=""
  
  if [ -z "$yaml_hostname" ]; then
    message="STATUS: Hostname n√£o definido no system.yaml
    
Hostname atual do sistema: $current_hostname
Hostname no system.yaml: N√£o definido

RECOMENDA√á√ÉO:
Use a op√ß√£o 'Alterar hostname' para definir e salvar no YAML."
  elif [ "$current_hostname" != "$yaml_hostname" ]; then
    message="STATUS: Hostname desatualizado
    
Hostname atual do sistema: $current_hostname
Hostname no system.yaml: $yaml_hostname

RECOMENDA√á√ÉO:
Use 'Aplicar hostname do system.yaml' para sincronizar o sistema com o YAML."
  else
    local yaml_date=$(yq -r '.Sistema.Data_Hostname // "N√£o dispon√≠vel"' "$YAML_FILE" 2>/dev/null)
    message="STATUS: Hostname sincronizado ‚úÖ
    
Hostname atual: $current_hostname
Definido no YAML em: $yaml_date

Tudo est√° correto!"
  fi
  
  dialog --title "Status de Sincroniza√ß√£o" --msgbox "$message" 12 60
}

# Fun√ß√£o para mostrar o arquivo /etc/hosts
function show_hosts_file {
  local hosts_content=$(cat /etc/hosts)
  dialog --title "Conte√∫do do /etc/hosts" --msgbox "$hosts_content" 20 80
}

# Fun√ß√£o para testar resolu√ß√£o de nome
function test_hostname_resolution {
  local current_hostname=$(hostname)
  local test_results=""
  
  dialog --title "Testando" --infobox "Testando resolu√ß√£o de nomes...\nPor favor, aguarde..." 5 40
  
  # Testa resolu√ß√£o local
  if ping -c 1 "$current_hostname" >/dev/null 2>&1; then
    test_results="‚úÖ Resolu√ß√£o local: OK\n"
  else
    test_results="‚ùå Resolu√ß√£o local: FALHA\n"
  fi
  
  # Testa resolu√ß√£o localhost
  if ping -c 1 localhost >/dev/null 2>&1; then
    test_results="${test_results}‚úÖ Localhost: OK\n"
  else
    test_results="${test_results}‚ùå Localhost: FALHA\n"
  fi
  
  # Testa resolu√ß√£o DNS externa
  if ping -c 1 google.com >/dev/null 2>&1; then
    test_results="${test_results}‚úÖ DNS externo: OK\n"
  else
    test_results="${test_results}‚ùå DNS externo: FALHA\n"
  fi
  
  # Mostra resultados
  dialog --title "Resultados do Teste" --msgbox "Resultados da resolu√ß√£o de nomes:\n\n$test_results\nHostname testado: $current_hostname" 10 50
}

function kiosk0 {
  if [ -d /home/administrador/kiosk ]; then
    curl -sSL https://raw.githubusercontent.com/urbancompasspony/kiosk-mode/refs/heads/main/MENU | tee /home/administrador/.kiosk ; chmod +x /home/administrador/.kiosk ; clear ; bash /home/administrador/.kiosk
  else
    clear; echo "Modo Kioske nao configurado."
  fi
}

function speedtest0 {
  clear
  echo ""; echo "Aguarde a conclusao do teste!"; echo ""
  curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3
  echo ""; sleep 3
  read -r -p "Teste concluido! Pressione Enter para fechar"
}

function tailscale0 {
  clear
  version0=$(lsb_release -a 2>/dev/null | sed -ne '4p' | awk '{print $2}')

  [ -f /usr/share/keyrings/tailscale-archive-keyring.gpg ] || {
    curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/"$version0".noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
  }

  [ -f /etc/apt/sources.list.d/tailscale.list ] || {
    curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/"$version0".tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list
  }

  clear; sudo apt update
  sudo apt install tailscale -y; clear
}

function iperftest {
  if var0=$(dialog --title 'iperf' --backtitle "" --menu "Escolha o modo!" 0 0 0 \
  1 'Cliente' \
  2 'Servidor' \
  X '<' 2>&1 > /dev/tty ); then
    return
  fi
  
  case "$var0" in
  1) iperfclnt ; start ;;
  2) iperfsrv ; start ;;
  X) echo "." > /dev/null ;;
  esac
}

function iperfclnt {
  clear; echo ""
  read -r -a ipcc -p "Digite o IP do Servidor: "
  clear; echo "Entrando no modo Cliente. Para sair antes do teste concluir, tecle 'CTRL Esquerdo' + C duas vezes seguidas!"; echo ""
  
  for ip in "${ipcc[@]}"; do
    iperf -c "$ip"
  done
  
  read -r -p "Teste finalizado, tecle Enter para sair!"
}

function iperfsrv {
  clear; echo "Entrando no modo Servidor. Para sair antes do teste concluir, tecle 'CTRL Esquerdo' + C"; echo ""
  meuiplocal=$(ip route get 1.1.1.1 | grep -oP 'src \K\S+'); echo "Identifiquei que o IP Servidor √© $meuiplocal!"
  iperf -s && read -r -p "Teste finalizado, tecle Enter para sair!"
}

function dwservice0 {
  clear
  wget https://www.dwservice.net/download/dwagent_x86.sh -O /home/administrador/dwagent_x86.sh
  chmod +x dwagent_x86.sh
  sudo bash dwagent_x86.sh
}

function satas {
  gouge=10
  find /sys/class/scsi_host/host* -maxdepth 0 -print0 | while IFS= read -r -d '' number; do
    echo "0 0 0" | sudo tee "$number"/scan; clear
    gauge1 $((gouge+20)) "Scaneando e validando portas SATA"
    sleep 1
  done
  dialog --title 'Informacao:' --msgbox "Concluido!" 0 0
}

function change_hostname {
  # Captura o hostname atual
  current_hostname=$(hostname)
  current_fqdn=$(hostname -f 2>/dev/null || echo "$current_hostname")
  
  # Exibe informa√ß√µes atuais
  dialog --title "Hostname Atual" --msgbox "Hostname atual: $current_hostname\nFQDN atual: $current_fqdn" 8 50
  
  # Solicita o novo hostname
  if ! new_hostname=$(dialog --title "Alterar Hostname" --backtitle "Configura√ß√£o de Sistema" --inputbox "Digite o novo hostname:\n\nRegras:\n- Apenas letras, n√∫meros e h√≠fens\n- M√°ximo 63 caracteres\n- N√£o pode come√ßar ou terminar com h√≠fen" 12 50 "$current_hostname" 2>&1 > /dev/tty); then
    return
  fi
  
  # Valida√ß√£o b√°sica do hostname
  if [ -z "$new_hostname" ]; then
    dialog --title "ERRO" --msgbox "O hostname n√£o pode estar vazio!" 6 40
    return
  fi
  
  # Verifica se o hostname cont√©m apenas caracteres v√°lidos
  if ! echo "$new_hostname" | grep -q '^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$\|^[a-zA-Z0-9]$'; then
    dialog --title "ERRO" --msgbox "Hostname inv√°lido!\n\nUse apenas:\n- Letras (a-z, A-Z)\n- N√∫meros (0-9)\n- H√≠fens (-)\n\nN√£o pode come√ßar ou terminar com h√≠fen." 10 50
    return
  fi
  
  # Verifica o comprimento
  if [ ${#new_hostname} -gt 63 ]; then
    dialog --title "ERRO" --msgbox "Hostname muito longo!\nM√°ximo: 63 caracteres\nAtual: ${#new_hostname} caracteres" 8 40
    return
  fi
  
  # Confirma√ß√£o
  if ! dialog --title "Confirma√ß√£o" --backtitle "Altera√ß√£o de Hostname" --yesno "Alterar hostname de:\n'$current_hostname'\npara:\n'$new_hostname'\n\nTem certeza?" 10 50; then
    dialog --title "Cancelado" --msgbox "Altera√ß√£o cancelada pelo usu√°rio." 6 40
    return
  fi
  
  # Executa as altera√ß√µes
  change_hostname_execute "$new_hostname"
}

# Fun√ß√£o para executar a altera√ß√£o do hostname
function change_hostname_execute {
  local new_hostname="$1"
  local current_hostname=$(hostname)
  local temp_file="/tmp/hosts_backup_$(date +%s)"
  
  # Backup do /etc/hosts
  if ! sudo cp /etc/hosts "$temp_file"; then
    dialog --title "ERRO" --msgbox "Falha ao criar backup do /etc/hosts!" 6 40
    return
  fi
  
  dialog --title "Processando" --infobox "Alterando hostname...\nPor favor, aguarde..." 5 30
  
  # 1. Altera via hostnamectl
  if ! sudo hostnamectl set-hostname "$new_hostname"; then
    dialog --title "ERRO" --msgbox "Falha ao definir hostname via hostnamectl!" 6 40
    return
  fi
  
  # 2. Atualiza /etc/hosts
  # Remove entradas antigas do hostname
  sudo sed -i "/$current_hostname/d" /etc/hosts
  
  # Adiciona novas entradas
  if ! grep -q "127.0.0.1.*$new_hostname" /etc/hosts; then
    sudo sed -i "1a\\127.0.0.1\t$new_hostname" /etc/hosts
  fi
  
  if ! grep -q "127.0.1.1.*$new_hostname" /etc/hosts; then
    sudo sed -i "/127.0.0.1.*$new_hostname/a\\127.0.1.1\t$new_hostname" /etc/hosts
  fi
  
  # 3. Atualiza /etc/hostname (backup method)
  echo "$new_hostname" | sudo tee /etc/hostname > /dev/null
  
  sleep 1
  
  # Verifica se a altera√ß√£o foi bem-sucedida
  local verification_hostname=$(hostnamectl --static)
  
  if [ "$verification_hostname" = "$new_hostname" ]; then
    dialog --title "Sucesso" --msgbox "Hostname alterado com sucesso!\n\nAnterior: $current_hostname\nNovo: $new_hostname\n\nBackup do /etc/hosts salvo em:\n$temp_file\n\nReinicie o sistema para garantir que todas as aplica√ß√µes reconhe√ßam a mudan√ßa." 12 60
  else
    # Restaura backup em caso de falha
    sudo cp "$temp_file" /etc/hosts
    dialog --title "ERRO" --msgbox "Falha na altera√ß√£o do hostname!\n\nO /etc/hosts foi restaurado do backup.\nVerifique as permiss√µes e tente novamente." 8 50
  fi
}

# Fun√ß√£o para visualizar informa√ß√µes do hostname
function show_hostname_info {
  local current_hostname=$(hostname)
  local static_hostname=$(hostnamectl --static)
  local pretty_hostname=$(hostnamectl --pretty 2>/dev/null || echo "N√£o definido")
  local transient_hostname=$(hostnamectl --transient)
  local fqdn=$(hostname -f 2>/dev/null || echo "N√£o dispon√≠vel")
  local domain=$(hostname -d 2>/dev/null || echo "N√£o definido")
  
  # Captura conte√∫do relevante do /etc/hosts
  local hosts_content=$(grep -E "(127\.0\.0\.1|127\.0\.1\.1)" /etc/hosts | head -5)
  
  dialog --title "Informa√ß√µes do Hostname" --msgbox "Hostname atual: $current_hostname
Hostname est√°tico: $static_hostname  
Hostname transiente: $transient_hostname
Hostname pretty: $pretty_hostname
FQDN: $fqdn
Dom√≠nio: $domain

Entradas relevantes em /etc/hosts:
$hosts_content" 15 70
}

# Menu principal para hostname
function hostname_menu {
  if ! var0=$(dialog --title "Gerenciamento de Hostname" --backtitle "Configura√ß√µes do Sistema" --menu "Selecione uma op√ß√£o:" 0 0 0 \
  1 'Visualizar informa√ß√µes do hostname' \
  2 'Alterar hostname' \
  3 'Verificar arquivo /etc/hosts' \
  4 'Testar resolu√ß√£o de nome' \
  X 'Voltar' 2>&1 > /dev/tty); then
    return
  fi
  
  case "$var0" in
  1) show_hostname_info ; hostname_menu ;;
  2) change_hostname ; hostname_menu ;;
  3) show_hosts_file ; hostname_menu ;;
  4) test_hostname_resolution ; hostname_menu ;;
  X) return ;;
  esac
}

# Fun√ß√£o para mostrar o arquivo /etc/hosts
function show_hosts_file {
  local hosts_content=$(cat /etc/hosts)
  dialog --title "Conte√∫do do /etc/hosts" --msgbox "$hosts_content" 20 80
}

# Fun√ß√£o para testar resolu√ß√£o de nome
function test_hostname_resolution {
  local current_hostname=$(hostname)
  local test_results=""
  
  dialog --title "Testando" --infobox "Testando resolu√ß√£o de nomes...\nPor favor, aguarde..." 5 40
  
  # Testa resolu√ß√£o local
  if ping -c 1 "$current_hostname" >/dev/null 2>&1; then
    test_results="‚úÖ Resolu√ß√£o local: OK\n"
  else
    test_results="‚ùå Resolu√ß√£o local: FALHA\n"
  fi
  
  # Testa resolu√ß√£o localhost
  if ping -c 1 localhost >/dev/null 2>&1; then
    test_results="${test_results}‚úÖ Localhost: OK\n"
  else
    test_results="${test_results}‚ùå Localhost: FALHA\n"
  fi
  
  # Testa resolu√ß√£o DNS externa
  if ping -c 1 google.com >/dev/null 2>&1; then
    test_results="${test_results}‚úÖ DNS externo: OK\n"
  else
    test_results="${test_results}‚ùå DNS externo: FALHA\n"
  fi
  
  # Mostra resultados
  dialog --title "Resultados do Teste" --msgbox "Resultados da resolu√ß√£o de nomes:\n\n$test_results\nHostname testado: $current_hostname" 10 50
}

function dnstest {
Google_P=$(ping1 "8.8.4.4")
gauge1 "8" "Testando ping para 8.8.4.4"
Google_S=$(ping1 "8.8.8.8")
gauge1 "14" "Testando ping para 8.8.8.8"
OpenDNS_P=$(ping1 "208.67.222.222")
gauge1 "19" "Testando ping para 208.67.222.222"
OpenDNS_S=$(ping1 "208.67.220.220")
gauge1 "22" "Testando ping para 208.67.220.220"
Level3_P=$(ping1 "4.2.2.1")
gauge1 "24" "Testando ping para 4.2.2.1"
Level3_S=$(ping1 "4.2.2.2")
gauge1 "28" "Testando ping para 4.2.2.2"
Comodo_P=$(ping1 "8.26.56.26")
gauge1 "32" "Testando ping para 8.26.56.26"
Comodo_S=$(ping1 "8.20.247.20")
gauge1 "36" "Testando ping para 8.20.247.20"
DNSWATCH_P=$(ping1 "84.200.69.80")
gauge1 "42" "Testando ping para 84.200.69.80"
DNSWATCH_S=$(ping1 "84.200.70.40")
gauge1 "46" "Testando ping para 84.200.70.40"
Quad9_P=$(ping1 "9.9.9.9")
gauge1 "50" "Testando ping para 9.9.9.9"
Quad9_S=$(ping1 "149.112.112.112")
gauge1 "57" "Testando ping para 149.112.112.112"
Cloudflare_P=$(ping1 "1.1.1.1")
gauge1 "67" "Testando ping para 1.1.1.1"
Cloudflare_S=$(ping1 "1.0.0.1")
gauge1 "74" "Testando ping para 1.0.0.1"
Algar_P=$(ping1 "200.225.197.34")
gauge1 "79" "Testando ping para 200.225.197.34"
Algar_S=$(ping1 "200.225.197.37")
gauge1 "85" "Testando ping para 200.225.197.37"
GIGA_P=$(ping1 "189.38.95.95")
gauge1 "88" "Testando ping para 189.38.95.95"
GIGA_S=$(ping1 "189.38.95.96")
gauge1 "93" "Testando ping para 189.38.95.96"
CLARO_P=$(ping1 "181.213.132.2")
gauge1 "98" "Testando ping para 181.213.132.2"
CLARO_S=$(ping1 "181.213.132.3")
gauge1 "100" "Testando ping para 181.213.132.3"

TEXTAO01="Google ..... 8.8.4.4 .........: $Google_P
Google ..... 8.8.8.8 .........: $Google_S
OpenDNS .... 208.67.222.222 ..: $OpenDNS_P
OpenDNS .... 208.67.220.220 ..: $OpenDNS_S
Level3 ..... 4.2.2.1 .........: $Level3_P
Level3 ..... 4.2.2.2 .........: $Level3_S
Comodo ..... 8.26.56.26 ......: $Comodo_P
Comodo ..... 8.20.247.20 .....: $Comodo_S
DNSWATCH ... 84.200.69.80 ....: $DNSWATCH_P
DNSWATCH ... 84.200.70.40 ....: $DNSWATCH_S
Quad9 ...... 9.9.9.9 .........: $Quad9_P
Quad9 ...... 149.112.112.112 .: $Quad9_S
Cloudflare . 1.1.1.1 .........: $Cloudflare_P
Cloudflare . 1.0.0.1 .........: $Cloudflare_S
Algar ...... 200.225.197.34 ..: $Algar_P
Algar ...... 200.225.197.37 ..: $Algar_S
GigaDNS .... 189.38.95.95 ....: $GIGA_P
GigaDNS .... 189.38.95.96 ....: $GIGA_S
Claro ...... 181.213.132.2 ...: $CLARO_P
Claro ...... 181.213.132.3 ...: $CLARO_S"

dialog --title "VISUALIZANDO DADOS" --backtitle "" --msgbox "Pressione Enter para visualizar os resultados! \n\nNavegue com as setas para cima e para baixo. \n\nPara sair pressione 'q' !" 12 40
clear; echo "$TEXTAO01" | less
#dialog --title 'Resultados do Teste Ping:' --msgbox "$TEXTAO01" 0 0
}

function gauge1 {
  clear
  echo  "$1" | dialog --title "Aguarde!" --gauge "$2" 8 40
  sleep 0.5
}

function ping1 {
  ping -c 1 "$1" | awk 'NR==2{print $7,$8}' |  cut -c7-
}

start

exit 1
