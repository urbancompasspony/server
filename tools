#!/bin/bash

pathmount="/tmp/pathmount"

function start {
  if ! var0=$(dialog --title 'Ferramentas' --backtitle "Ferramentas e Utilidades" --ok-label "Acessar" --cancel-label "Voltar" --menu " " 0 0 0 \
  1 'Instalar o DWService' \
  2 'Tailscale Localhost' \
  3 'Baixar Imagens .ISO (XPRA)' \
  4 'Atualizar Driver VirtIO (XPRA)' \
  5 'Teste Ping DNS' \
  6 'Cliente SAMBA' \
  7 'Testar o Beep' \
  8 'Sync SATAs' \
  9 'SpeedTest by Ookla' \
  10 'Teste de Placa de Rede' \
  11 'Ajustar Modo Kiosk' \
  X '<' 2>&1 > /dev/tty ); then
    return
  fi
  
  case "$var0" in
  1) dwservice0 ; start ;;
  2) tailscale0 ; start ;;
  3) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/isoserver | sudo bash ; start ;;
  4) clear; sudo wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso -O /var/lib/libvirt/images/virtio-win.iso ; start ;;
  5) clear ; dnstest ; start ;;
  6) sambaclient ; start ;;
  7) clear ; sudo env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep ; start ;;
  8) clear ; satas ; start ;;
  9) speedtest0 ; start ;;
  11) kiosk0 ; start ;;
  10) iperftest ; start ;;
  X) echo "." >/dev/null ;;
  esac
}

function kiosk0 {
  if [ -d /home/administrador/kiosk ]; then
    curl -sSL https://raw.githubusercontent.com/urbancompasspony/kiosk-mode/refs/heads/main/MENU | tee /home/administrador/.kiosk ; chmod +x /home/administrador/.kiosk ; clear ; bash /home/administrador/.kiosk
  else
    clear; echo "Modo Kioske nao configurado."
  fi
}

function speedtest0 {
  clear
  echo ""; echo "Aguarde a conclusao do teste!"; echo ""
  curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3
  echo ""; sleep 3
  read -r -p "Teste concluido! Pressione Enter para fechar"
}

function tailscale0 {
  clear
  version0=$(lsb_release -a 2>/dev/null | sed -ne '4p' | awk '{print $2}')

  [ -f /usr/share/keyrings/tailscale-archive-keyring.gpg ] || {
    curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/"$version0".noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
  }

  [ -f /etc/apt/sources.list.d/tailscale.list ] || {
    curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/"$version0".tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list
  }

  clear; sudo apt update
  sudo apt install tailscale -y; clear
}

function iperftest {
  if var0=$(dialog --title 'iperf' --backtitle "" --menu "Escolha o modo!" 0 0 0 \
  1 'Cliente' \
  2 'Servidor' \
  X '<' 2>&1 > /dev/tty ); then
    return
  fi
  
  case "$var0" in
  1) iperfclnt ; start ;;
  2) iperfsrv ; start ;;
  X) echo "." > /dev/null ;;
  esac
}

function iperfclnt {
  clear; echo ""
  read -r -a ipcc -p "Digite o IP do Servidor: "
  clear; echo "Entrando no modo Cliente. Para sair antes do teste concluir, tecle 'CTRL Esquerdo' + C duas vezes seguidas!"; echo ""
  
  for ip in "${ipcc[@]}"; do
    iperf -c "$ip"
  done
  
  read -r -p "Teste finalizado, tecle Enter para sair!"
}

function iperfsrv {
  clear; echo "Entrando no modo Servidor. Para sair antes do teste concluir, tecle 'CTRL Esquerdo' + C"; echo ""
  meuiplocal=$(ip route get 1.1.1.1 | grep -oP 'src \K\S+'); echo "Identifiquei que o IP Servidor é $meuiplocal!"
  iperf -s && read -r -p "Teste finalizado, tecle Enter para sair!"
}

function dwservice0 {
  clear
  wget https://www.dwservice.net/download/dwagent_x86.sh -O /home/administrador/dwagent_x86.sh
  chmod +x dwagent_x86.sh
  sudo bash dwagent_x86.sh
}

function sambaclient {
  if [ -f  "$pathmount" ]; then
    VALUE1=$(sed -n '1p' "$pathmount")
    VALUE2=$(sed -n '2p' "$pathmount")
    VALUE3=$(sed -n '3p' "$pathmount")
    VALUE4=$(sed -n '4p' "$pathmount")
    VALUE5=$(sed -n '5p' "$pathmount")
  else
    touch "$pathmount"
    VALUE1="//192.168.X.Y/backup"
    VALUE2="/mnt/backup"
    VALUE3="admin"
    VALUE4="p4ssw0rd"
    VALUE5=",domain=WORKGROUP"
  fi

  VALUE0=$(dialog --help-button --help-label 'Show' --ok-label "Montar" --title "Mounting" --form "Pastas de Redes" 15 50 0 \
  "PATH: " 1 1 "$VALUE1" 1 10 34 0 \
  "MNT:" 2 1 "$VALUE2" 2 10 34 0 \
  "USER:" 3 1 "$VALUE3" 3 10 34 0 \
  "PASS:" 4 1 "$VALUE4" 4 10 34 0 \
  "DOM:" 5 1 "$VALUE5" 5 10 34 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty)
  case $? in
    0) echo "." > /dev/null ;;
    1) exit ;;
    2) mntshow1=$(cat /etc/mtab | grep mnt); dialog --title 'MNTs' --msgbox "$mntshow1" 0 0 ; sambaclient ;;
  esac

  path1=$(echo "$VALUE0" | sed -n 1p)
  mntpt1=$(echo "$VALUE0" | sed -n 2p)
  user1=$(echo "$VALUE0" | sed -n 3p)
  pass1=$(echo "$VALUE0" | sed -n 4p)
  dmn1=$(echo "$VALUE0" | sed -n 5p)

  if [ -z "$path1" ] || [ -z "$mntpt1" ] || [ -z "$user1" ] || [ -z "$pass1" ]; then
    dialog --title "ERRO" --msgbox "Não deixe os campos PATH, MNT, USER ou PASS vazios!" 7 30
    sambaclient
  fi

  echa1=$(grep "$mntpt1" -qs /proc/mounts && echo "sim" || echo "nao")
  if [ "$echa1" = "sim" ]; then
    dialog --title "Informação" --msgbox "Caminho em uso! Escolha outro." 7 30
    sambaclient
  else
  
  {
    echo "$path1"
    echo "$mntpt1"
    echo "$user1"
    echo "$pass1"
    echo "$dmn1"
  } > "$pathmount"

    sudo mkdir -p "$mntpt1"
    sudo mount -t cifs -o user="$user1",password="$pass1""$dmn1",iocharset=utf8,file_mode=0777,dir_mode=0777,noperm "$path1" "$mntpt1"
  fi
}

function satas {
  gouge=10
  find /sys/class/scsi_host/host* -maxdepth 0 -print0 | while IFS= read -r -d '' number; do
    echo "0 0 0" | sudo tee "$number"/scan; clear
    gauge1 $((gouge+20)) "Scaneando e validando portas SATA"
    sleep 1
  done
  dialog --title 'Informacao:' --msgbox "Concluido!" 0 0
}

function dnstest {
Google_P=$(ping1 "8.8.4.4")
gauge1 "8" "Testando ping para 8.8.4.4"
Google_S=$(ping1 "8.8.8.8")
gauge1 "14" "Testando ping para 8.8.8.8"
OpenDNS_P=$(ping1 "208.67.222.222")
gauge1 "19" "Testando ping para 208.67.222.222"
OpenDNS_S=$(ping1 "208.67.220.220")
gauge1 "22" "Testando ping para 208.67.220.220"
Level3_P=$(ping1 "4.2.2.1")
gauge1 "24" "Testando ping para 4.2.2.1"
Level3_S=$(ping1 "4.2.2.2")
gauge1 "28" "Testando ping para 4.2.2.2"
Comodo_P=$(ping1 "8.26.56.26")
gauge1 "32" "Testando ping para 8.26.56.26"
Comodo_S=$(ping1 "8.20.247.20")
gauge1 "36" "Testando ping para 8.20.247.20"
DNSWATCH_P=$(ping1 "84.200.69.80")
gauge1 "42" "Testando ping para 84.200.69.80"
DNSWATCH_S=$(ping1 "84.200.70.40")
gauge1 "46" "Testando ping para 84.200.70.40"
Quad9_P=$(ping1 "9.9.9.9")
gauge1 "50" "Testando ping para 9.9.9.9"
Quad9_S=$(ping1 "149.112.112.112")
gauge1 "57" "Testando ping para 149.112.112.112"
Cloudflare_P=$(ping1 "1.1.1.1")
gauge1 "67" "Testando ping para 1.1.1.1"
Cloudflare_S=$(ping1 "1.0.0.1")
gauge1 "74" "Testando ping para 1.0.0.1"
Algar_P=$(ping1 "200.225.197.34")
gauge1 "79" "Testando ping para 200.225.197.34"
Algar_S=$(ping1 "200.225.197.37")
gauge1 "85" "Testando ping para 200.225.197.37"
GIGA_P=$(ping1 "189.38.95.95")
gauge1 "88" "Testando ping para 189.38.95.95"
GIGA_S=$(ping1 "189.38.95.96")
gauge1 "93" "Testando ping para 189.38.95.96"
CLARO_P=$(ping1 "181.213.132.2")
gauge1 "98" "Testando ping para 181.213.132.2"
CLARO_S=$(ping1 "181.213.132.3")
gauge1 "100" "Testando ping para 181.213.132.3"

TEXTAO01="Google ..... 8.8.4.4 .........: $Google_P
Google ..... 8.8.8.8 .........: $Google_S
OpenDNS .... 208.67.222.222 ..: $OpenDNS_P
OpenDNS .... 208.67.220.220 ..: $OpenDNS_S
Level3 ..... 4.2.2.1 .........: $Level3_P
Level3 ..... 4.2.2.2 .........: $Level3_S
Comodo ..... 8.26.56.26 ......: $Comodo_P
Comodo ..... 8.20.247.20 .....: $Comodo_S
DNSWATCH ... 84.200.69.80 ....: $DNSWATCH_P
DNSWATCH ... 84.200.70.40 ....: $DNSWATCH_S
Quad9 ...... 9.9.9.9 .........: $Quad9_P
Quad9 ...... 149.112.112.112 .: $Quad9_S
Cloudflare . 1.1.1.1 .........: $Cloudflare_P
Cloudflare . 1.0.0.1 .........: $Cloudflare_S
Algar ...... 200.225.197.34 ..: $Algar_P
Algar ...... 200.225.197.37 ..: $Algar_S
GigaDNS .... 189.38.95.95 ....: $GIGA_P
GigaDNS .... 189.38.95.96 ....: $GIGA_S
Claro ...... 181.213.132.2 ...: $CLARO_P
Claro ...... 181.213.132.3 ...: $CLARO_S"

dialog --title "VISUALIZANDO DADOS" --backtitle "" --msgbox "Pressione Enter para visualizar os resultados! \n\nNavegue com as setas para cima e para baixo. \n\nPara sair pressione 'q' !" 12 40
echo "$TEXTAO01" | less
#dialog --title 'Resultados do Teste Ping:' --msgbox "$TEXTAO01" 0 0
}

function gauge1 {
  clear
  echo  "$1" | dialog --title "Aguarde!" --gauge "$2" 8 40
  sleep 0.5
}

function ping1 {
  ping -c 1 "$1" | awk 'NR==2{print $7,$8}' |  cut -c7-
}

start

exit 1
