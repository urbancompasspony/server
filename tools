#!/bin/bash

pathmount="/tmp/pathmount"

function start {
var0=$(dialog --title 'Ferramentas' --backtitle "Ferramentas e Utilidades" --menu " " 0 0 0 \
1 'Instalar o DWService' \
2 'Baixar Imagens .ISO (XPRA)' \
3 'Testar Ping DNS' \
4 'Cliente SAMBA' \
5 'Testar o Beep' \
6 'Sync SATAs' \
7 'Qual meu IP WAN?' \
8 'SpeedTest by Ookla' \
9 'Explorar o conteudo de /mnt' \
X '<' 2>&1 > /dev/tty )
case "$var0" in
1) dwservice0 ; start ;;
2) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/isoserver | sudo bash ; start ;;
3) clear ; dnstest ; start ;;
4) sambaclient ; start ;;
5) clear ; sudo env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep ; start ;;
6) clear ; satas ; start ;;
7) meuip=$(dig @resolver4.opendns.com myip.opendns.com +short) ; dialog --title "Informacao" --msgbox "\n$meuip" 7 25 ; start ;;
8) clear; echo ""; echo "Aguarde a conclusao do teste!"; echo ""; curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 ; echo ""; sleep 3; read -p "Teste concluido! Pressione Enter para fechar" ; start ;;
9) dialog --stdout --title "Veja as pastas da raiz dos discos!" --dselect "/mnt" 15 40; start ;;
X) echo "." >/dev/null ;;
esac
}

function udpcast0 {
var2=$(dialog --title 'UDPCast' --backtitle "$bktitle" --menu "Escolha o modo!" 0 0 0 \
A 'Client' \
B 'Server' \
X '<' 2>&1 > /dev/tty )
[ $? -ne 0 ] && {start}
case "$var2" in
A) clear; echo ""; echo "Modo Cliente. Para sair, precione CTRL + C!" ; echo ""; udp-receiver --file=/dev/null ;;
B) clear; echo ""; echo "Modo Servidor. Para sair, precione CTRL + C!" ; echo ""; udp-sender --file=/dev/zero ;;
X) echo "." >/dev/null ;;
esac
}

function dwservice0 {
  wget https://www.dwservice.net/download/dwagent_x86.sh -O /home/administrador/dwagent_x86.sh
  chmod +x dwagent_x86.sh
  sudo bash dwagent_x86.sh
}

function beep {
  wget https://raw.githubusercontent.com/urbancompasspony/linux.cheat.sheet/main/beep/beep.sh -O /home/administrador/.beep.sh
  sudo bash /home/administrador/.beep.sh
  echo "@reboot sleep 60; bash /home/administrador/.beep.sh" >> /tmp/crontab_new
  sudo crontab -l | cat - /tmp/crontab_new > crontab.txt && sudo crontab crontab.txt
}

function sambaclient {
[ -f  "$pathmount" ] && {
  VALUE1=$(sed -n '1p' "$pathmount")
  VALUE2=$(sed -n '2p' "$pathmount")
  VALUE3=$(sed -n '3p' "$pathmount") 
  VALUE4=$(sed -n '4p' "$pathmount")  
  VALUE5=$(sed -n '5p' "$pathmount")
} || {
  touch "$pathmount"
  VALUE1="//192.168.X.Y/backup"
  VALUE2="/mnt/backup"
  VALUE3="admin"
  VALUE4="p4ssw0rd"
  VALUE5=",domain=WORKGROUP" 
}

VALUE0=$(dialog --help-button --help-label 'Show' --ok-label "Montar" --title "Mounting" --form "Pastas de Redes" 15 50 0 \
"PATH: " 1 1 "$VALUE1" 1 10 34 0 \
"MNT:" 2 1 "$VALUE2" 2 10 34 0 \
"USER:" 3 1 "$VALUE3" 3 10 34 0 \
"PASS:" 4 1 "$VALUE4" 4 10 34 0 \
"DOM:" 5 1 "$VALUE5" 5 10 34 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
case $? in
   0) echo "." > /dev/null ;;
   1) exit ;;
   2) mntshow1=$(cat /etc/mtab | grep mnt); dialog --title 'MNTs' --msgbox "$mntshow1" 0 0 ; sambaclient ;;
esac

path1=$(echo "$VALUE0" | sed -n 1p)
mntpt1=$(echo "$VALUE0" | sed -n 2p)
user1=$(echo "$VALUE0" | sed -n 3p)
pass1=$(echo "$VALUE0" | sed -n 4p)
dmn1=$(echo "$VALUE0" | sed -n 5p)

[ -z "$path1" ] || [ -z "$mntpt1" ] || [ -z "$user1" ] || [ -z "$pass1" ] && {
  dialog --title "ERRO" --msgbox "Não deixe os campos PATH, MNT, USER ou PASS vazios!" 7 30
  sambaclient
  }

echa1=$(grep "$mntpt1" -qs /proc/mounts && echo "sim" || echo "nao")
[ "$echa1" = "sim" ] && {
  dialog --title "Informação" --msgbox "Caminho em uso! Escolha outro." 7 30
  sambaclient
} || {
  echo "$path1" > "$pathmount"
  echo "$mntpt1" >> "$pathmount"
  echo "$user1" >> "$pathmount"
  echo "$pass1" >> "$pathmount"
  echo "$dmn1" >> "$pathmount"

  sudo mkdir -p "$mntpt1"
  sudo mount -t cifs -o user="$user1",password="$pass1""$dmn1",iocharset=utf8,file_mode=0777,dir_mode=0777,noperm "$path1" "$mntpt1"
  mntshow2=$(df -hT)
  }
}

function satas {
  gouge=10
  for number in $(find /sys/class/scsi_host/host* -maxdepth 0); do
    echo "0 0 0" | sudo tee $number/scan; clear
    gauge1 $(($gouge+20)) "Scaneando e validando portas SATA"
    sleep 1
  done
  dialog --title 'Informacao:' --msgbox "Concluido!" 0 0
}

function dnstest {
Google_P=$(ping1 "8.8.4.4")
gauge1 "8" "Testando ping para 8.8.4.4"
Google_S=$(ping1 "8.8.8.8")
gauge1 "14" "Testando ping para 8.8.8.8"
OpenDNS_P=$(ping1 "208.67.222.222")
gauge1 "19" "Testando ping para 208.67.222.222"
OpenDNS_S=$(ping1 "208.67.220.220")
gauge1 "22" "Testando ping para 208.67.220.220"
Level3_P=$(ping1 "4.2.2.1")
gauge1 "24" "Testando ping para 4.2.2.1"
Level3_S=$(ping1 "4.2.2.2")
gauge1 "28" "Testando ping para 4.2.2.2"
Comodo_P=$(ping1 "8.26.56.26")
gauge1 "32" "Testando ping para 8.26.56.26"
Comodo_S=$(ping1 "8.20.247.20")
gauge1 "36" "Testando ping para 8.20.247.20"
DNSWATCH_P=$(ping1 "84.200.69.80")
gauge1 "42" "Testando ping para 84.200.69.80"
DNSWATCH_S=$(ping1 "84.200.70.40")
gauge1 "46" "Testando ping para 84.200.70.40"
Quad9_P=$(ping1 "9.9.9.9")
gauge1 "50" "Testando ping para 9.9.9.9"
Quad9_S=$(ping1 "149.112.112.112")
gauge1 "57" "Testando ping para 149.112.112.112"
Cloudflare_P=$(ping1 "1.1.1.1")
gauge1 "67" "Testando ping para 1.1.1.1"
Cloudflare_S=$(ping1 "1.0.0.1")
gauge1 "74" "Testando ping para 1.0.0.1"
Algar_P=$(ping1 "200.225.197.34")
gauge1 "79" "Testando ping para 200.225.197.34"
Algar_S=$(ping1 "200.225.197.37")
gauge1 "85" "Testando ping para 200.225.197.37"
GIGA_P=$(ping1 "189.38.95.95")
gauge1 "88" "Testando ping para 189.38.95.95"
GIGA_S=$(ping1 "189.38.95.96")
gauge1 "93" "Testando ping para 189.38.95.96"
CLARO_P=$(ping1 "181.213.132.2")
gauge1 "98" "Testando ping para 181.213.132.2"
CLARO_S=$(ping1 "181.213.132.3")
gauge1 "100" "Testando ping para 181.213.132.3"

TEXTAO01="Google ..... 8.8.4.4 .........: $Google_P
Google ..... 8.8.8.8 .........: $Google_S
OpenDNS .... 208.67.222.222 ..: $OpenDNS_P
OpenDNS .... 208.67.220.220 ..: $OpenDNS_S
Level3 ..... 4.2.2.1 .........: $Level3_P
Level3 ..... 4.2.2.2 .........: $Level3_S
Comodo ..... 8.26.56.26 ......: $Comodo_P
Comodo ..... 8.20.247.20 .....: $Comodo_S
DNSWATCH ... 84.200.69.80 ....: $DNSWATCH_P
DNSWATCH ... 84.200.70.40 ....: $DNSWATCH_S
Quad9 ...... 9.9.9.9 .........: $Quad9_P
Quad9 ...... 149.112.112.112 .: $Quad9_S
Cloudflare . 1.1.1.1 .........: $Cloudflare_P
Cloudflare . 1.0.0.1 .........: $Cloudflare_S
Algar ...... 200.225.197.34 ..: $Algar_P
Algar ...... 200.225.197.37 ..: $Algar_S
GigaDNS .... 189.38.95.95 ....: $GIGA_P
GigaDNS .... 189.38.95.96 ....: $GIGA_S
Claro ...... 181.213.132.2 ...: $CLARO_P
Claro ...... 181.213.132.3 ...: $CLARO_S"

dialog --title 'Resultados do Teste Ping:' --msgbox "$TEXTAO01" 0 0
}

function gauge1 {
  clear
  echo  "$1" | dialog --title "Aguarde!" --gauge "$2" 8 40
  sleep 0.5
}

function ping1 {
  ping -c 1 "$1" | awk 'NR==2{print $7,$8}' |  cut -c7-
}

function smartdump {
  # Clear SMART_DUMP File
  rm SMART_DUMP
  touch SMART_DUMP
  
  # Check SMART of block devices /dev/sdX
  for i in a b c d e f g h i j k l m n o p
    do
      sudo skdump /dev/sd$i >> SMART_DUMP
    done

  # Check if there is NVME
  [ -b /dev/nvme0n1 ] && {
    for i in 1 2 3 4 5 6 7 8
      do
        sudo smartctl -a /dev/nvme0n1p$i >> SMART_DUMP
      done
  } || {
    echo "NVME not present."
  }

  # Check if there is MegaRAID
  [ $4 = 1 ] && {
    for i in 0 1 2 3 4 5 6 7 8
      do
        sudo smartctl -d megaraid,$i -a /dev/sg$5 >> SMART_DUMP
      done
    } || {
      echo "MegaRAID not present."
    }
}

function synctunnel {
tunnelmount="/tmp/tunnelmount"
tunneloptions="-o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o ServerAliveCountMax=5"
known_hosts_file="/home/$USER/.ssh/known_hosts"

[ -f  "$tunnelmount" ] && {
  VALUE1=$(sed -n '1p' "$tunnelmount")
  VALUE2=$(sed -n '2p' "$tunnelmount")
  VALUE3=$(sed -n '3p' "$tunnelmount") 
  VALUE4=$(sed -n '4p' "$tunnelmount")
  VALUE5=$(sed -n '5p' "$tunnelmount")  
} || {
  touch "$tunnelmount"

  VALUE1="192.168.0.1"
  VALUE2="root"
  VALUE3="admin"
  VALUE4="22"
  VALUE5="192.168.0.10"
}

VALUE0=$(dialog --ok-label "Conectar" --title "Tunnel SSH" --form "Connecting..." 13 50 0 \
"Firewall: " 1 1 "$VALUE1" 1 10 34 0 \
"UserFW:" 2 1 "$VALUE2" 2 10 34 0 \
"PassFW:" 3 1 "$VALUE3" 3 10 34 0 \
"SrcPrt:" 4 1 "$VALUE4" 4 10 34 0 \
"IP Dst:" 5 1 "$VALUE5" 5 10 34 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

case $? in
   0) echo "." > /dev/null ;;
   1) exit ;;
esac

path1=$(echo "$VALUE0" | sed -n 1p)
user1=$(echo "$VALUE0" | sed -n 2p)
pass1=$(echo "$VALUE0" | sed -n 3p)
prt1=$(echo "$VALUE0" | sed -n 4p)
ipdst1=$(echo "$VALUE0" | sed -n 5p)

[ -z "$path1" ] || [ -z "$user1" ] || [ -z "$pass1" ] || [ -z "$prt1" ] || [ -z "$ipdst1" ] && {
  dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 7 30
  synctunnel
  }

  echo "$path1" > "$tunnelmount"
  echo "$user1" >> "$tunnelmount"
  echo "$pass1" >> "$tunnelmount"
  echo "$prt1" >> "$tunnelmount"
  echo "$ipdst1" >> "$tunnelmount"

  clear
  ssh-keygen -f $known_hosts_file -R "$2"

  echo ""
  echo "Access the service as 'localhost' through port '4321'!"
  echo ""

  sshpass -p "$pass1" ssh $tunneloptions "$user1"@"$path1" -N -L 4321:"$ipdst1":"$prt1"
}

start

exit 1
