#!/bin/bash

# ============================================================================ #

#########################
# Universal Server Menu # ==================================================== #
#########################
                                                            ####################
# ========================================================= # By José Humberto #
                                                            ####################

# ============================================================================ #

# Variáveis Globais
export bktitle="USM: Universal Server Menu v1.8.6 - By José Humberto"
export password=0
export processname=0
export process=0
export status=0
export pkg=0

# Checagem de Dependências
function pkg {
REQUIRED_PKG="$1"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")
echo "Verificando pelo pacote $REQUIRED_PKG:" $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "$REQUIRED_PKG não encontrado. Instalando..."
  sudo apt update; sudo apt install $REQUIRED_PKG -y
fi
}

pkg dialog
pkg curl
pkg lm-sensors
pkg whois
pkg arp-scan
pkg traceroute
pkg libatasmart-bin

###########
# Funções # # ---------------------------------------------------------------- #
###########

# PASSWORD
function init {
password=$(dialog --backtitle "$bktitle" --title 'Acesso ao Server Menu' --insecure --passwordbox 'Digite sua senha de Administrador!' 0 0 2>&1 > /dev/tty)

if [ -z "$password" ]; then
  clear
  echo "É necessário digitar sua senha para continuar. Saindo..."
  echo "Para voltar digite 'menu' "
else
  start
fi
}

# MAIN LOOP
function start {
  while true; do
    sensors0=`sensors || echo "Incompatível em Máquina Virtual!"`
    datetime=`date +"%d/%m %H:%M"` # Data e Hora

    var1=$(dialog --backtitle "$bktitle" --title 'Menu Principal' --menu " "  0 0 8 \
    A 'Status do Sistema' \
    B 'Máquinas Virtuais' \
    C 'Processos do Sistema' \
    D 'Controlador de Dominio' \
    E 'Ferramentas do Sistema' \
    F 'Reiniciar o Sistema' \
    G 'Desligar o Sistema' \
    X 'SAIR' \
    0 'Acesso Restrito' 2>&1 > /dev/tty )
    
    [ $? -ne 0 ] && echo "Saindo... Para voltar digite 'menu'!" && break
    case "$var1" in

    A) menu01 ;;
    B) menu02 ;;
    C) menu03 ;;
    D) menu04 ;;
    E) menu05 ;;
    F) menu06 ;;
    G) menu07 ;;
    X) echo "Saindo... Para voltar digite 'menu'!" && exit && break ;;
    0) m0x ;;
    esac
  done
}

##########
# STATUS # #------------------------------------------------------------------ #
##########

function menu01
  {  var2=$(dialog --title 'Status' --backtitle "S T A T U S" --menu " " 0 0 0 \
  A 'Sistema' \
  B 'Temperatura' \
  C 'Armazenamento' \
  D 'S.M.A.R.T.' \
  X 'Voltar' 2>&1 > /dev/tty )

#  case $? in
#    2) dialog --title 'Ajuda' --msgbox " " 0 0 ; menu01 ;;
#  esac

  case "$var2" in

  A) menu11 ;;
  B) menu12 ;;
  C) menu13 ;;
  D) menu14 ;;
  X) echo a ;;
  esac
}

# Status de Sistema
function menu11 {
  ip=`hostname -I | awk '{print $1}'` # Coleta do IP atual!
  ip2=`dig @resolver4.opendns.com myip.opendns.com +short` # IP Externo
  uptime=`uptime | awk {'print $3 $4 $5'}`
  datetime=`date +"%d/%m %H:%M"` # Data e Hora
  governor=`cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor`
  bbalance=`ps aux | grep "btrfs balance start" | grep -v grep 1> /dev/null && echo "Executando" || echo "Parado"`
  rrsnap=`ps aux | grep "rsnapshot" | grep -v grep 1> /dev/null && echo "Executando" || echo "Parado"`
  rsync1=`ps aux | grep "rsync" | grep -v grep 1> /dev/null && echo "Executando" || echo "Parado"`
  xorg=`ls /tmp/.X11-unix | wc -l`

  dialog --cr-wrap --help-button --help-label 'Ajuda' --title "Informações encontradas" --backtitle "Informações do Sistema" --msgbox "
  Nome da Máquina: $HOSTNAME \n
  Data e Hora Local: $datetime \n \n
  IP Local  : $ip \n
  IP Externo: $ip2 \n \n
  UpTime: $uptime \n
  XOrgs em Execução: $xorg \n \n
  Balance BTRFS: $bbalance \n
  RSnapshot: $rrsnap \n
  RSync: $rsync1 \n \n
  Governador de CPU: $governor \n
  " 0 0

  case $? in
    2) dialog --title 'Ajuda com Significados de Status' --msgbox "IP Local: Geralmente é o IP Fixado localmente ou no servidor DHCP. \n
IP Externo: Se houver acesso externo, monitora qual o IP Externo coletado naquele momento. \n \n
Uptime: Mostra a quantos dias, horas e/ou minutos o servidor está ligado. \n \n
Governador de CPU: Mostra como está a execução do processador, se em Máximo Desempenho, Economia de Energia ou outro. \n
XOrgs em Execução: Para sistemas sem interface de usuário mas que permitem executar aplicações Xinit. \n \n
Balance BTRFS: Manutenção de rotina do sistema. Se estiver em Execução, o computador NÃO poderá ser desligado! \n
Rsnapshot: Backup incremental automatizado. Se estiver Executando, o computador não poderá ser desligado! \n
RSync: Sincronia do Backup em Nuvem ou para um backup RAID 1. Se estiver Executando, o computador não poderá ser desligado!
" 0 0 ; menu11 ;;
  esac
menu01
}

# Processos de Sistema
function menu03 {

  menu09 smbd && smb1=$prcs
  menu09 samba-ad-dc && smb2=$prcs
  menu09 apache2 && apache=$prcs
  menu09 lighttpd && lighttp=$prcs
  menu09 pihole-FTL && pihole=$prcs
  menu09 drbd && drbd1=$prcs
  menu09 corosync && corosync1=$prcs
  menu09 pacemaker && pacemaker1=$prcs
  menu09 openfire && spark=$prcs
  menu09 mysqld && mysql=$prcs
  menu09 cups1 cups && cups1=$prcs
  menu09 motion && motion1=$prcs
  menu09 dwagent && dwagent1=$prcs

  vpn=`ip a | grep tun 1> /dev/null && echo "Executando" || echo "Parado ou Ausente"`

  menuxx=$(dialog --ok-label 'Ajustar' --help-button --help-label 'Ajuda' --backtitle "Processos Ativos, Parados ou Ausentes" --title 'Processos de Sistema' --menu " "  0 0 0 \
  A "Samba      : $smb1"  \
  B "Dominio    : $smb2" \
  C "Apache2    : $apache" \
  D "Lighttpd   : $lighttp" \
  E "PiHole     : $pihole" \
  F "DRBD       : $drbd1" \
  G "Corosync   : $corosync1" \
  H "Pacemaker  : $pacemaker1" \
  I "Spark      : $spark" \
  J "MySQL      : $mysql" \
  K "CUPS       : $cups1" \
  L "Motion     : $motion1" \
  M "DWAgent    : $dwagent1" \
  N "VPN Client : $vpn" \
  X "Voltar" 2>&1 > /dev/tty )

  case $? in
    2) dialog --title 'Ajuda com Significados de Status' --msgbox "A lista abaixo não necessariamente informa todos os processos configurados! \n
Esteja atento ao que está instalado no sistema. Mesmo aqueles não instalados aparecerão apenas como 'Parado'. \n \n
Samba: Se esse servidor compartilha (via smb) arquivos na rede. \n
Dominio: Se há um Dominio ativo neste servidor, o Samba (smb) é substituido pelo processo samba-ad-dc. \n \n
Apache2: Usado se houver um Nextcloud neste servidor. \n
Lighttpd: Processo usado pelo PiHole se estiver instalado neste servidor. \n
PiHole: Processo próprio do PiHole se estiver instalado neste servidor. \n \n
DRBD: Essencial se este é um servidor Cluster. \n
Corosync: Essencial se este é um servidor Cluster. \n
Pacemaker: Essencial se este é um servidor Cluster. \n \n
Spark: Monitor do servidor de banco de dados se houver OpenFire neste servidor. \n
MySQL: Monitor do servidor de banco de dados se houver MySQL neste servidor. \n \n
CUPS: Servidor de impressão em Rede através dos protocolos HTTP ou SMB. \n
Motion: Processo usado pelo Motion, para monitorar WebCams ou ainda sistemas de CFTV. \n
DWAgent: Se houver um Acesso Remoto com DWService executando nesta máquina. \n
VPN Client: Se este Servidor está conectado em uma VPN atuando como cliente. \n
" 0 0 ; menu03 ;;
esac

  case "$menuxx" in
  A) status="$smb1"; processname="Samba"; process="smbd"; menu031 ;;
  B) status="$smb2"; processname="Dominio"; process="samba-ad-dc"; menu031 ;;
  C) status="$apache"; processname="Apache2"; process="apache2"; menu031 ;;
  D) status="$lighttp"; processname="Lighttp"; process="lighttp"; menu031 ;;
  E) status="$pihole"; processname="PiHole"; process="pihole-FTL"; menu031 ;;
  F) echo a ;; #status="$drbd1"; processname="DRBD"; process="drbd"; menu031 ;;
  G) echo b ;; #status="$corosync1"; processname="Corosync"; process="corosync"; menu031 ;;
  H) echo c ;; #status="$pacemaker1"; processname="Pacemaker"; process="pacemaker"; menu031 ;;
  I) status="$spark"; processname="Spark"; process="openfire"; menu031 ;;
  J) status="$mysql"; processname="MySQL"; process="mysql"; menu031 ;;
  K) status="$cups1"; processname="CUPS"; process="cups"; menu031 ;;
  L) status="$motion1"; processname="Motion"; process="motion"; menu031 ;;
  M) status="$dwagent1"; processname="DWAgent"; process="dwagent"; menu031 ;;
  N) status="$vpn"; processname="VPN Client"; process="openvpn"; menu031 ;;
  X) echo a ;;
  esac
}

function menu031 {
if [ "$status" = "Executando" ]; then # se Executando...
  dialog --title "$processname" --yesno "Deseja reiniciar o processo $processname ?" 6 40
  if [ $? = 0 ]; then
    echo "$password" | sudo -S systemctl restart "$process"
    dialog --title "$processname" --msgbox "O processo $processname foi reiniciado!" 6 40
    menu03
  else
    dialog --title "$processname" --yesno "Deseja parar o processo $processname ?" 6 40
    if [ $? = 0 ]; then
    echo "$password" | sudo -S systemctl stop "$process"
    dialog --title "$processname" --msgbox "O processo $processname foi parado!" 6 40
    menu03
    fi
  fi
  menu03
else # se Parado
  dialog --title "$processname" --yesno "Deseja tentar iniciar o processo $processname ?" 6 40
  if [ $? = 0 ]; then
    echo "$password" | sudo -S systemctl start "$process"
    dialog --title "$processname" --msgbox "Verifique se o $processname iniciou." 6 40
    menu03
  fi
  menu03
fi
}

# Status de Processos
function menu09 {
prcs=`echo "$password" | sudo -S systemctl is-active --quiet $1 && echo "Executando" || echo "Parado ou Ausente"`
}

# ------------------------------------------------------------------------------------- #

# Status Temperatura
function menu12 {
dialog --cr-wrap --help-button --help-label 'Ajuda' --backtitle 'Temperatura, Potencia e Rotação de Cooler(s) [Se disponível!]' --msgbox "$sensors0" 0 0

  case $? in
    2) dialog --title 'Ajuda com Significados de Status' --msgbox "A temperatura costuma ter valores atuais, mínimos (low) e máximos (high). \n
Além disso, há também a temperatura Crítica (Crit.): Se o sistema atingir ela, \n
vai desligar instantaneamente por segurança. \n \n
Resultados que indicam temperaturas de CPU: \n
(edge) (cpu_thermal-xxx) (asus-isa-xxxx) (Core X) (coretemp-isa-xxxx) \n
Resultados que indicam temperaturas de GPU: \n
(amdgpu-pci-xxxx) (ISA Adapter) \n
Resultados que indicam temperaturas de Chipset: \n
(k10temp-pci-xxxx) (acpitz-acpi-xxxx) \n
Resultados que indicam rotação de cooler: \n
(cpu_cooler) (fan1) (RPM) \n
Resultados que indicam Baterias: \n
(BAT0-acpi-xxx) (fam15h_power-pci-xxxx) \n \n
Em Progresso: Novas indicações são adicionadas periodicamente!
" 0 0 ; menu12 ;;
  esac
menu01
}

# ---------------------------------------------------------------------------- #

# Status de Consumo dos Discos
function menu13 {
  sdisks=`df -Th`
  dialog --cr-wrap --help-button --help-label 'Ajuda' --title "Discos encontrados" --backtitle "Status do Armazenamento" --msgbox "$sdisks" 0 0

  case $? in
    2) dialog --title 'Ajuda' --msgbox "Os resultados são de discos acessíveis no sistema. 
Se um não aparecer aqui, significa que está em estado de erro ou foi ejetado. \n \n
As opções são: \n
[Sist. Arq.] [Tipo] [Tam.] [Usado] [Disp.] [Uso%] [Montado em] \n \n
Aonde: \n \n
Sist. Arq.: Os mais importantes são começados com //IP e /dev. \n
Tipo: Podem ser EXT4, BTRFS, NTFS, FAT32, etc. \n
Tam.: Tamanho total do armazenamento. \n
Usado: Espaço que já foi utilizado. \n
Disp.: Espaço restante. \n
Uso%: Porcentagem de uso do disco comparado ao tamanho total. \n
Montado em: Local aonde o disco está acessível naquele momento. \n
\n" 0 0; menu13 ;;
  esac
menu01
}

# ---------------------------------------------------------------------------- #

# LibATASmart-bin!
function menu14 {

  menu140 "sda" && dump1=$skd && dumpst1=$stssd
  menu140 "sdb" && dump2=$skd && dumpst2=$stssd
  menu140 "sdc" && dump3=$skd && dumpst3=$stssd
  menu140 "sdd" && dump4=$skd && dumpst4=$stssd
  menu140 "sde" && dump5=$skd && dumpst5=$stssd
  menu140 "sdf" && dump6=$skd && dumpst6=$stssd
  menu140 "sdg" && dump7=$skd && dumpst7=$stssd
  menu140 "sdh" && dump8=$skd && dumpst8=$stssd
  menu140 "sdi" && dump9=$skd && dumpst9=$stssd

  menusk=$(dialog --help-button --help-label 'Ajuda' --backtitle "Análise de Atributos SMART!" --title "S.M.A.R.T." --menu ""  0 0 0 \
  "/dev/sda" "$dumpst1" \
  "/dev/sdb" "$dumpst2" \
  "/dev/sdc" "$dumpst3" \
  "/dev/sdd" "$dumpst4" \
  "/dev/sde" "$dumpst5" \
  "/dev/sdf" "$dumpst6" \
  "/dev/sdg" "$dumpst7" \
  "/dev/sdh" "$dumpst8" \
  "/dev/sdi" "$dumpst9" \
  Voltar "" 2>&1 > /dev/tty )

  case $? in
    2) dialog --title "Definições de SMART!" --msgbox "$TEXTO" 0 0 ; menu14 ;;
  esac

  case "$menusk" in
  "/dev/sda") menu141 "sda" "$dump1" ; menu14 ;;
  "/dev/sdb") menu141 "sdb" "$dump2" ; menu14 ;;
  "/dev/sdc") menu141 "sdc" "$dump3" ; menu14 ;;
  "/dev/sdd") menu141 "sdd" "$dump4" ; menu14 ;;
  "/dev/sde") menu141 "sde" "$dump5" ; menu14 ;;
  "/dev/sdf") menu141 "sdf" "$dump6" ; menu14 ;;
  "/dev/sdg") menu141 "sdg" "$dump7" ; menu14 ;;
  "/dev/sdh") menu141 "sdh" "$dump8" ; menu14 ;;
  "/dev/sdi") menu141 "sdi" "$dump9" ; menu14 ;;
  Voltar) echo a ;;
  esac
}

function menu140 {
  stssd=`ls /dev/$1 1> /dev/null 2> /dev/null && echo "Presente" || echo "Ausente"`
  if [ "$stssd" = "Presente" ]; then
    skd=`echo "$password" | sudo -S skdump /dev/$1 | grep -A40 -P 'ID#' | awk '{print $1,$2,$6}'`
  else
    skd=`echo "Disco ausente!"`
  fi
}

function menu141 {
  dialog --cr-wrap --backtitle /dev/$1 --msgbox "$2" 0 0; menu14
}

TEXTO="As informações S.M.A.R.T. de um HDD ou SSD são variadas mas só \n
algumas partes realmente interessam. Nem todos os HDDs e SSDs exibem todas  \n
essas informações, isso depende do fabricante. As mais importantes são: \n \n
01 (0x01) Read Error Rate: Taxa de erro geral durante as leituras do disco. \n
Ao lado do atributo 07 (0x07), se estiver muito alto, causará muita lentidão. \n \n
05 (0x05) Reallocated Sectors Count: Conhecidos também como BadBlocks, indicam falhas de gravação no disco. \n
A longo prazo isso pode resultar em perda do disco dentro de alguns meses. \n \n
07 (0x07) Seek Error Rate: Erro das cabeças magnéticas; podem surgir \n
por danos ao braço de leitura ou alargamento térmico do disco rígido. \n
Normalmente não é preocupante mas ao lado do atributo 01 (0x01) pode causar lentidão. \n \n
10 (0x0A) Spin Retry Count: Quantidade de vezes que o HDD tentou inicializar após uma falha interna. \n
A médio prazo isso significa falhas graves das cabeças de leitura e o disco poderá parar em alguns meses. \n \n
184 (0xB8) End-to-End error (ou IOEDC): Indica erros nos dados que transitam do disco ou SSD para a memória RAM. \n
Imediatamente causa muito lentidão de acesso aos dados; com valores altos desse atributo, há perdas de dados. \n \n
195 (0xC3) Hardware ECC Recovered: Sozinho não quer dizer muita coisa; porém somado ao resultado do atributo 187 (0xBB) \n
abaixo, significa que o disco está perdendo dados mas ainda está se recuperando. Lentidão extrema é prevista. \n \n
187 (0xBB) Reported Uncorrectable Errors: Erros incorrigíveis que foram reportados durante o processamento do, \n
Hardware ECC do próprio HDD. Valores altos significam disco extremamente lento. \n \n
188 (0xBC) Command Timeout: Quantidade de vezes que o HDD ou SSD desistiu de fazer uma leitura. \n
Um valor alto indica falha geral da placa lógica do disco. \n \n
196 (0xC4) Reallocation Event Count: Quantidade de vezes que o disco copiou dados de um setor ruim para um bom, \n
se auto-recuperando. Os valores podem ser altos sem perdas de dados, mas a lentidão será notável. \n \n
197 (0xC5) Current Pending Sector Count: Setores que aguardam ser remapeados. Altos valores do atributo 187 (0xBB) ou \n
mesmo do atributo 05 (0x05) indicam que o HDD está com setores defeituosos e está com dificuldades de lidar. Lentidão. \n \n
198 (0xC6) (Offline) Uncorrectable Sector Count: Costuma indicar erros na superfície dos discos ou ainda uma falha \n
mecânica geral da cabeça de leitura dos discos, ou ainda de multiplexadoras de SSDs. \n \n
201 (0xC9) Soft Read Error Rate (ou TA Counter Detected): Quantidade de erros causados por software. \n
Valores altos indicam a presença de bad sectors (diferente de bad blocks), que podem ser corrigidos com \n
ferramentas de análise, como o HD Regenerator. \n \n
As informações acima são referências para análises da saúde dos discos. Atenção ao interpretar os resultados!"

# ---------------------------------------------------------------------------- #

# Ferramentas do Sistema
function menu05 {
  var6=$(dialog --help-button --help-label 'Ajuda' --title 'Ferramentas' --backtitle "F E R R A M E N T A S" --menu " " 0 0 0 \
  A 'Velocimetro Internet' \
  B 'Arp-Scan' \
  C 'WhoIs' \
  D 'TraceRoute' \
  E 'Governador de CPU' \
  X 'Voltar' 2>&1 > /dev/tty )

  case $? in
    2) dialog --title 'Ajuda' --msgbox "Painel de Ferramentas do Sistema! \n \n
Velocimetro Internet: Calcula as velocidades de Download e Upload de uma \n
conexão á internet existente. \n \n
Arp-Scan: Exibe a tabela ARP da rede, mostrando endereços MAC, IP's e nomes \n
dos computadores descobertos. \n \n
WhoIs: É utilizado para identificar o proprietário de site ou domínio caso \n
este não tenha ocultado seus dados. \n \n
TraceRoute: Calcula quantos Hops, saltos, a latência que uma conexão deste \n
servidor tem até um site especificado. \n \n
Governador de CPU: Ver o menu AJUDA dentro desta opção!
" 0 0 ; menu05 ;;
  esac

  case "$var6" in

  A) dialog --title 'SpeedTest' --backtitle "Velocimetro Internet!" --msgbox "Após o resultado do teste, pressione 'q' para sair!" 0 0; curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 - | less ; menu05 ;;
  B) dialog --title 'Arp-Scan' --backtitle "Listagem de Tabela ARP da Rede LAN" --msgbox "Para ler os IPs use as Setas Cima/Baixo, para fechar pressione 'q'!" 0 0; echo "$password" | sudo -S arp-scan -l | less ; menu05 ;;
  C) menu051 ;;
  D) menu052 ;;
  E) menu053 ;;
  X) echo a ;;
  esac
}

#WhoIS
function menu051 {
  site=$(dialog --title 'WhoIs' --backtitle "Identificar de Propriedade de um WebSite" --inputbox "Digite o site que deseja localizar informações. Use o seguinte modelo: exemplo.com.br" 10 40 2>&1 > /dev/tty)
  dialog --msgbox "Para ler o resultado use as Setas para Cima e Baixo. \n
Para fechar aperte 'q'!" 0 0
  whois "$site" | less ; menu05
}

# Traceroute
function menu052 {
  site=$(dialog --title 'TraceRoute' --backtitle "Identificador de hops/saltos que um computador dá, até acessar um site especificado." --inputbox "Digite o site que deseja analisar os Saltos. Use o seguinte modelo: \n
exemplo.com.br \n
A identificação estará concluída quando um (END) surgir no final." 14 40 2>&1 > /dev/tty)
  dialog --msgbox "Para ler o resultado use as Setas para Cima e Baixo. \n
Para fechar aperte 'q'!" 0 0
  traceroute "$site" | less; menu05
}

# Governador de CPU
function menu053 {
  governor1=`cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor`
  governor2=`cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_available_governors`
  var3=$(dialog --help-button --help-label 'Ajuda' --title 'Governador de CPU' --backtitle "Troca do Governador de CPU" --menu "Governador de CPU Atual: \n
$governor1" 0 0 0 \
  A 'Conservative' \
  B 'OnDemand' \
  C 'UserSpace' \
  D 'PowerSave' \
  E 'Performance' \
  F 'Schedutil' \
  X 'Voltar' 2>&1 > /dev/tty )

  case $? in
    2) dialog --title 'Ajuda' --msgbox "Governadores de CPU são formas como a CPU trabalha para otimizar a performance, \n
economizar bateria, etc. Num urgência podem ser usados pra esfriar um processador ou melhorar o desempenho geral. \n
Cada governador possui uma aplicabilidade, dependendo do momento, da necessidade e muitas vezes o padrão em execução \n
será o ideal para aquele hardware. Os governadores mais comuns com as referidas explicações são: \n \n
Conservative: Faz a CPU manter sua frequência no nível mais baixo, porém aumenta a frequência de forma gradual \n
conforme o necessário. \n
OnDemand: Faz a CPU manter sua frequência no nível mais baixo e aumenta a frequência para o máximo \n
conforme a necessidade. \n
UserSpace: Permite que as aplicações da UserSpace controlem a escala de processamento. Situação Atípica. \n
PowerSave: Ele mantém o clock mais baixo, não importando o que estiver sendo utilizado. \n
É o modo de pior desempenho, ideal para economizar baterias e também pode ser usado para esfriar a CPU, \n
caso o servidor esteja superaquecendo devido a uma carga de trabalho excepcional. \n
Performance: Faz a CPU manter sua frequência no nível mais alto, mantendo o clock alto mesmo se o \n
computador não estiver em uso. É o modo de melhor desempenho sem Overclock! \n
Schedutil: Passa a escala de processamento para o Agendador de Tarefas e as prioridades são definidas de \n
acordo com a aplicação. Este é o modo que trás o melhor custo-benefício de desempenho e baixo clock. \n \n
Um governador aplicado passa a operar imediatamente! \n \n
Detectamos estes governadores abaixo como suportados: \n \n
> $governor2 <
" 0 0 ; menu053 ;;
  esac

  case "$var3" in

  A) menu10 conservative ;;
  B) menu10 ondemand ;;
  C) menu10 userspace ;;
  D) menu10 powersave ;;
  E) menu10 performance ;;
  F) menu10 schedutil ;;
  X) echo a ; menu05 ;;
  esac
}

# Governador de CPU 2
function menu10 {
  governor2=`cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_available_governors`
  govr=$(echo "$password" | sudo -S echo $1 | sudo -S tee /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor 2> /dev/null 1> /dev/null && echo "si" || echo "no")
  if [ "$govr" = "si" ]; then
    dialog --cr-wrap --title "Bem sucedido!" --backtitle "Troca de Governador" --msgbox "Governador trocado com sucesso!" 0 0 ; menu053
  else
    dialog --cr-wrap --title "ERRO" --backtitle "Troca de Governador" --msgbox "Seu sistema não suporta o governador escolhido. Detectamos estes governadores abaixo como suportados: \n \n
> $governor2 < \n \n
Mais informações em AJUDA! " 0 0 ; menu053
  fi
}

# ---------------------------------------------------------------------------- #

# Máquinas Virtuais 2.0

function menu02 {
if [[ $(which virt-manager 2>/dev/null) ]]; then
  menu022 "1p" && vm1=$vms && vm11=$sts
  menu022 "2p" && vm2=$vms && vm12=$sts
  menu022 "3p" && vm3=$vms && vm13=$sts
  menu022 "4p" && vm4=$vms && vm14=$sts
  menu022 "5p" && vm5=$vms && vm15=$sts
  menu022 "6p" && vm6=$vms && vm16=$sts
  menu022 "7p" && vm7=$vms && vm17=$sts
  menu022 "8p" && vm8=$vms && vm18=$sts
  menu022 "9p" && vm9=$vms && vm19=$sts
  menu022 "10p" && vm10=$vms && vm110=$sts

  menuxy=$(dialog --ok-label 'Ajustar' --help-button --help-label 'Ajuda' --backtitle "Virt-Manager detectado. Bem-Vindo ao Gestor de Máquinas Virtuais!" --title "Gestão de VMs" --menu "Gestão de Máquinas Virtuais"  0 0 0 \
  Status "Geral" \
  "$vm1" "$vm11" \
  "$vm2" "$vm12" \
  "$vm3" "$vm13" \
  "$vm4" "$vm14" \
  "$vm5" "$vm15" \
  "$vm6" "$vm16" \
  "$vm7" "$vm17" \
  "$vm8" "$vm18" \
  "$vm9" "$vm19" \
  "$vm10" "$vm110" \
  Iniciar "Todas!" \
  Parar "Todas!" \
  Voltar "" 2>&1 > /dev/tty )

  case $? in
    2) dialog --title " " --msgbox "Aqui são exibidas apenas as VMs em estado de Executando ou Parado. \n
Caso uma VM não apareça na listagem, verifique o real estado da mesma no menu Status Geral! \n \n
Status Geral: Exibe a situação real de todas as VMs configuradas no sistema. \n
Nome da VM + Estado: Permite controlar a VM: reiniciando, desligando ou ligando a mesma. \n \n
Ligar Todas as VMs: Inicializará apenas as VMs em estado de -Shut Off- detectadas. \n
Serão ignoradas todas as demais VMs em quaisquer outros estados. \n \n
Desligar Todas as VMs: Desligará apenas as VMs em estado de -running- detectadas. \n
Serão ignoradas todas as demais VMs em quaisquer outros estados. \n
Para maiores informações ver AJUDA em Status Geral. \n \n" 0 0 ; menu02 ;;
  esac

  case "$menuxy" in
  Status) menu025 ;;
  "$vm1") chkvm="$vm11"; nmvm="$vm1"; menu021 ;;
  "$vm2") chkvm="$vm12"; nmvm="$vm2"; menu021 ;;
  "$vm3") chkvm="$vm13"; nmvm="$vm3"; menu021 ;;
  "$vm4") chkvm="$vm14"; nmvm="$vm4"; menu021 ;;
  "$vm5") chkvm="$vm15"; nmvm="$vm5"; menu021 ;;
  "$vm6") chkvm="$vm16"; nmvm="$vm6"; menu021 ;;
  "$vm7") chkvm="$vm17"; nmvm="$vm7"; menu021 ;;
  "$vm8") chkvm="$vm18"; nmvm="$vm8"; menu021 ;;
  "$vm9") chkvm="$vm19"; nmvm="$vm9"; menu021 ;;
  "$vm10") chkvm="$vm110"; nmvm="$vm10"; menu021 ;;
  Iniciar) menu023 ;;
  Parar) menu024 ;;
  Voltar) echo a ;;
  esac
else
  dialog --cr-wrap --title 'ERRO DETECTADO' --backtitle 'FERRAMENTAS DE MÁQUINA VIRTUAL' --msgbox "O VirtManager não foi encontrado neste sistema ou você não possui as permissões para acessá-lo!" 7 50
fi
}

function menu021 {

if [ "$chkvm" = "Executando" ]; then # se Executando...
  dialog --title "$nmvm" --yesno "Deseja reiniciar a VM $nmvm ?" 6 40
  if [ $? = 0 ]; then
    virsh reboot "$nmvm"
    dialog --title "$nmvm" --msgbox "A VM $nmvm foi reiniciada!" 6 40
    menu02
  fi
  
  dialog --title "$nmvm" --yesno "Deseja desligar a VM $nmvm ?" 6 40
  if [ $? = 0 ]; then
    virsh shutdown "$nmvm"
    dialog --title "$nmvm" --msgbox "A VM $nmvm foi desligada!" 6 40
    menu02
  fi
  
  dialog --title "$nmvm" --yesno "Deseja desligar FORÇADAMENTE a VM $nmvm ?" 6 40
  if [ $? = 0 ]; then
    virsh destroy "$nmvm"
    dialog --title "$nmvm" --msgbox "A VM $nmvm foi desligada de forma forçada!" 6 40
    menu02
  fi
  
else # se Parado
  if [ "$chkvm" = "- - -" ]; then
    dialog --title "$nmvm" --msgbox "A VM $nmvm não existe!" 6 40
    menu02
  fi
  
  if [ "$chkvm" = "Parado" ]; then
    dialog --title "$nmvm" --yesno "Deseja tentar ligar a VM $nmvm ?" 6 40
    if [ $? = 0 ]; then
      virsh start "$nmvm"
      dialog --title "$nmvm" --msgbox "Verifique se a VM $nmvm iniciou!" 6 40
      menu02
    fi
    menu02
  fi
fi
}

# Status das VMs
function menu022 {
vms=`virsh list | grep running | sed -n "$1" | awk '{print $2}'`
if [ "$vms" = "" ]; then
  vms=`virsh list --all | grep "shut off" | sed -n "$1" | awk '{print $2}'`
  sts=`echo "Parado"`
  if [ "$vms" = "" ]; then
    vms=`echo "- - -"`
    sts=`echo "- - -"`
  fi
else
  sts=`echo "Executando"`
fi
}

function menu023 {
dialog --title 'Confirmação' --backtitle 'Confirmação de Início de Todas as VMs!' --yesno "Deseja inicializar todas as VMs?" 0 0
if [ $? = 0 ]; then
  for i in $(virsh list --all | grep "shut off" | awk '{print $2}')
  do
  virsh start $i
  dialog --title 'Status:' --msgbox "VM $i Iniciada!" 0 0
  done
  menu02
fi
menu02
}

function menu024 {
dialog --title 'Confirmação' --backtitle 'Confirmação de Desligamento de Todas as VMs!' --yesno "Deseja desligar todas as VMs?" 0 0
  if [ $? = 0 ]; then
  for i in $(virsh list | grep running | awk '{print $2}')
  do
  virsh shutdown $i
  dialog --title 'Status:' --msgbox "VM $1 desligada!" 0 0
  done
  menu02
  fi
menu02
}

# Status de Máquinas Virtuais
function menu025 {
  virtmgr0=`virsh list --all`
  dialog --cr-wrap --help-button --help-label 'Ajuda' --title "Maquinas Virtuais encontradas:" --backtitle "Status do VirtManager" --msgbox "$virtmgr0" 0 0

  case $? in
    2) dialog --title 'Ajuda' --msgbox "Name: Nome da máquina virtual [VM] conforme ela foi registrada no virt-manager \n \n
State é a situação em que a VM se encontra. Os States podem ser:\n \n
running*: VM executando normalmente. \n
paused*: VM em estado deliberado de pausa. \n
idle*: VM em estado de pausa, normalmente por alta carga de I/O e aguardando o \n
sistema host voltar a responder. \n
pmsuspended*: VM suspendida com PowerState S3. \n
in shutdown*: VM em processo de desligamento. \n \n
shut off: VM desligada normalmente. \n
crashed: Significa que a VM travou e parou de responder abruptamente por algum erro grave, \n
seja do próprio sistema virtualizado ou erro de disco do host. \n \n
* = Em qualquer um destes estados a VM pode corromper se for desligada abruptamente!" 0 0 ; menu025 ;;
  esac
  menu02
}

# ---------------------------------------------------------------------------- #

# Reinicio
function menu06 {
  bbalance=`ps aux | grep "btrfs balance start" | grep -v grep 1> /dev/null && echo "Executando" || echo "Parado"`
  rrsnap=`ps aux | grep "rsnapshot" | grep -v grep 1> /dev/null && echo "Executando" || echo "Parado"`
  rsync1=`ps aux | grep "rsync" | grep -v grep 1> /dev/null && echo "Executando" || echo "Parado"`
  if [ "$bbalance" = "Executando" ] || [ "$rrsnap" = "Executando" ] || [ "$rsync1" = "Executando" ]; then
    dialog --cr-wrap --title 'ERRO AO REINICIAR' --backtitle 'ERRO AO TENTAR REINICIAR.' --msgbox "Reinício bloqueado! \n
Favor verificar o Status do Sistema ou tente novamente mais tarde." 0 0
  else
    dialog --title 'Reiniciar' --backtitle 'R E I N I C I A R' --yesno 'Deseja reiniciar este sistema?' 0 0
    if [ $? = 0 ]; then
      echo "$password" | sudo -S reboot
    fi
  fi
}

# Desligamento
function menu07 {
  rrsnap=`ps aux | grep "rsnapshot" | grep -v grep 1> /dev/null && echo "Executando" || echo "Parado"`
  rsync1=`ps aux | grep "rsync" | grep -v grep 1> /dev/null && echo "Executando" || echo "Parado"`
  bbalance=`ps aux | grep "btrfs balance start" | grep -v grep 1> /dev/null && echo "Executando" || echo "Parado"`
  if [ "$bbalance" = "Executando" ] || [ "$rrsnap" = "Executando" ] || [ "$rsync1" = "Executando" ]; then
    dialog --cr-wrap --title 'ERRO AO DESLIGAR' --backtitle 'ERRO AO TENTAR DESLIGAR.' --msgbox "Desligamento bloqueado! \n
Favor verificar o Status do Sistema ou tente novamente mais tarde." 0 0
  else
    dialog --title 'Desligar' --backtitle 'D E S L I G A R' --yesno 'Deseja desligar este sistema?' 0 0
    if [ $? = 0 ]; then
      echo "$password" | sudo -S shutdown -h now
    fi
  fi
}

# ---------------------------------------------------------------------------- #

# Controlador de Dominio
function menu04 {
  menu09 samba-ad-dc && smb2=$prcs

  if [ "$smb2" = "Executando" ]; then
    var4=$(dialog --title 'Bem-Vindo!' --backtitle "Active Directory & Domain Controller" --menu " " 0 0 0 \
    A 'Criar um Usuário' \
    B 'Exibir todos os Usuários' \
    C 'Procurar Usuário' \
    D 'Exibir Grupos de um Usuario' \
    E 'Adicionar um Usuário a um Grupo' \
    F 'Remover Usuário de um Grupo' \
    G 'Bloquear um Usuário' \
    H 'Desbloquear um Usuário' \
    I 'Alterar a Senha de um Usuário' \
    J 'Alterar Politica de um Usuário' \
    K 'Excluir um Usuário' \
    L 'Criar um Grupo' \
    M 'Exibir todos os Grupos' \
    N 'Procurar Grupo' \
    O 'Exibir Usuários de um Grupo' \
    P 'Excluir um Grupo' \
    Q 'Exibir todos os Computadores' \
    X 'Voltar' 2>&1 > /dev/tty )

    case "$var4" in
    A) menuD ;;
    B) menuA ;;
    C) echo a ;;
    D) menuO ;;
    E) menuJ ;;
    F) menuL ;;
    G) menuF ;;
    H) menuG ;;
    I) menuE ;;
    J) menuN ;;
    K) menuH ;;
    L) menuI ;;
    M) menuC ;;
    N) echo a ;;
    O) menuK ;;
    P) menuM ;;
    Q) menuB ;;
    X) start ;;
    esac
  else
   dialog --cr-wrap --title 'ERRO DETECTADO' --backtitle 'FERRAMENTAS DO ACTIVE DIRECTORY' --msgbox "O Controlador de Domínio não foi encontrado neste sistema ou você não tem as permissões adequadas para acessar as ferramentas!" 7 50
  fi
}

function menuA {
  dialog --title 'AD-DC' --backtitle "Listagem de Todos os Usuários Cadastrados." --msgbox "Para ver os nomes use as setas para Cima e Baixo. Para fechar pressione 'q'!" 0 0; echo "$password" | sudo -S samba-tool user list | less; menu04
}

function menuB {
  dialog --title 'AD-DC' --backtitle "Listagem de Todos os Computadores Cadastrados." --msgbox "Para ver os computadores use as setas para Cima e Baixo. Para fechar pressione 'q'!" 0 0; echo "$password" | sudo -S samba-tool computer list | less; menu04
}

function menuC {
  dialog --title 'AD-DC' --backtitle "Listagem de Todos os Grupos criados." --msgbox "Para ver os grupos use as setas para Cima e Baixo. Para fechar pressione 'q'!" 0 0; echo "$password" | sudo -S samba-tool group list | less; menu04
}

function menuD {
VALUE1="joao_naves"
VALUE2="João Naves"
VALUE3="1234567Ab"

VALUE0=$(dialog --ok-label "Criar"  --backtitle "Criar um novo usuário do Domínio em $HOSTNAME" --title "Adicionar Usuário" --form "Preencha todos os campos! Apague os modelos. \n
Navegue com as setas para cima e baixo." 15 50 0 \
"Usuário: " 1 1 "$VALUE1" 1 10 34 0 \
"Exibição:" 2 1 "$VALUE2" 2 10 34 0 \
"Senha:" 3 1 "$VALUE3" 3 10 34 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

if [ $? -ne 0 ]; then
  menu04
fi

validusr1=$(echo "$VALUE0" | sed -n 1p)
validsur1=$(echo "$VALUE0" | sed -n 2p)
validpss1=$(echo "$VALUE0" | sed -n 3p)

if [ -z "$validpss1" ] || [ -z "$validusr1" ] || [ -z "$validsur1" ]; then
  dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 6 20
  menuD
fi

dialog --title 'Politica de Senha' --backtitle 'Configuração de Senha' --yesno "$validusr1 deve trocar a senha ao logar? \n
Esta opção só pode ser definida agora. Se escolher Não, deverá usar o RSAT caso mude de ideia." 0 0

if [ $? = 0 ]; then
  echo "$password" | sudo -S sudo samba-tool user create "$validusr1" "$validpss1" --surname="$validsur1" --must-change-at-next-login
else
  echo "$password" | sudo -S sudo samba-tool user create "$validusr1" "$validpss1" --surname="$validsur1"
fi

dialog --title 'Politica de Senha' --backtitle 'Configuração de Senha' --yesno "A senha de $validusr não deve expirar mais?" 0 0
if [ $? = 0 ]; then
  echo "$password" | sudo -S sudo samba-tool user setexpiry "$validusr1" --noexpiry
  dialog --title "Informação" --msgbox "A senha de $validusr1 não expira mais!" 8 40
  dialog --title "Informação" --msgbox "Usuário $validusr1 criado e configurado com sucesso!" 8 40
  menu04
else
  dialog --title "Informação" --msgbox "Usuário $validusr1 criado e configurado com sucesso!" 8 40
  menu04
fi
}


function menuE {
  validusr=$(dialog --title 'AD-DC' --backtitle "Trocar a senha de usuário do Domínio em $HOSTNAME" --inputbox "Insira o nome do usuário" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menu04
  if [ -z "$validusr" ]; then
    dialog --title "ERRO" --msgbox "Usuário não pode ficar em branco!" 8 40
    menuE
  fi

  validpss=$(dialog --title 'AD-DC' --backtitle "Criar um novo usuário do Domínio em $HOSTNAME" --insecure --passwordbox 'Crie uma nova senha para o usuário' 0 0 2>&1 > /dev/tty )
  [ $? -ne 0 ] && menu04
  if [ -z "$validpss" ]; then
    dialog --title "ERRO" --msgbox "Senha não pode ficar em branco!" 8 40
    menuE
  fi

  echo "$password" | sudo -S samba-tool user setpassword "$validusr" --newpassword="$validpss"
  dialog --title "Informação" --msgbox "Senha de $validusr trocada com sucesso!" 8 40
  menu04
}

function menuF {
  validusr=$(dialog --title 'AD-DC' --backtitle "Bloquear usuário do Domínio em $HOSTNAME" --inputbox "Insira o nome do usuário" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menu04
  if [ -z "$validusr" ]; then
    dialog --title "ERRO" --msgbox "Usuário não pode ficar em branco!" 8 40
    menuF
  fi
  echo "$password" | sudo -S samba-tool user disable "$validusr"
  dialog --title "Informação" --msgbox "Usuário $validusr bloqueado com sucesso!" 7 25
  menu04
}

function menuG {
  validusr=$(dialog --title 'AD-DC' --backtitle "Desbloquear usuário do Domínio em $HOSTNAME" --inputbox "Insira o nome do usuário" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menu04
  if [ -z "$validusr" ]; then
    dialog --title "ERRO" --msgbox "Usuário não pode ficar em branco!" 8 40
    menuG
  fi
  echo "$password" | sudo -S samba-tool user enable "$validusr"
  dialog --title "Informação" --msgbox "Usuário $validusr desbloqueado com sucesso!" 7 25
  menu04
}

function menuH {
  validusr=$(dialog --title 'AD-DC' --backtitle "Excluir usuário do Domínio em $HOSTNAME" --inputbox "Insira o nome do usuário" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menu04
  if [ -z "$validusr" ]; then
    dialog --title "ERRO" --msgbox "Usuário não pode ficar em branco!" 8 40
    menuH
  fi
  dialog --title 'Confirmação' --backtitle 'Exclusão de Usuário' --yesno 'Deseja excluir este usuário?' 0 0
  if [ $? = 0 ]; then
    echo "$password" | sudo -S samba-tool user delete "$validusr"
    dialog --title "Informação" --msgbox "Usuário $validusr excluído com sucesso!" 7 25
    menu04
  fi
}

function menuI {
  validgrp=$(dialog --title 'AD-DC' --backtitle "Criar um Grupo em $HOSTNAME" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menu04
  if [ -z "$validgrp" ]; then
    dialog --title "ERRO" --msgbox "Grupo não pode ficar em branco!" 8 40
    menuI
  fi
  echo "$password" | sudo -S samba-tool group add "$validgrp"
  dialog --title "Informação" --msgbox "Grupo $validgrp criado com sucesso!" 7 25
  menu04
}

function menuJ {
  validusr=$(dialog --title 'AD-DC' --backtitle "Adicionar Usuário a um Grupo em $HOSTNAME" --inputbox "Insira o nome do Usuario" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menu04
  if [ -z "$validusr" ]; then
    dialog --title "ERRO" --msgbox "Usuário não pode ficar em branco!" 8 40
    menuJ
  fi
  validgrp=$(dialog --title 'AD-DC' --backtitle "Adicionar Usuário a um Grupo em $HOSTNAME" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menu04
  if [ -z "$validgrp" ]; then
    dialog --title "ERRO" --msgbox "Grupo não pode ficar em branco!" 8 40
    menuJ
  fi
  echo "$password" | sudo -S samba-tool group addmembers "$validgrp" "$validusr"
  dialog --title "Informação" --msgbox "O usuário $validusr foi adicionado ao grupo $validgrp !" 8 40
  menu04
}

function menuK {
  validgrp=$(dialog --title 'AD-DC' --backtitle "Exibir membros de um grupo em $HOSTNAME" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menu04
  if [ -z "$validgrp" ]; then
    dialog --title "ERRO" --msgbox "Grupo não pode ficar em branco!" 8 40
    menuK
  fi
  dialog --title 'AD-DC' --backtitle "Listagem de Membros" --msgbox "Para ver os membros use as setas para Cima e Baixo. Para fechar pressione 'q'!" 0 0; echo "$password" | sudo -S samba-tool group listmembers "$validgrp" | less
  menu04
}

function menuL {
  validusr=$(dialog --title 'AD-DC' --backtitle "Remover Usuário de um Grupo em $HOSTNAME" --inputbox "Insira o nome do Usuario" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menu04
  if [ -z "$validusr" ]; then
    dialog --title "ERRO" --msgbox "Usuário não pode ficar em branco!" 8 40
    menuL
  fi
  validgrp=$(dialog --title 'AD-DC' --backtitle "Remover Usuário de um Grupo em $HOSTNAME" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menu04
  if [ -z "$validgrp" ]; then
    dialog --title "ERRO" --msgbox "Grupo não pode ficar em branco!" 8 40
    menuL
  fi
  echo "$password" | sudo -S samba-tool group removemembers "$validgrp" "$validusr"
  dialog --title "Informação" --msgbox "O usuário $validusr foi removido do grupo $validgrp !" 8 40
  menu04
}

function menuM {
  validgrp=$(dialog --title 'AD-DC' --backtitle "Excluir grupo do Domínio em $HOSTNAME" --inputbox "Insira o nome do grupo" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menu04
  if [ -z "$validgrp" ]; then
    dialog --title "ERRO" --msgbox "Grupo não pode ficar em branco!" 8 40
    menuM
  fi
  dialog --title 'Confirmação' --backtitle 'Exclusão de Grupo' --yesno "Deseja excluir o grupo $validgrp?" 0 0

  if [ $? = 0 ]; then
    echo "$password" | sudo -S samba-tool group delete "$validgrp"
    dialog --title "Informação" --msgbox "Grupo $validgrp excluído com sucesso!" 7 25
    menu04
  fi
}

function menuN {
  validusr=$(dialog --title 'AD-DC' --backtitle "Alterar Política de Senha" --inputbox "Insira o nome do usuário" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && menu04
  if [ -z "$validusr" ]; then
    dialog --title "ERRO" --msgbox "Usuário não pode ficar em branco!" 8 40
    menuN
  fi

  dialog --title 'Politica de Senha' --backtitle 'Configuração de Senha' --yesno "$validusr deve trocar a senha ao logar?" 0 0
  if [ $? = 0 ]; then
    dialog --title "Informação" --msgbox "Esse recurso só funciona no ato da criação de um usuário!" 8 40
  fi

  dialog --title 'Politica de Senha' --backtitle 'Configuração de Senha' --yesno "A senha de $validusr não deve mais expirar?" 0 0
  if [ $? = 0 ]; then
    echo "$password" | sudo -S sudo samba-tool user setexpiry "$validusr" --noexpiry
    dialog --title "Informação" --msgbox "A senha de $validusr não expira mais!" 8 40
    menu04
  fi
  menu04
}

function menuO {
  validusr=$(dialog --title 'AD-DC' --backtitle "Exibir grupos de um usuário em $HOSTNAME" --inputbox "Insira o nome do usuário" 0 0 2>&1 > /dev/tty)
  [ $? -ne 0 ] && break && menuO
  if [ -z "$validusr" ]; then
    dialog --title "ERRO" --msgbox "Usuário não pode ficar em branco!" 8 40
    menuO
  fi
  dialog --title 'AD-DC' --backtitle "Listagem de Grupos" --msgbox "Para ver os grupos use as setas para Cima e Baixo. Para fechar pressione 'q'!" 0 0; echo "$password" | sudo -S samba-tool user getgroups "$validusr" | less
  menu04
}

function menuP {
  echo "a"
}

function menuQ {
  echo "b"
}

################################################################################
#                                                                              #
################################################################################

# Acesso Restrito!

function m0x {
  dialog --title 'F.F.E.' --msgbox "Ferramentas e Funções Experimentais" 0 0
  password02=$(dialog --backtitle "Somente Pessoal Autorizado" --title 'Acesso Restrito' --insecure --passwordbox 'Digite a senha.' 0 0 2>&1 > /dev/tty)
  if [ "$password02" = "1345278" ]; then
    dialog --title 'Porteiro:' --msgbox "Clift Claft Still, a Porta se Abriu!" 6 40
    m00
  else
    dialog --title 'Acesso Proibido' --msgbox "Permissão Negada" 0 0
  fi
}

# Clift Claft Still, a Porta se Abriu!

function m00 {
  var7=$(dialog --backtitle "Ferramentas e Funções Experimentais!" --title 'Atenção' --menu "Menu Restrito" 0 0 0 \
  A 'Projeto 01' \
  B 'Projeto 02' \
  C 'Projeto 03' \
  D 'Projeto 04' \
  E 'Projeto 05' \
  X 'Voltar' 2>&1 > /dev/tty )
  case $? in
    2) dialog --title 'Nothing' --msgbox "Nothing" 0 0 ; m01 ;;
  esac
  case "$var7" in
  A) m01 ;;
  B) m02 ;;
  C) m03 ;;
  D) m04 ;;
  E) m05 ;;
  X) echo a ;;
  esac
}

function m01 {

errvm=" "
VM1="$errvm"; VM2="$errvm"; VM3="$errvm"; VM4="$errvm"; VM5="$errvm"; VM6="$errvm"; VM7="$errvm"; VM8="$errvm"; VM9="$errvm"; VM10="$errvm"

#virsh list --all | grep "shut off" | sed -n 1p | awk '{print $2}'
#virsh list | grep running | sed -n 1p | awk '{print $2}'

VM1I=`virsh list | grep running | sed -n 1p | awk '{print $2}'`
VM1O=`virsh list --all | grep "shut off" | sed -n 1p | awk '{print $2}'`

if [ "$VM1" = "" ]; then
  VM1=`echo " "`
fi

VM2=`virsh list --all | sed -n 4p | awk '{print $2}'`
VM3=`virsh list --all | sed -n 5p | awk '{print $2}'`
VM4=`virsh list --all | sed -n 6p | awk '{print $2}'`
VM5=`virsh list --all | sed -n 7p | awk '{print $2}'`
VM6=`virsh list --all | sed -n 8p | awk '{print $2}'`
VM7=`virsh list --all | sed -n 9p | awk '{print $2}'`
VM8=`virsh list --all | sed -n 10p | awk '{print $2}'`
VM9=`virsh list --all | sed -n 11p | awk '{print $2}'`
VM10=`virsh list --all | sed -n 12p | awk '{print $2}'`

  var8=$(dialog --backtitle "Maquinas Virtuais" --title 'Atenção' --menu "Menu de Testes" 0 0 0 \
  A "$VM1" \
  B "$VM2" \
  C "$VM3" \
  D "$VM4" \
  E "$VM5" \
  F "$VM6" \
  G "$VM7" \
  H "$VM8" \
  I "$VM9" \
  J "$VM10" \
  X 'Voltar' 2>&1 > /dev/tty )
  case $? in
    2) dialog --title 'Nothing' --msgbox "Nothing" 0 0 ; m01 ;;
  esac
  case "$var8" in
  A) m011 ;;
  B) m011 ;;
  C) m011 ;;
  D) m011 ;;
  E) m011 ;;
  F) m011 ;;
  G) m011 ;;
  H) m011 ;;
  I) m011 ;;
  J) m011 ;;
  X) echo a ;;
  esac
}

function m011 {
if [ "$status" = "Executando" ]; then # se Executando...
  dialog --title "$processname" --yesno "Deseja reiniciar o processo $processname ?" 6 40
  if [ $? = 0 ]; then
    echo "$password" | sudo -S systemctl restart "$process"
    dialog --title "$processname" --msgbox "O processo $processname foi reiniciado!" 6 40
    menu03
  else
    dialog --title "$processname" --yesno "Deseja parar o processo $processname ?" 6 40
    if [ $? = 0 ]; then
    echo "$password" | sudo -S systemctl stop "$process"
    dialog --title "$processname" --msgbox "O processo $processname foi parado!" 6 40
    menu03
    fi
  fi
  menu03
else # se Parado
  dialog --title "$processname" --yesno "Deseja tentar iniciar o processo $processname ?" 6 40
  if [ $? = 0 ]; then
    echo "$password" | sudo -S systemctl start "$process"
    dialog --title "$processname" --msgbox "Verifique se o $processname iniciou." 6 40
    menu03
  fi
  menu03
fi
}

function m02 {
  var9=$(dialog --backtitle "SMART" --title 'Atenção' --menu "Menu de Testes" 0 0 0 \
  A 'SMART A' \
  B 'SMART B' \
  C 'SMART C' \
  D 'SMART D' \
  E 'SMART E' \
  X 'Voltar' 2>&1 > /dev/tty )
  case $? in
    2) dialog --title 'Nothing' --msgbox "Nothing" 0 0 ; m01 ;;
  esac
  case "$var9" in
  A) m01 ;;
  B) m02 ;;
  C) m03 ;;
  D) m04 ;;
  E) m05 ;;
  X) echo a ;;
  esac
}

function m03 {


  var10=$(dialog --backtitle "A" --title 'Atenção' --menu "Menu de Testes" 0 0 0 \
  A 'A' \
  B 'B' \
  C 'C' \
  D 'D' \
  E 'E' \
  X 'Voltar' 2>&1 > /dev/tty )
  case $? in
    2) dialog --title 'Nothing' --msgbox "Nothing" 0 0 ; m01 ;;
  esac
  case "$var10" in
  A) m01 ;;
  B) m02 ;;
  C) m03 ;;
  D) m04 ;;
  E) m05 ;;
  X) echo a ;;
  esac
}

function m04 {


  var11=$(dialog --backtitle "B" --title 'Atenção' --menu "Menu de Testes" 0 0 0 \
  A 'A' \
  B 'B' \
  C 'C' \
  D 'D' \
  E 'E' \
  X 'Voltar' 2>&1 > /dev/tty )
  case $? in
    2) dialog --title 'Nothing' --msgbox "Nothing" 0 0 ; m01 ;;
  esac
  case "$var11" in
  A) m01 ;;
  B) m02 ;;
  C) m03 ;;
  D) m04 ;;
  E) m05 ;;
  X) echo a ;;
  esac
}

function m05 {


  var12=$(dialog --backtitle "C" --title 'Atenção' --menu "Menu de Testes" 0 0 0 \
  A 'A' \
  B 'B' \
  C 'C' \
  D 'D' \
  E 'E' \
  X 'Voltar' 2>&1 > /dev/tty )
  case $? in
    2) dialog --title 'Nothing' --msgbox "Nothing" 0 0 ; m01 ;;
  esac
  case "$var12" in
  A) m01 ;;
  B) m02 ;;
  C) m03 ;;
  D) m04 ;;
  E) m05 ;;
  X) echo a ;;
  esac
}

################################################################################
#                                                                              #
################################################################################

init
