#!/bin/bash

containers="/srv/containers"

source=$(sed -n '1p' /srv/containers/scripts/config/backupcont)
destiny=$(sed -n '2p' /srv/containers/scripts/config/backupcont)
UUIDD=$(sed -n '3p' /srv/containers/scripts/config/backupcont)
mountpoint=$(sed -n '4p' /srv/containers/scripts/config/backupcont)

cd "$source"

datetime=$(date +"%d_%m_%y")

function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Run this script as Root! Exiting..."
    exit
    }
}

function checkB {
for dirX in $mountpoint; do
  disk=$(/bin/mount -U $UUIDD $dirX && echo "mounted" || echo "error")
    [ "$disk" = "mounted" ]; then
      # Stop all containers and wait until all are stopped
      dockerctrl stop &&
      # Check if there is some old .tar to delete first
      checkC
      # Run the backup os all containers
      backup
      # Start all containers again and wait until all are started
      dockerctrl start &&
    } || {
      echo "Something happened, exiting..."
      exit
    }
  done
}

function checkC {
  for dir0 in $destiny; do
    # Applying permissions!
    chmod 777 -R "$destiny"

    # Doesn't forget about the SLASH!
    # Delete files older than 3 days
    find "$dir0"/ -type f -mtime +3 -delete
  done
}

function dockerctrl {
  docker "$1" $(docker ps -a -q)
}

function backup {
  for dir1 in $(find $containers/* -maxdepth 0); do
    tar -cvf "$destiny"/"$dir1"-"$datetime".tar "$dir"
  done

  for dir2 in $destiny; do
    sudo rsync -a --delete "$source" "$dir2"
  done
}

# Check if this script is running through root user
checkA
# Check if the disk is mounted
checkB

exit 1


#not used

# Delete folders older than 3 days
#find "$destiny"/ -type d -mtime +3 -exec rm -rf {} \;

# Delete empty folders
#find "$destiny"/ -type d -empty -delete
