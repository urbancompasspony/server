#!/bin/bash

#####################################################################################################
# Sistema Interativo de T√∫neis SSH
# Vers√£o com mem√≥ria de configura√ß√µes - salva em /tmp para reutilizar em caso de erro
#####################################################################################################

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configura√ß√µes SSH
scpoptions="-o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o ServerAliveCountMax=5"

# Arquivo tempor√°rio para salvar configura√ß√µes
CONFIG_FILE="/tmp/ssh-tunnel-config-$$"

# Vari√°veis globais
tunel1_pid=""
tunel2_pid=""

#####################################################################################################
# FUN√á√ïES DE PERSIST√äNCIA
#####################################################################################################

save_config() {
    cat > "$CONFIG_FILE" << EOF
servidor1_full="$servidor1_full"
servidor2_full="$servidor2_full"
password_servidor2="$password_servidor2"
target_ip="$target_ip"
target_port="$target_port"
service_name="$service_name"
service_type="$service_type"
access_info="$access_info"
custom_access="$custom_access"
porta_local_tunel1="$porta_local_tunel1"
porta_local_service="$porta_local_service"
EOF
}

load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
        return 0
    fi
    return 1
}

#####################################################################################################
# FUN√á√ïES PRINCIPAIS
#####################################################################################################

print_header() {
    clear
    echo -e "${CYAN}================================================================${NC}"
    echo -e "${CYAN}           Sistema Interativo de T√∫neis SSH                     ${NC}"
    echo -e "${CYAN}           (com mem√≥ria de configura√ß√µes)                       ${NC}"
    echo -e "${CYAN}================================================================${NC}"
    echo ""
}

cleanup() {
    echo ""
    echo -e "${YELLOW}Encerrando t√∫neis...${NC}"

    if [[ -n "$tunel1_pid" ]] && kill -0 $tunel1_pid 2>/dev/null; then
        kill $tunel1_pid 2>/dev/null
        echo -e "${GREEN}‚úì T√∫nel 1 encerrado${NC}"
    fi

    if [[ -n "$tunel2_pid" ]] && kill -0 $tunel2_pid 2>/dev/null; then
        kill $tunel2_pid 2>/dev/null
        echo -e "${GREEN}‚úì T√∫nel 2 encerrado${NC}"
    fi

    # Limpar arquivo tempor√°rio
    rm -f "$CONFIG_FILE"

    echo -e "${CYAN}Obrigado por usar o sistema de t√∫neis!${NC}"
    exit 0
}

get_user_input() {
    print_header

    # Tentar carregar configura√ß√£o anterior
    local config_loaded=false
    if load_config; then
        config_loaded=true
        echo -e "${YELLOW}üìÇ Configura√ß√£o anterior encontrada! Voc√™ pode reutilizar os valores ou alter√°-los.${NC}"
        echo ""
    fi

    echo -e "${BLUE}üìã CONFIGURA√á√ÉO DOS SERVIDORES${NC}"
    echo ""

    # Servidor 1 (Tailscale)
    echo -e "${YELLOW}1. Servidor Tailscale (com chaves SSH configuradas):${NC}"
    if $config_loaded && [[ -n "$servidor1_full" ]]; then
        echo -e "   Valor anterior: ${GREEN}$servidor1_full${NC}"
        read -p "   Digite usuario@servidor [$servidor1_full]: " input_servidor1
        servidor1_full="${input_servidor1:-$servidor1_full}"
    else
        read -p "   Digite usuario@servidor: " servidor1_full
    fi

    if [[ ! "$servidor1_full" =~ ^[^@]+@[^@]+$ ]]; then
        echo -e "${RED}‚ùå Formato inv√°lido! Use: usuario@servidor${NC}"
        echo -e "${YELLOW}Salvando dados preenchidos...${NC}"
        save_config
        sleep 2
        get_user_input
        return
    fi

    echo ""

    # Servidor 2 (pfSense/Gateway)
    echo -e "${YELLOW}2. Servidor pfSense/Gateway:${NC}"
    if $config_loaded && [[ -n "$servidor2_full" ]]; then
        echo -e "   Valor anterior: ${GREEN}$servidor2_full${NC}"
        read -p "   Digite usuario@IP [$servidor2_full]: " input_servidor2
        servidor2_full="${input_servidor2:-$servidor2_full}"
    else
        read -p "   Digite usuario@IP (ex: admin@192.168.1.1): " servidor2_full
    fi

    if [[ ! "$servidor2_full" =~ ^[^@]+@[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo -e "${RED}‚ùå Formato inv√°lido! Use: usuario@IP${NC}"
        echo -e "${YELLOW}Salvando dados preenchidos...${NC}"
        save_config
        sleep 2
        get_user_input
        return
    fi

    # Senha do servidor 2
    if $config_loaded && [[ -n "$password_servidor2" ]]; then
        echo -e "   Senha anterior: ${GREEN}[SALVA]${NC}"
        read -p "   Usar senha anterior? (s/N): " use_old_pass
        if [[ "$use_old_pass" =~ ^[Ss]$ ]]; then
            echo -e "   ${GREEN}‚úì Usando senha salva${NC}"
        else
            read -s -p "   Nova senha para $servidor2_full: " password_servidor2
            echo ""
        fi
    else
        read -s -p "   Senha do $servidor2_full: " password_servidor2
        echo ""
    fi
    echo ""

    # Servi√ßo alvo
    echo -e "${YELLOW}3. Servi√ßo de destino:${NC}"
    if $config_loaded && [[ -n "$target_ip" ]]; then
        echo -e "   IP anterior: ${GREEN}$target_ip${NC}"
        read -p "   IP do servi√ßo alvo [$target_ip]: " input_target_ip
        target_ip="${input_target_ip:-$target_ip}"
    else
        read -p "   IP do servi√ßo alvo: " target_ip
    fi

    if [[ ! "$target_ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo -e "${RED}‚ùå IP inv√°lido!${NC}"
        echo -e "${YELLOW}Salvando dados preenchidos...${NC}"
        save_config
        sleep 2
        get_user_input
        return
    fi

    echo ""
    echo -e "${CYAN}   Tipos de servi√ßo dispon√≠veis:${NC}"
    echo "   1) RDP (Windows Remote Desktop) - Porta 3389"
    echo "   2) SSH - Porta 22"
    echo "   3) HTTP - Porta 80"
    echo "   4) HTTPS - Porta 443"
    echo "   5) FTP - Porta 21"
    echo "   6) Telnet - Porta 23"
    echo "   7) SMTP - Porta 25"
    echo "   8) DNS - Porta 53"
    echo "   9) DHCP - Porta 67"
    echo "   10) POP3 - Porta 110"
    echo "   11) IMAP - Porta 143"
    echo "   12) SNMP - Porta 161"
    echo "   13) LDAP - Porta 389"
    echo "   14) SMTPS - Porta 465"
    echo "   15) IMAPS - Porta 993"
    echo "   16) POP3S - Porta 995"
    echo "   17) VNC - Porta 5900"
    echo "   18) Personalizada"
    echo ""

    if $config_loaded && [[ -n "$service_type" ]]; then
        echo -e "   Tipo anterior: ${GREEN}$service_type${NC} ($service_name)"
        read -p "   Escolha o tipo (1-18) [$service_type]: " input_service_type
        service_type="${input_service_type:-$service_type}"
    else
        read -p "   Escolha o tipo (1-18): " service_type
    fi

    case $service_type in
        1) target_port=3389; service_name="RDP (Windows Remote Desktop)"; access_info="Conecte seu cliente RDP em localhost:PORTA" ;;
        2) target_port=22; service_name="SSH"; access_info="ssh usuario@localhost -p PORTA" ;;
        3) target_port=80; service_name="HTTP"; access_info="Acesse http://localhost:PORTA no navegador" ;;
        4) target_port=443; service_name="HTTPS"; access_info="Acesse https://localhost:PORTA no navegador" ;;
        5) target_port=21; service_name="FTP"; access_info="Conecte seu cliente FTP em localhost:PORTA" ;;
        6) target_port=23; service_name="Telnet"; access_info="telnet localhost PORTA" ;;
        7) target_port=25; service_name="SMTP"; access_info="Configure cliente email para localhost:PORTA" ;;
        8) target_port=53; service_name="DNS"; access_info="Configure DNS para localhost:PORTA" ;;
        9) target_port=67; service_name="DHCP"; access_info="Servi√ßo DHCP em localhost:PORTA" ;;
        10) target_port=110; service_name="POP3"; access_info="Configure cliente email POP3 para localhost:PORTA" ;;
        11) target_port=143; service_name="IMAP"; access_info="Configure cliente email IMAP para localhost:PORTA" ;;
        12) target_port=161; service_name="SNMP"; access_info="Cliente SNMP para localhost:PORTA" ;;
        13) target_port=389; service_name="LDAP"; access_info="Conecte cliente LDAP em localhost:PORTA" ;;
        14) target_port=465; service_name="SMTPS"; access_info="Configure cliente email SMTPS para localhost:PORTA" ;;
        15) target_port=993; service_name="IMAPS"; access_info="Configure cliente email IMAPS para localhost:PORTA" ;;
        16) target_port=995; service_name="POP3S"; access_info="Configure cliente email POP3S para localhost:PORTA" ;;
        17) target_port=5900; service_name="VNC"; access_info="Conecte cliente VNC em localhost:PORTA" ;;
        18)
            if $config_loaded && [[ -n "$target_port" ]] && [[ "$service_type" == "18" ]]; then
                echo -e "   Porta anterior: ${GREEN}$target_port${NC}"
                read -p "   Digite a porta personalizada [$target_port]: " input_target_port
                target_port="${input_target_port:-$target_port}"
            else
                read -p "   Digite a porta personalizada: " target_port
            fi

            if $config_loaded && [[ -n "$service_name" ]] && [[ "$service_type" == "18" ]]; then
                echo -e "   Nome anterior: ${GREEN}$service_name${NC}"
                read -p "   Nome do servi√ßo [$service_name]: " input_service_name
                service_name="${input_service_name:-$service_name}"
            else
                read -p "   Nome do servi√ßo: " service_name
            fi

            if $config_loaded && [[ -n "$custom_access" ]] && [[ "$service_type" == "18" ]]; then
                echo -e "   Acesso anterior: ${GREEN}$custom_access${NC}"
                read -p "   Como acessar [$custom_access]: " input_custom_access
                custom_access="${input_custom_access:-$custom_access}"
            else
                read -p "   Como acessar (ex: 'Acesse no navegador'): " custom_access
            fi
            access_info="$custom_access localhost:PORTA"
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida!${NC}"
            echo -e "${YELLOW}Salvando dados preenchidos...${NC}"
            save_config
            sleep 2
            get_user_input
            return
            ;;
    esac

    # Definir portas locais autom√°ticamente
    porta_local_tunel1=2221
    porta_local_service=$((8000 + target_port))

    # Se a porta calculada for muito alta, usa uma alternativa
    if [ $porta_local_service -gt 65535 ]; then
        porta_local_service=$((target_port + 1000))
    fi

    # Salvar configura√ß√£o completa
    save_config
}

show_summary() {
    echo ""
    echo -e "${CYAN}üìã RESUMO DA CONFIGURA√á√ÉO${NC}"
    echo -e "${CYAN}================================${NC}"
    echo -e "üñ•Ô∏è  Servidor Tailscale: ${GREEN}$servidor1_full${NC}"
    echo -e "üîß Servidor Gateway: ${GREEN}$servidor2_full${NC}"
    echo -e "üéØ Servi√ßo alvo: ${GREEN}$target_ip:$target_port${NC} ($service_name)"
    echo -e "üîó Porta local: ${GREEN}$porta_local_service${NC}"
    echo ""
    echo -e "${YELLOW}Op√ß√µes:${NC}"
    echo "   s) Confirmar e iniciar t√∫neis"
    echo "   e) Editar configura√ß√µes"
    echo "   q) Sair"
    echo ""
    read -p "Escolha (s/e/q): " confirm

    case "$confirm" in
        [Ss]*)
            return 0
            ;;
        [Ee]*)
            get_user_input
            show_summary
            return $?
            ;;
        [Qq]*)
            echo -e "${YELLOW}Saindo...${NC}"
            rm -f "$CONFIG_FILE"
            exit 0
            ;;
        *)
            echo -e "${YELLOW}Op√ß√£o inv√°lida, confirmando configura√ß√£o...${NC}"
            sleep 1
            return 0
            ;;
    esac
}

create_tunnels() {
    echo ""
    echo -e "${CYAN}üöÄ INICIANDO T√öNEIS${NC}"
    echo -e "${CYAN}====================${NC}"

    # Extrair informa√ß√µes
    servidor2_user=$(echo $servidor2_full | cut -d'@' -f1)
    servidor2_ip=$(echo $servidor2_full | cut -d'@' -f2)

    # Primeiro t√∫nel
    echo -e "${YELLOW}1. Criando primeiro t√∫nel...${NC}"
    echo "   $servidor1_full ‚Üí $servidor2_ip:22 (porta local: $porta_local_tunel1)"

    ssh $scpoptions "$servidor1_full" -N -L "$porta_local_tunel1:$servidor2_ip:22" &
    tunel1_pid=$!

    sleep 3

    if ! kill -0 $tunel1_pid 2>/dev/null; then
        echo -e "${RED}‚ùå ERRO: Primeiro t√∫nel falhou!${NC}"
        echo -e "${RED}   Verifique se as chaves SSH est√£o configuradas para $servidor1_full${NC}"
        echo ""
        echo -e "${YELLOW}Pressione Enter para voltar √†s configura√ß√µes...${NC}"
        read
        get_user_input
        show_summary
        create_tunnels
        return
    fi

    echo -e "${GREEN}   ‚úì Primeiro t√∫nel estabelecido (PID: $tunel1_pid)${NC}"

    # Segundo t√∫nel
    echo ""
    echo -e "${YELLOW}2. Criando segundo t√∫nel...${NC}"
    echo "   localhost:$porta_local_tunel1 ‚Üí $target_ip:$target_port (porta local: $porta_local_service)"

    sshpass -p "$password_servidor2" ssh $scpoptions "$servidor2_user@localhost" \
        -p "$porta_local_tunel1" \
        -N -L "$porta_local_service:$target_ip:$target_port" &
    tunel2_pid=$!

    sleep 3

    if ! kill -0 $tunel2_pid 2>/dev/null; then
        echo -e "${RED}‚ùå ERRO: Segundo t√∫nel falhou!${NC}"
        echo -e "${RED}   Verifique as credenciais do $servidor2_full${NC}"
        kill $tunel1_pid 2>/dev/null
        echo ""
        echo -e "${YELLOW}Pressione Enter para voltar √†s configura√ß√µes...${NC}"
        read
        get_user_input
        show_summary
        create_tunnels
        return
    fi

    echo -e "${GREEN}   ‚úì Segundo t√∫nel estabelecido (PID: $tunel2_pid)${NC}"
}

show_success() {
    echo ""
    echo -e "${GREEN}================================================================${NC}"
    echo -e "${GREEN}            üéâ T√öNEIS ESTABELECIDOS COM SUCESSO! üéâ            ${NC}"
    echo -e "${GREEN}================================================================${NC}"
    echo ""
    echo -e "${CYAN}üìä STATUS DOS T√öNEIS:${NC}"
    echo -e "   T√∫nel 1: ${GREEN}Ativo${NC} (PID: $tunel1_pid)"
    echo -e "   T√∫nel 2: ${GREEN}Ativo${NC} (PID: $tunel2_pid)"
    echo ""
    echo -e "${YELLOW}üéØ COMO ACESSAR SEU SERVI√áO:${NC}"
    echo -e "${YELLOW}================================${NC}"
    echo -e "   Servi√ßo: ${CYAN}$service_name${NC}"
    echo -e "   Destino original: ${CYAN}$target_ip:$target_port${NC}"
    echo -e "   ${GREEN}${access_info/PORTA/$porta_local_service}${NC}"
    echo ""
    echo -e "${CYAN}üìÑ Configura√ß√£o salva em: ${CONFIG_FILE}${NC}"
    echo ""
    echo -e "${RED}‚ö†Ô∏è  IMPORTANTE:${NC}"
    echo -e "   ‚Ä¢ Mantenha este terminal aberto enquanto usar o servi√ßo"
    echo -e "   ‚Ä¢ Pressione ${YELLOW}Ctrl+C${NC} para encerrar os t√∫neis"
    echo -e "   ‚Ä¢ O sistema tentar√° reconectar automaticamente em caso de queda"
    echo -e "   ‚Ä¢ Execute novamente o script para reutilizar esta configura√ß√£o"
    echo ""
}

monitor_tunnels() {
    local reconnect_count=0

    while true; do
        # Verificar t√∫nel 1
        if ! kill -0 $tunel1_pid 2>/dev/null; then
            reconnect_count=$((reconnect_count + 1))
            echo -e "${RED}‚ùå T√∫nel 1 perdido! Tentativa de reconex√£o $reconnect_count...${NC}"

            ssh $scpoptions "$servidor1_full" -N -L "$porta_local_tunel1:$servidor2_ip:22" &
            tunel1_pid=$!
            sleep 3

            if kill -0 $tunel1_pid 2>/dev/null; then
                echo -e "${GREEN}‚úì T√∫nel 1 reconectado!${NC}"
            fi
        fi

        # Verificar t√∫nel 2
        if ! kill -0 $tunel2_pid 2>/dev/null; then
            reconnect_count=$((reconnect_count + 1))
            echo -e "${RED}‚ùå T√∫nel 2 perdido! Tentativa de reconex√£o $reconnect_count...${NC}"

            servidor2_user=$(echo $servidor2_full | cut -d'@' -f1)
            sshpass -p "$password_servidor2" ssh $scpoptions "$servidor2_user@localhost" \
                -p "$porta_local_tunel1" \
                -N -L "$porta_local_service:$target_ip:$target_port" &
            tunel2_pid=$!
            sleep 3

            if kill -0 $tunel2_pid 2>/dev/null; then
                echo -e "${GREEN}‚úì T√∫nel 2 reconectado!${NC}"
            fi
        fi

        # Mostrar status a cada 30 segundos se houver reconex√µes
        if [ $reconnect_count -gt 0 ] && [ $((reconnect_count % 3)) -eq 0 ]; then
            echo -e "${CYAN}‚ÑπÔ∏è  Status: T√∫neis ativos. Reconex√µes: $reconnect_count${NC}"
        fi

        sleep 10
    done
}

#####################################################################################################
# MAIN
#####################################################################################################

# Verificar depend√™ncias
if ! command -v sshpass &> /dev/null; then
    echo -e "${RED}‚ùå ERRO: sshpass n√£o est√° instalado!${NC}"
    echo -e "${YELLOW}   Ubuntu/Debian: sudo apt install sshpass${NC}"
    echo -e "${YELLOW}   CentOS/RHEL: sudo yum install sshpass${NC}"
    exit 1
fi

# Configurar trap para cleanup
trap cleanup SIGINT SIGTERM

# Executar fluxo principal
get_user_input
show_summary
create_tunnels
show_success
monitor_tunnels
