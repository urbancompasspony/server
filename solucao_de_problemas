#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Contadores de problemas
WARNINGS=0
ERRORS=0

# Fun√ß√£o para log com timestamp
log_message() {
    echo -e "   $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Fun√ß√£o para incrementar contadores
add_warning() { ((WARNINGS++)); }
add_error() { ((ERRORS++)); }

echo "============================================"
echo "Diagn√≥stico do Sistema - Vers√£o 1.0"
echo "============================================"
echo ""

# Solicita senha de administrador
echo "Digite sua senha de administrador:"
echo ""
if sudo -v; then
    echo -e "${GREEN}‚úÖ Autentica√ß√£o realizada com sucesso!${NC}"
else
    echo -e "${RED}‚ùå Falha na autentica√ß√£o!${NC}"
    exit 1
fi
echo ""

# Teste 01 - Verificando armazenamento (melhorado)
echo -e "${BLUE}üîç Teste 01: Verificando armazenamento...${NC}"

# Verifica fstab vs montagens atuais
log_message "Verificando consist√™ncia do /etc/fstab..."
diskmount_output=$(sudo mount -a 2>&1)
diskmount_status=$?

if [ $diskmount_status -eq 0 ]; then
    echo -e "${GREEN}‚úÖ OK: Todos os sistemas de arquivos do fstab est√£o montados${NC}"
else
    echo -e "${RED}‚ùå ERRO: Problemas na montagem de sistemas de arquivos!${NC}"
    echo "Detalhes: $diskmount_output"
    add_error
fi

echo ""

# Verifica sistemas de arquivos com erros
log_message "Verificando integridade dos sistemas de arquivos..."
fs_errors=$(dmesg | grep -i "ext[234]\|xfs\|btrfs" | grep -i "error\|corrupt\|remount.*read-only" | tail -10)
if [ -n "$fs_errors" ]; then
    echo -e "${RED}‚ùå ERRO: Detectados erros no sistema de arquivos!${NC}"
    echo "$fs_errors"
    add_error
else
    echo -e "${GREEN}‚úÖ OK: Nenhum erro de sistema de arquivos detectado${NC}"
fi

echo ""

# Verifica dispositivos com bad blocks
log_message "Verificando dispositivos com poss√≠veis problemas..."
smart_devices=$(lsblk -d -o NAME,TYPE | grep disk | awk '{print $1}')
for device in $smart_devices; do
    if command -v smartctl >/dev/null 2>&1; then
        smart_status=$(sudo smartctl -H /dev/$device 2>/dev/null | grep "SMART overall-health")
        if echo "$smart_status" | grep -q "FAILED"; then
            echo -e "${RED}‚ùå CR√çTICO: Dispositivo /dev/$device com falha SMART!${NC}"
            add_error
        fi
    fi
done
echo ""

# Teste 02 - Verificando espa√ßo em disco (melhorado)
echo -e "${BLUE}üîç Teste 02: Verificando utiliza√ß√£o de armazenamento...${NC}"

# Verifica 100% de uso
diskfull=$(df -h | awk '$5 == "100%" {print $0}')
if [ -z "$diskfull" ]; then
    echo -e "${GREEN}‚úÖ OK: Nenhum disco com 100% de uso${NC}"
else
    echo -e "${RED}‚ùå CR√çTICO: Armazenamento(s) lotado(s)!${NC}"
    echo "$diskfull"
    add_error
fi

echo ""

# Verifica uso acima de 90%
log_message "Verificando uso acima de 90%..."
disk_high=$(df -h | awk 'NR>1 && $5 != "-" {gsub(/%/, "", $5); if ($5 > 90) print $0}')
if [ -n "$disk_high" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  AVISO: Armazenamento(s) com mais de 90% de uso:${NC}"
    echo "$disk_high"
    add_warning
fi

echo ""

# Verifica inodes
log_message "Verificando utiliza√ß√£o de inodes..."
inode_full=$(df -i | awk 'NR>1 && $5 != "-" {gsub(/%/, "", $5); if ($5 > 95) print $0}')
if [ -n "$inode_full" ]; then
    echo -e "${RED}‚ùå ERRO: Sistema(s) de arquivo(s) com inodes esgotados!${NC}"
    echo "$inode_full"
    add_error
fi
echo ""

# Teste 03 - Verificando conectividade de rede (melhorado)
echo -e "${BLUE}üîç Teste 03: Verificando conectividade de rede...${NC}"

# Testa m√∫ltiplos DNS
dns_servers=("1.1.1.1" "8.8.8.8" "208.67.222.222")
dns_working=0

for dns in "${dns_servers[@]}"; do
    if ping -c 1 -W 2 "$dns" >/dev/null 2>&1; then
        ((dns_working++))
    fi
done

if [ $dns_working -gt 0 ]; then
    echo -e "${GREEN}‚úÖ OK: Conectividade de internet funcionando ($dns_working/3 DNS respondendo)${NC}"
else
    echo -e "${RED}‚ùå CR√çTICO: Sem conectividade de internet!${NC}"
    add_error
fi

echo ""

# Verifica interfaces de rede
log_message "Verificando interfaces de rede..."
network_down=$(ip link show | grep -B1 "state DOWN" | grep -v "lo:" | grep ":")
if [ -n "$network_down" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  AVISO: Interface(s) de rede inativa(s):${NC}"
    echo "$network_down"
    add_warning
fi

echo ""

# Verifica resolu√ß√£o DNS
log_message "Verificando resolu√ß√£o DNS..."
if ! nslookup google.com >/dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  AVISO: Problemas na resolu√ß√£o DNS${NC}"
    add_warning
fi
echo ""

# Teste 04 - Verificando servi√ßos essenciais (muito melhorado)
echo -e "${BLUE}üîç Teste 04: Verificando servi√ßos essenciais...${NC}"

# Lista de servi√ßos cr√≠ticos para verificar
critical_services=("ssh" "systemd-resolved" "NetworkManager" "cron")

# Verifica servi√ßos do sistema
for service in "${critical_services[@]}"; do
    if systemctl is-active --quiet "$service" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ OK: Servi√ßo $service est√° ativo${NC}"
    else
        if systemctl list-unit-files --type=service | grep -q "^$service"; then
            echo -e "${YELLOW}‚ö†Ô∏è  AVISO: Servi√ßo $service est√° inativo${NC}"
            add_warning
        fi
    fi
done

# Testando Docker (melhorado)
log_message "Verificando Docker..."
if systemctl is-active --quiet docker 2>/dev/null; then
    echo -e "${GREEN}‚úÖ OK: Docker est√° ativo${NC}"
    
    # Verifica sa√∫de do Docker
    if ! docker system df >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  AVISO: Docker n√£o est√° respondendo adequadamente${NC}"
        add_warning
    fi
    
    # Verifica containers problem√°ticos
    exited_containers=$(docker ps -f status=exited -q 2>/dev/null)
    if [ -n "$exited_containers" ]; then
        exited_count=$(echo "$exited_containers" | wc -l)
        echo -e "${YELLOW}‚ö†Ô∏è  AVISO: $exited_count container(s) em estado EXITED${NC}"
        docker ps -f status=exited --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
        add_warning
    fi
    
    restarting_containers=$(docker ps -f status=restarting -q 2>/dev/null)
    if [ -n "$restarting_containers" ]; then
        echo -e "${RED}‚ùå ERRO: Container(s) em estado de restart infinito!${NC}"
        docker ps -f status=restarting --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
        add_error
    fi
    
    # Verifica containers com uso alto de recursos
    high_cpu_containers=$(docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}" | awk 'NR>1 {gsub(/%/, "", $2); if ($2 > 80) print $0}')
    if [ -n "$high_cpu_containers" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  AVISO: Container(s) com alto uso de CPU:${NC}"
        echo "$high_cpu_containers"
        add_warning
    fi
    
elif command -v docker >/dev/null 2>&1; then
    echo -e "${RED}‚ùå ERRO: Docker est√° instalado mas n√£o est√° executando!${NC}"
    add_error
else
    echo -e "${GREEN}‚úÖ OK: Docker n√£o est√° instalado (isso pode ser normal)${NC}"
fi

# Testando LibVirt (melhorado)
log_message "Verificando LibVirt..."
if systemctl is-active --quiet libvirtd 2>/dev/null; then
    echo -e "${GREEN}‚úÖ OK: LibVirt est√° ativo${NC}"
    
    # Verifica VMs com problemas
    if command -v virsh >/dev/null 2>&1; then
        vm_problems=$(sudo virsh list --all | grep -E "shut off|crashed|paused")
        if [ -n "$vm_problems" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  AVISO: VMs em estado n√£o ativo:${NC}"
            echo "$vm_problems"
            add_warning
        fi
    fi
elif command -v libvirtd >/dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  AVISO: LibVirt est√° instalado mas n√£o est√° executando${NC}"
    add_warning
else
    echo -e "${GREEN}‚úÖ OK: LibVirt n√£o est√° instalado (isso pode ser normal)${NC}"
fi
echo ""

# Teste 05 - Verifica√ß√µes adicionais de sistema
echo -e "${BLUE}üîç Teste 05: Verifica√ß√µes adicionais do sistema...${NC}"

# Verifica carga do sistema
load_avg=$(uptime | awk '{print $(NF-2)}' | sed 's/,//')
cpu_cores=$(nproc)
if (( $(echo "$load_avg > $cpu_cores * 2" | bc -l 2>/dev/null || echo "0") )); then
    echo -e "${YELLOW}‚ö†Ô∏è  AVISO: Carga do sistema alta ($load_avg com $cpu_cores cores)${NC}"
    add_warning
else
    echo -e "${GREEN}‚úÖ OK: Carga do sistema normal ($load_avg)${NC}"
fi

# Verifica mem√≥ria
mem_usage=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
if [ "$mem_usage" -gt 90 ]; then
    echo -e "${RED}‚ùå ERRO: Uso de mem√≥ria cr√≠tico (${mem_usage}%)${NC}"
    add_error
elif [ "$mem_usage" -gt 80 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  AVISO: Uso de mem√≥ria alto (${mem_usage}%)${NC}"
    add_warning
else
    echo -e "${GREEN}‚úÖ OK: Uso de mem√≥ria normal (${mem_usage}%)${NC}"
fi

# Verifica processos zumbis
zombies=$(ps aux | awk '$8 ~ /^Z/ { count++ } END { print count+0 }')
if [ "$zombies" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  AVISO: $zombies processo(s) zumbi detectado(s)${NC}"
    add_warning
fi

# Verifica logs de erro recentes
log_message "Verificando logs de sistema..."
recent_errors=$(journalctl --since "1 hour ago" -p err -q --no-pager | wc -l)
if [ "$recent_errors" -gt 10 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  AVISO: $recent_errors erros no log da √∫ltima hora${NC}"
    add_warning
fi

echo ""
echo "============================================"
echo -e "${BLUE}üìä RESUMO DO DIAGN√ìSTICO${NC}"
echo "============================================"
log_message "Diagn√≥stico conclu√≠do"
echo -e "Erros cr√≠ticos encontrados: ${RED}$ERRORS${NC}"
echo -e "Avisos encontrados: ${YELLOW}$WARNINGS${NC}"
echo ""

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "${GREEN}üéâ SISTEMA SAUD√ÅVEL: Nenhum problema detectado!${NC}"
    exit 0
elif [ $ERRORS -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  SISTEMA COM AVISOS: Verificar itens mencionados${NC}"
    exit 1
else
    echo -e "${RED}üö® SISTEMA COM PROBLEMAS CR√çTICOS: A√ß√£o imediata necess√°ria!${NC}"
    exit 2
fi
