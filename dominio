#!/bin/bash

# NEW ADMX!

admxw10="https://download.microsoft.com/download/2/E/3/2E3A1E42-8F50-4396-9E7E-76209EA4F429/Windows10-ADMX.msi"
admxw11="https://download.microsoft.com/download/8/d/d/8ddd685d-7d55-42e2-9555-6ab365050734/Administrative%20Templates%20(.admx)%20for%20Windows%2011%20September%202022%20Update.msi"

# ============================================================================ #

export NEEDRESTART_MODE=a
export DEBIAN_FRONTEND=noninteractive

export bktitle="Active Directory & Domain Controller"
export ttitle=" Server Menu v7.0 "

export PathFolder0

function main_menu {
  var4=$(dialog --title "$ttitle" --backtitle "$bktitle" --menu " " 0 0 0 \
  A 'Ferramentas de Usuarios' \
  B 'Ferramentas de Grupos' \
  C 'Ferramentas de Computadores' \
  D 'Gestao de Pastas Compartilhadas' \
  E 'Unidades Organizacionais' \
  F 'Silos de Autenticacao' \
  G 'Informacoes do Dominio' \
  H 'Manutencao Geral do Dominio' \
  X 'Sair' 2>&1 > /dev/tty )
  [ $? -ne 0 ] && exit
  case "$var4" in
  A) user_tools ; main_menu ;;
  B) group_tools ; main_menu ;;
  C) pc_tools ; main_menu ;;
  D) shared_folders ; main_menu ;;
  E) ou_tools ; main_menu ;;
  F) checksilos0 ; main_menu ;;
  G) info_domain ; main_menu ;;
  H) s_settings ; main_menu ;;
  X) exit ;;
  esac
}

function user_tools {
var41=$(dialog --title "$ttitle" --backtitle "Ferramentas de Usuarios" --menu " " 0 0 0 \
A 'Procurar usuario' \
B 'Verificar um usuario' \
C 'Criar usuario' \
D 'Exibir todos os usuarios' \
E 'Bloquear usuario' \
F 'Desbloquear usuario' \
G 'Adicionar usuario a um grupo' \
H 'Exibir grupos de usuario' \
I 'Remover usuario de um grupo' \
J 'Copiar os grupos de um usuario' \
K 'Promote usuario a admin' \
L 'Demote usuario de admin' \
M 'Alterar a senha de um usuario' \
N 'Testar a senha de um usuario' \
O 'Senha de usuario deve expirar?' \
P 'Quando senha usuario vai expirar?' \
Q 'Forcar troca de senha imediata!' \
R 'Definir quando expira senha global.' \
S 'Mover usuario para OU' \
T 'Excluir um usuario' \
X '<' 2>&1 > /dev/tty )
[ $? -ne 0 ] && return
case "$var41" in
A) search_user ; user_tools ;;
B) check_user ; user_tools ;;
C) create_user ; user_tools ;;
D) show_users ; user_tools ;;
E) blk_user ; user_tools ;;
F) ublk_user ; user_tools ;;
G) add_user_group ; user_tools ;;
H) show_group_user ; user_tools ;;
I) rm_user_group ; user_tools ;;
J) copy_group ; user_tools ;;
K) promote_user ; user_tools ;;
L) demote_user ; user_tools ;;
M) change_pass ; user_tools ;;
N) test_pass ; user_tools ;;
O) expiracy_usr_pass ; user_tools ;;
P) expiracy_days ; user_tools ;;
Q) expiracy_now ; user_tools ;;
R) expiracy_global ; user_tools ;;
S) mv_user_ou ; user_tools ;;
T) rm_user ; user_tools ;;
X) echo "." >/dev/null ;;
esac
}

function group_tools {
var41=$(dialog --title "$ttitle" --backtitle "Ferramentas de Grupos" --menu " " 0 0 0 \
A 'Procurar grupo' \
B 'Verificar um Grupo' \
C 'Criar grupo' \
D 'Exibir todos os grupos' \
E 'Exibir membros de um grupo' \
F 'Copiar os membros de um grupo' \
G 'Adicionar grupo 1 a um grupo 2' \
H 'Remover grupo 1 de um grupo 2' \
I 'Mover grupo para OU' \
J 'Excluir um grupo' \
X '<' 2>&1 > /dev/tty )
[ $? -ne 0 ] && return
case "$var41" in
A) search_group ; group_tools ;;
B) check_group ; group_tools ;;
C) create_group ; group_tools ;;
D) show_groups ; group_tools ;;
E) show_user_group ; group_tools ;;
F) copy_user ; group_tools ;;
G) add_group_group ; group_tools ;;
H) rm_group_group ; group_tools ;;
I) mv_group_ou ; group_tools ;;
J) rm_group ; group_tools ;;
X) echo "." > /dev/null ;;
esac
}

function pc_tools {
var41=$(dialog --title "$ttitle" --backtitle "Ferramentas de Computadores" --menu " " 0 0 0 \
A 'Procurar/Verificar um computador' \
B 'Exibir todos os computadores' \
C 'Criar/Adicionar um computador' \
D 'Mover computador para OU' \
E 'Excluir um computador' \
X '<' 2>&1 > /dev/tty )
[ $? -ne 0 ] && return
case "$var41" in
A) check_pc ; pc_tools ;;
B) show_pcs ; pc_tools ;;
C) create_pc ; pc_tools ;;
D) mv_pc_ou ; pc_tools ;;
E) rm_pc ; pc_tools ;;
X) echo "." > /dev/null ;;
esac
}

function info_domain {
  var4=$(dialog --title "$ttitle" --backtitle "Manutencao Geral do Dominio" --menu " " 0 0 0 \
  A 'Detalhes do Dominio' \
  B 'Complexidade das senhas' \
  C 'Processos do SAMBA' \
  D 'Status de todas sessoes ativas' \
  E 'Status dos compartilhamentos' \
  F 'F.A.Q. & Ajuda!' \
  X '<' 2>&1 > /dev/tty )
  [ $? -ne 0 ] && return
  case "$var4" in
  A) domain_details ; info_domain ;;
  B) show_pass_policy ; info_domain ;;
  C) smb_process ; info_domain ;;
  D) active_sessions ; info_domain ;;
  E) active_shares ; info_domain ;;
  F) faq_help ; read -p "Pressione Enter para continuar!" ; info_domain ;;
  X) echo "." >/dev/null ;;
  esac
}

function s_settings {
  var4=$(dialog --title "$ttitle" --backtitle "Manutencao Geral do Dominio" --menu " " 0 0 0 \
  A 'SysVol check' \
  B 'SysVol reset' \
  C 'samba-ad-dc db check: well-known-acls' \
  D 'samba-ad-dc db check: general' \
  E 'ACL check of GPOs (as Administrator!)' \
  F 'Get ACLs from a File or Folder' \
  G 'PERIGO! Set ACL to a File or Folder' \
  H 'Install ADMX Templates for Windows 10' \
  I 'Install ADMX Templates for Windows 11' \
  J 'Remove ADMX Templates' \
  K 'Atualizar este Menu' \
  X '<' 2>&1 > /dev/tty )
  [ $? -ne 0 ] && return
  case "$var4" in
  A) clear ; samba-tool ntacl sysvolcheck -U administrator ; read -p "Pressione Enter para continuar!" ; s_settings ;;
  B) clear ; samba-tool ntacl sysvolreset -U Administrator ; read -p "Pressione Enter para continuar!" ; s_settings ;;
  C) clear ; samba-tool dbcheck --cross-ncs --reset-well-known-acls --fix --yes ; read -p "Pressione Enter para continuar!" ; s_settings ;;
  D) clear ; samba-tool dbcheck --cross-ncs --fix --yes ; read -p "Pressione Enter para continuar!" ; s_settings ;;
  E) clear ; samba-tool gpo aclcheck -U Administrator ; read -p "Pressione Enter para continuar!" ; s_settings ;;
  F) getacls0 ; s_settings ;;
  G) setacls0 ; s_settings ;;
  H) clear ; force_msi_w10 ; s_settings ;;
  I) clear ; force_msi_w11 ; s_settings ;;
  J) clear ; rm -R /var/lib/samba/sysvol/$DOMAIN/Policies/PolicyDefinitions ; read -p "ADMX Templates removidas. Pressione Enter para continuar!" ; s_settings ;;
  K) clear ; wget -q https://raw.githubusercontent.com/urbancompasspony/server/main/dominio -O /root/.dominio ; chmod +x /root/.dominio ; exit ; s_settings ;;
  X) echo "." >/dev/null ;;
  esac
}

function shared_folders {
var0=$(dialog --title "$ttitle" --backtitle "Gestao de Pastas Compartilhadas" --menu " " 0 0 0 \
A 'Mostrar pastas compartilhadas' \
B 'Criar nova pasta compartilhada' \
C 'Compartilhamento estruturado' \
D 'Excluir compartilhamento' \
E 'Revalidar configuracoes' \
X '<' 2>&1 > /dev/tty )
case "$var0" in
A) show_shared ; shared_folders ;;
B) create_shared ; shared_folders ;;
C) create_sync ; shared_folders ;;
D) remove_shared ; shared_folders ;;
E) revalid_shared ; shared_folders ;;
X) echo "." >/dev/null ;;
esac
}

function ou_tools {
  var12=$(dialog --title "$ttitle" --backtitle "Unidades Organizacionais" --menu " " 0 0 0 \
  A 'Listar todas as OUs' \
  B 'Criar uma OU' \
  C 'Listar objetos de OU' \
  D 'Excluir uma OU' \
  X '<' 2>&1 > /dev/tty )
  [ $? -ne 0 ] && return
  case "$var12" in
  A) show_ous ; ou_tools ;;
  B) create_ou ; ou_tools ;;
  C) list_obj_ou ; ou_tools ;;
  D) rm_ou ; ou_tools ;;
  X) echo "." >/dev/null ;;
  esac
}

function checksilos0 {
  test01=$(samba-tool domain level show | grep -q 2012 && echo yes || echo no)
  test02=$(samba-tool domain level show | grep -q 2016 && echo yes || echo no)
  [ "$test01" = "yes" ] || [ "$test02" = "yes" ] && {
    menusilo
  } || {
    dialog --title "Tentando acessar Silos" --backtitle "Informacao" --msgbox "Nivel funcional muito baixo! \nSAMBA Incompativel." 7 40
  }
}

function menusilo {
  var12=$(dialog --title "$ttitle" --backtitle "Silos de Autenticacao" --menu " " 0 0 0 \
  A 'Procurar/verificar um silo' \
  B 'Listar todos os silos' \
  C 'Criar um silo' \
  D 'Listar usuarios de um silo' \
  E 'Adicionar um usuario a um silo' \
  F 'Remover um usuario de um silo' \
  G 'Excluir um silo' \
  X '<' 2>&1 > /dev/tty )
  [ $? -ne 0 ] && return
  case "$var12" in
  A) check_silo ; menusilo ;;
  B) show_silos ; menusilo ;;
  C) create_silos ; menusilo ;;
  D) list_usr_silo ; menusilo ;;
  E) add_usr_silo ; menusilo ;;
  F) rm_usr_silo ; menusilo ;;
  G) rm_silo ; menusilo ;;
  X) echo "." >/dev/null ;;
  esac
}

function check_silo {
validsilo=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Silo" 0 0 2>&1 > /dev/tty)
[ $? -ne 0 ] && return
[ -z "$validsilo" ] && {
  dialog --title "ERRO" --msgbox "Silo nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool domain auth silo list | grep -x "$validsilo")
  [ "$repeated" = "$validsilo" ] && {
    dialog --title "Informacao" --msgbox "O silo "$validsilo" existe!" 8 40
    clear
    dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os dados! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
    [ $? -ne 0 ] && return
    silodata=$(samba-tool domain auth silo view --name "$validsilo")
    echo "$silodata" | less
  } || {
    dialog --title "ERROR" --msgbox "Silo invalido!" 7 25
  }
}

}

function show_silos {
dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os Silos! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
[ $? -ne 0 ] && return
silolist=$(samba-tool domain auth silo list)
echo "$silolist" | less
}

function create_silos {
validsilo=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do silo" 0 0 2>&1 > /dev/tty)
[ $? -ne 0 ] && return
[ -z "$validsilo" ] && {
  dialog --title "ERRO" --msgbox "Silo nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool domain auth silo list | grep -x "$validsilo")
  [ "$repeated" = "$validsilo" ] && {
    dialog --title "ERROR" --msgbox "Silo $validsilo ja existe!" 7 25
  } || {
    samba-tool domain auth silo create --name "$validsilo"
    dialog --title "Informacao" --msgbox "Silo $validsilo criado com sucesso!" 7 25
  }
}

}

function list_usr_silo {
validsilo=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do silo" 0 0 2>&1 > /dev/tty)
[ $? -ne 0 ] && return
[ -z "$validsilo" ] && {
  dialog --title "ERRO" --msgbox "Silo nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool domain auth silo list | grep -x "$validsilo")
  [ "$repeated" = "$validsilo" ] && {
    dialog --title "$ttitle" --backtitle "Listagem de Grupos" --msgbox "Pressione Enter para visualizar os Usuarios! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 0 0
    silomembers=$(samba-tool domain auth silo member list --name "$validsilo")
    echo "$silomembers" | less
  } || {
    dialog --title "ERRO" --msgbox "Silo invalido!" 8 40
    }
}

}


function add_usr_silo {
validusr=$(dialog --title "$ttitle" --backtitle "Promover Usuario a um Silo" --inputbox "Insira o nome de Usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  validsilo=$(dialog --title "$ttitle" --backtitle "Promover Usuario a um Silo" --inputbox "Insira o nome do Silo" 0 0 2>&1 > /dev/tty)
  [ -z "$validsilo" ] && {
    dialog --title "ERRO" --msgbox "Silo nao pode ficar em branco!" 8 40
  } || {
    repeated=$(samba-tool user list | grep -x "$validusr")
    [ "$repeated" = "$validusr" ] && {
    repeated2=$(samba-tool domain auth silo list | grep -x "$validsilo")
    [ "$repeated2" = "$validsilo" ] && {
      samba-tool domain auth silo member add --name "$validsilo" --member "$validusr"
      dialog --title "Informacao" --msgbox "O usuario $validusr foi promovido ao silo $validsilo!" 8 40
    } || {
      dialog --title "ERROR" --msgbox "Silo invalido!" 7 25
    }
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
  }
}

}

function rm_usr_silo {
validusr=$(dialog --title "$ttitle" --backtitle "Remover Usuario a um Silo" --inputbox "Insira o nome de Usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  validsilo=$(dialog --title "$ttitle" --backtitle "Remover Usuario a um Silo" --inputbox "Insira o nome do Silo" 0 0 2>&1 > /dev/tty)
  [ -z "$validsilo" ] && {
    dialog --title "ERRO" --msgbox "Silo nao pode ficar em branco!" 8 40
  } || {
    repeated=$(samba-tool user list | grep -x "$validusr")
    [ "$repeated" = "$validusr" ] && {
    repeated2=$(samba-tool domain auth silo list | grep -x "$validsilo")
    [ "$repeated2" = "$validsilo" ] && {
      samba-tool domain auth silo member remove --name "$validsilo" --member "$validusr"
      dialog --title "Informacao" --msgbox "O usuario $validusr foi removido do silo $validsilo!" 8 40
    } || {
      dialog --title "ERROR" --msgbox "Silo invalido!" 7 25
    }
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
  }
}

}

function rm_silo {
validsilo=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do silo" 0 0 2>&1 > /dev/tty)
[ $? -ne 0 ] && return
[ -z "$validsilo" ] && {
  dialog --title "ERRO" --msgbox "Silo nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool domain auth silo list | grep -x "$validsilo")
  [ "$repeated" = "$validsilo" ] && {
    dialog --title 'Confirmacao' --backtitle 'Exclusao de Silo' --yesno 'Deseja excluir este silo?' 0 0
    [ $? = 0 ] && {
      samba-tool domain auth silo delete --name "$validsilo"
      dialog --title "Informacao" --msgbox "Silo $validsilo excluido com sucesso!" 7 25
    } || {
      echo "a" > /dev/null
      }
  } || {
    dialog --title "ERROR" --msgbox "Silo invalido!" 7 25
  }
}

}

function getacls0 {
VALUE0=$(dialog --stdout --backtitle "Use as setas para navegar nos diretorios abaixo, use ESPACO 2x para confirmar uma pasta!" --title "Get ACL" --dselect "/mnt" 15 40)
[ $? -ne 0 ] && return
Pathtemp0=$(echo "$VALUE0" | sed -n 1p)

acl00=$(samba-tool ntacl get --as-sddl "$Pathtemp0")
echo "$acl00" | tee /tmp/acl01 >/dev/null
echo "$Pathtemp0" | tee /tmp/pathtemp00 >/dev/null

dialog --title "Confirmacao" --backtitle "Informacao" --msgbox "As seguintes ACLs da pasta \n$Pathtemp0\nforam coletadas: \n\n$acl00" 14 70
}

function setacls0 {
acl00="$(cat /tmp/acl01)"
pathtempacl0="$(cat /tmp/pathtemp00)"

dialog --title "Confirmacao" --backtitle "Informacao" --msgbox "As seguintes ACLs coletadas da pasta previamente definida\n$pathtempacl0\nserao utilizadas: \n\n$acl00" 12 70

checkpathfolder

VALUE00=$(dialog --stdout --backtitle "Use as setas para navegar nos diretorios abaixo, use ESPACO 2x para confirmar uma pasta!" --title "Set Folder" --dselect "$PathFolder0" 15 40)
[ $? -ne 0 ] && return
PathFolder0new=$(echo "$VALUE00" | sed -n 1p)

samba-tool ntacl set "$acl00" "$PathFolder0new"
echo "$PathFolder0new"| tee /tmp/path01 >/dev/null

dialog --title "Confirmacao" --backtitle "Informacao" --msgbox "A pasta \n$PathFolder0new\nrecebeu as seguintes ACLs: \n\n$acl00\n\nficando com as mesmas permissoes da pasta \n$pathtempacl0!" 16 70

changemoreacls
}

function changemoreacls {
  dialog --title 'Confirmacao' --backtitle 'Informacao' --yesno 'Deseja trocar a ACL de outra pasta?' 0 0
  [ $? = 0 ] && {
  acl00="$(cat /tmp/acl01)"
  PathFolder0="$(cat /tmp/path01)"
  pathtempacl0="$(cat /tmp/pathtemp00)"

  VALUE00=$(dialog --stdout --backtitle "Use as setas para navegar nos diretorios abaixo, use ESPACO 2x para confirmar uma pasta!" --title "Set Folder" --dselect "$PathFolder0" 15 40)
  [ $? -ne 0 ] && return
  PathFolder0new=$(echo "$VALUE00" | sed -n 1p)

  echo "$PathFolder0new"| tee /tmp/path01 >/dev/null
  samba-tool ntacl set "$acl00" "$PathFolder0new"

  dialog --title "Confirmacao" --backtitle "Informacao" --msgbox "A pasta \n$PathFolder0new\nrecebeu as seguintes ACLs: \n\n$acl00\n\nficando com as mesmas permissoes da pasta \n$pathtempacl0!" 16 70

  changemoreacls
  }
}

function checkpathfolder {
  PathFolder0="$(cat /tmp/path01)"

  [ "$PathFolder0" = "" ] && {
    PathFolder0="/mnt"
  } || {
    echo "." >/dev/null
  }
}

function force_msi_w10 {
dpkg --list | grep msitools && {

dialog --title 'Confirmacao' --backtitle 'PODEM OCORRER IMPREVISTOS COM AS REGRAS DE GPO PREVIAMENTE DEFINIDAS!' --yesno 'Deseja mesmo trocar toda a estrutura ADMX para W10?' 0 0
  [ $? = 0 ] && {

wget -O w10admx.msi "$admxw10" \
    && msiextract -C /msifiles/ w10admx.msi

rm -R /var/lib/samba/sysvol/$DOMAIN/Policies/PolicyDefinitions

samba-tool gpo admxload -U Administrator --admx-dir="/msifiles/PolicyDefinitions/"

echo ""
read -p "As regras do Windows 10 foram carregadas. Ignore as mensagens de erro acima. Pressione Enter para continuar!"
  } || {
    echo "." > /dev/null
  }
} || {
clear
echo "Pacote MSITOOLS nao encontrado!"
sleep 3
}
}

function force_msi_w11 {
dpkg --list | grep msitools && {

dialog --title 'Confirmacao' --backtitle 'PODEM OCORRER IMPREVISTOS COM AS REGRAS DE GPO PREVIAMENTE DEFINIDAS!' --yesno 'Deseja mesmo trocar toda a estrutura ADMX para W11?' 0 0
  [ $? = 0 ] && {

wget -O w11admx.msi "$admxw11" \
    && mkdir /msifiles \
    && msiextract -C /msifiles/ w11admx.msi

rm -R /var/lib/samba/sysvol/$DOMAIN/Policies/PolicyDefinitions

mv /msifiles/Program\ Files/Microsoft\ Group\ Policy/Windows\ 11\ September\ 2022\ Update\ \(22H2\)/PolicyDefinitions/ /msifiles/PolicyDefinitions/

samba-tool gpo admxload -U Administrator --admx-dir="/msifiles/PolicyDefinitions/"

echo ""
read -p "As regras do Windows 11 foram carregadas. Ignore as mensagens de erro acima. Pressione Enter para continuar!"
  } || {
    echo "." > /dev/null
  }
} || {
clear
echo "Pacote MSITOOLS nao encontrado!"
sleep 3
}
}

function active_shares {
dialog --title "$ttitle" --backtitle "Status de Compartilhamentos Ativos" --msgbox "Pressione Enter para visualizar! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
[ $? -ne 0 ] && return
active_sh=$(net status shares)
echo "$active_sh" | less
}

function active_sessions {
dialog --title "$ttitle" --backtitle "Status de Sessoes Ativas" --msgbox "Pressione Enter para visualizar! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
[ $? -ne 0 ] && return
active_se=$(net status sessions)
echo "$active_se" | less
}

function show_ous {
dialog --title "$ttitle" --backtitle "Lista de OUs" --msgbox "Pressione Enter para visualizar as OUs! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
[ $? -ne 0 ] && return
oulst=$(samba-tool ou list)
echo "$oulst" | less
}

function create_ou {
validou=$(dialog --title "$ttitle" --backtitle "Criando uma OU" --inputbox "Insira o nome da OU" 0 0 2>&1 > /dev/tty)
[ -z "$validou" ] && {
  dialog --title "ERRO" --msgbox "OU nao pode ficar em branco!" 8 40
} || {
   repeated=$(samba-tool ou list | grep -x OU="$validou")
  [ "$repeated" = "OU=$validou" ] && {
    dialog --title "Informacao" --msgbox "A OU=$validou ja existe!" 8 40
  } || {
    samba-tool ou create OU="$validou"
    dialog --title "Informacao" --msgbox "OU=$validou criada com sucesso!" 7 25
    }
  }
}

function mv_user_ou {
validusr=$(dialog --title "$ttitle" --backtitle "Mover Usuario para OU" --inputbox "Insira o nome de Usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  validou=$(dialog --title "$ttitle" --backtitle "Mover Usuario para OU" --inputbox "Insira o nome da OU" 0 0 2>&1 > /dev/tty)
  [ -z "$validou" ] && {
    dialog --title "ERRO" --msgbox "OU nao pode ficar em branco!" 8 40
  } || {
    repeated=$(samba-tool user list | grep -x "$validusr")
    [ "$repeated" = "$validusr" ] && {
    repeated2=$(samba-tool ou list | grep -x OU="$validou")
      [ "$repeated2" = "OU=$validou" ] && {
        samba-tool user move "$validusr" OU="$validou"
        dialog --title "Informacao" --msgbox "O usuario $validusr foi movido para a OU=$validou!" 8 40
      } || {
        dialog --title "ERROR" --msgbox "OU invalida!" 7 25
        }
    } || {
      dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
      }
    }
  }
}

function mv_group_ou {
validgrp=$(dialog --title "$ttitle" --backtitle "Mover Grupo para OU" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
[ -z "$validgrp" ] && {
  dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
} || {
  validou=$(dialog --title "$ttitle" --backtitle "Mover Grupo para OU" --inputbox "Insira o nome da OU" 0 0 2>&1 > /dev/tty)
  [ -z "$validou" ] && {
    dialog --title "ERRO" --msgbox "OU nao pode ficar em branco!" 8 40
  } || {
    repeated=$(samba-tool group list | grep -x "$validgrp")
    [ "$repeated" = "$validgrp" ] && {
    repeated2=$(samba-tool ou list | grep -x OU="$validou")
      [ "$repeated2" = "OU=$validou" ] && {
        samba-tool group move "$validgrp" OU="$validou"
        dialog --title "Informacao" --msgbox "O grupo $validgrp foi movido para a OU=$validou!" 8 40
      } || {
        dialog --title "ERROR" --msgbox "OU invalida!" 7 25
        }
    } || {
      dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
      }
    }
  }
}

function rm_ou {
validou=$(dialog --title "$ttitle" --backtitle "Excluindo uma OU" --inputbox "Insira o nome da OU:" 0 0 2>&1 > /dev/tty)
[ -z "$validou" ] && {
  dialog --title "ERRO" --msgbox "OU nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool ou list | grep -x OU="$validou")
  [ "$repeated" = "OU=$validou" ] && {
    dialog --title 'Confirmacao' --backtitle 'Exclusao de OU' --yesno 'Deseja excluir esta OU?' 0 0
    [ $? = 0 ] && {
      samba-tool ou delete OU="$validou"
      repeated2=$(samba-tool ou list | grep -x OU="$validou")
      [ "$repeated2" = "OU=$validou" ] && {
        dialog --title "Informacao" --msgbox "A OU=$validou possui Objetos e nao foi removida!" 8 40
      } || {
        dialog --title "Informacao" --msgbox "A OU=$validou foi removida com sucesso!" 7 25
      }
    } || {
      echo "a" > /dev/null
      }
  } || {
    dialog --title "Informacao" --msgbox "A OU=$validou nao foi encontrada!" 8 40
    }
  }
}

function list_obj_ou {
validou=$(dialog --title "$ttitle" --backtitle "Objetos de uma OU" --inputbox "Insira o nome da OU" 0 0 2>&1 > /dev/tty)
[ -z "$validou" ] && {
  dialog --title "ERRO" --msgbox "OU nao pode ficar em branco!" 8 40
} || {
   repeated=$(samba-tool ou list | grep -x OU="$validou")
  [ "$repeated" = "OU=$validou" ] && {
    dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os Objetos! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
    [ $? -ne 0 ] && return
    oubjects=$(samba-tool ou listobjects OU="$validou")
    echo "$oubjects" | less
  } || {
    dialog --title "Informacao" --msgbox "OU=$validou invalida!" 7 25
    }
  }
}

function show_users {
dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os Usuarios! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
[ $? -ne 0 ] && return
usrlst=$(samba-tool user list)
echo "$usrlst" | less
}

function show_groups {
dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os Grupos! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
[ $? -ne 0 ] && return
grplist=$(samba-tool group list)
echo "$grplist" | less
}

function create_user {
VALUE1="joao_naves"
VALUE2="Joao Naves"
VALUE3="A12345d"

VALUE0=$(dialog --ok-label "Criar"  --backtitle "$bktitle" --title "Adicionar Usuario" --form "Preencha todos os campos! \nAtento na complexidade da senha!" 0 0 0 \
"Usuario: " 1 1 "$VALUE1" 1 10 34 0 \
"Exibicao:" 2 1 "$VALUE2" 2 10 34 0 \
"Senha:" 3 1 "$VALUE3" 3 10 34 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && return
validusr1=$(echo "$VALUE0" | sed -n 1p)
validsur1=$(echo "$VALUE0" | sed -n 2p)
validpss1=$(echo "$VALUE0" | sed -n 3p)
[ -z "$validpss1" ] || [ -z "$validusr1" ] || [ -z "$validsur1" ] && {
  dialog --title "ERRO" --msgbox "Nao deixe nenhum campo vazio!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr1")
  repeated2=$(samba-tool group list | grep -x "$validusr1")
  [ "$repeated" = "$validusr1" ] || [ "$repeated2" = "$validusr1" ] && {
    dialog --title "Informacao" --msgbox "Conflito detectado! \n\nO usuario $validusr1 ja existe!" 8 40
  } || {
    dialog --title 'Politica de Senha' --backtitle 'Configuracao de Senha' --yesno "$validusr1 deve trocar essa senha ao logar?" 0 0
    [ $? = 0 ] && {
      samba-tool user create --must-change-at-next-login "$validusr1" "$validpss1" --surname="$validsur1"
      check_user_creation
    } || {
      samba-tool user create "$validusr1" "$validpss1" --surname="$validsur1"
      check_user_creation
    }
  }
}

}

function check_user_creation {
  checkusr00=$(samba-tool user list | grep -x "$validusr1")
  [ "$checkusr00" = "$validusr1" ] && {
    dialog --title "Informacao" --msgbox "\nUsuario $validusr1 criado e configurado com sucesso!" 8 40
  } || {
    dialog --title "ERRO" --msgbox "O usuario NAO foi criado porque: \n\nJa existe $validusr1 e/ou $validsur1. \n\n OU \n\nNao atendeu os requisitos minimos de senha: \n\n-Minimo 7 caracteres. \n-Contenha Letras e Numeros \n-Pelo menos 1 (uma) letra MAIUSCULA." 17 60
  }
}

function change_pass {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERROR" --msgbox "Usuario nao pode ficar em branco!" 7 25
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    validpss=$(dialog --title "$ttitle" --backtitle "Trocar a senha de usuario do Dominio" --insecure --passwordbox 'Crie uma nova senha para o usuario' 0 0 2>&1 > /dev/tty )
    [ -z "$validpss" ] && {
      dialog --title "ERROR" --msgbox "Senha nao pode ficar em branco!" 7 25
    } || {
      samba-tool user setpassword "$validusr" --newpassword="$validpss"
      dialog --title "Informacao" --msgbox "Senha de $validusr trocada com sucesso!" 8 40
      }
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function blk_user {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    samba-tool user disable "$validusr"
    dialog --title "Informacao" --msgbox "Usuario $validusr bloqueado com sucesso!" 7 25
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function ublk_user {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    samba-tool user enable "$validusr"
    dialog --title "Informacao" --msgbox "Usuario $validusr desbloqueado com sucesso!" 7 25
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function rm_user {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    dialog --title 'Confirmacao' --backtitle 'Exclusao de Usuario' --yesno 'Deseja excluir este usuario?' 0 0
    [ $? = 0 ] && {
      samba-tool user delete "$validusr"
      dialog --title "Informacao" --msgbox "Usuario $validusr excluido com sucesso!" 7 25
    } || {
      echo "a" > /dev/null
      }
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
  }
}

}

function create_group {
validgrp=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
[ -z "$validgrp" ] && {
  dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validgrp")
  repeated2=$(samba-tool group list | grep -x "$validgrp")
  [ "$repeated" = "$validgrp" ] || [ "$repeated2" = "$validgrp" ] && {
    dialog --title "Informacao" --msgbox "Conflito detectado! O grupo $validgrp nao sera criado!" 8 40
  } || {
    samba-tool group create "$validgrp"
    dialog --title "Informacao" --msgbox "Grupo $validgrp criado com sucesso!" 7 25
    }
}

}

function add_user_group {
validusr=$(dialog --title "$ttitle" --backtitle "Adicionar Usuario a um Grupo" --inputbox "Insira o nome de Usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  validgrp=$(dialog --title "$ttitle" --backtitle "Adicionar Usuario a um Grupo" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
  [ -z "$validgrp" ] && {
    dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
  } || {
    repeated=$(samba-tool user list | grep -x "$validusr")
    [ "$repeated" = "$validusr" ] && {
    repeated2=$(samba-tool group list | grep -x "$validgrp")
      [ "$repeated2" = "$validgrp" ] && {
        samba-tool group addmembers "$validgrp" "$validusr"
        dialog --title "Informacao" --msgbox "O usuario $validusr foi adicionado ao grupo $validgrp!" 8 40
      } || {
        dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
        }
    } || {
      dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
      }
    }
  }
}

function add_group_group {
validgrp1=$(dialog --title "$ttitle" --backtitle "Adicionar Grupo 1 a um Grupo 2" --inputbox "Insira o nome do Grupo 1" 0 0 2>&1 > /dev/tty)
[ -z "$validgrp1" ] && {
  dialog --title "ERRO" --msgbox "Grupo 1 nao pode ficar em branco!" 8 40
} || {
  validgrp2=$(dialog --title "$ttitle" --backtitle "Adicionar Grupo 1 a um Grupo 2" --inputbox "Insira o nome do Grupo 2" 0 0 2>&1 > /dev/tty)
  [ -z "$validgrp2" ] && {
    dialog --title "ERRO" --msgbox "Grupo 2 nao pode ficar em branco!" 8 40
  } || {
    repeated=$(samba-tool group list | grep -x "$validgrp1")
    [ "$repeated" = "$validgrp1" ] && {
    repeated2=$(samba-tool group list | grep -x "$validgrp2")
      [ "$repeated2" = "$validgrp2" ] && {
        samba-tool group addmembers "$validgrp2" "$validgrp1"
        dialog --title "Informacao" --msgbox "O grupo $validgrp1 foi adicionado ao grupo $validgrp2!" 8 40
      } || {
        dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
        }
    } || {
      dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
      }
    }
  }
}

function rm_group_group {
validgrp1=$(dialog --title "$ttitle" --backtitle "Remover Grupo 1 de um Grupo 2" --inputbox "Insira o nome do Grupo 1" 0 0 2>&1 > /dev/tty)
[ -z "$validgrp1" ] && {
  dialog --title "ERRO" --msgbox "Grupo 1 nao pode ficar em branco!" 8 40
} || {
  validgrp2=$(dialog --title "$ttitle" --backtitle "Remover Grupo 1 de um Grupo 2" --inputbox "Insira o nome do Grupo 2" 0 0 2>&1 > /dev/tty)
  [ -z "$validgrp2" ] && {
    dialog --title "ERRO" --msgbox "Grupo 2 nao pode ficar em branco!" 8 40
  } || {
    repeated=$(samba-tool group list | grep -x "$validgrp1")
    [ "$repeated" = "$validgrp1" ] && {
    repeated2=$(samba-tool group list | grep -x "$validgrp2")
      [ "$repeated2" = "$validgrp2" ] && {
        samba-tool group removemembers "$validgrp2" "$validgrp1"
        dialog --title "Informacao" --msgbox "O grupo $validgrp1 foi removido do grupo $validgrp2!" 8 40
      } || {
        dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
        }
    } || {
      dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
      }
    }
  }
}

function show_user_group {
validgrp=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
[ -z "$validgrp" ] && {
  dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool group list | grep -x "$validgrp")
  [ "$repeated" = "$validgrp" ] && {
    dialog --title "$ttitle" --backtitle "Listagem de Membros" --msgbox "Pressione Enter para visualizar os Grupos! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 0 0
    usrgrps=$(samba-tool group listmembers "$validgrp")
    echo "$usrgrps" | less
  } || {
    dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
  }
}

}

# Copiar os grupos de um usuario
function copy_group {
validusr1=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Usuario IN" 0 0 2>&1 > /dev/tty)
validusr2=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Usuario OUT" 0 0 2>&1 > /dev/tty)
[ -z "$validusr1" ] || [ -z "$validusr2" ] && {
  dialog --title "ERRO" --msgbox "Usuario IN (ou OUT) em branco! Corrija por favor." 8 40
  } || {
    repeated1=$(samba-tool user list | grep -x "$validusr1")
    repeated2=$(samba-tool user list | grep -x "$validusr2")
    [ "$repeated1" = "$validusr1" ] && [ "$repeated2" = "$validusr2" ] && {
      grpsusr=$(samba-tool user getgroups "$validusr1")
      IFS=$'\n' read -d '' -r -a groups <<< "$(echo "$grpsusr" | awk -v RS='\"' 'NR % 2 == 0 {print "\"" $0 "\""} NR % 2 == 1 {print $0}')"
      for groupa in "${groups[@]}"; do
        clear
        echo ""
        echo "Adicionando ao grupo $groupa o usuario $validusr2"
        echo ""
        samba-tool group addmembers "$groupa" "$validusr2"
        sleep 1
        clear
      done
    } || {
      dialog --title "ERROR" --msgbox "Usuario(s) invalido(s)!" 7 25
    }
  }
}

# Copiar os membros de um grupo
function copy_user {
validgrp1=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Grupo IN" 0 0 2>&1 > /dev/tty)
validgrp2=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Grupo OUT" 0 0 2>&1 > /dev/tty)
[ -z "$validgrp1" ] || [ -z "$validgrp2" ] && {
  dialog --title "ERRO" --msgbox "Grupo (ou OUT) em branco! Corrija por favor." 8 40
  } || {
    repeated1=$(samba-tool group list | grep -x "$validgrp1")
    repeated2=$(samba-tool group list | grep -x "$validgrp2")
    [ "$repeated1" = "$validgrp1" ] && [ "$repeated2" = "$validgrp2" ] && {
      usrgrps=$(samba-tool group listmembers "$validgrp1")
      IFS=$'\n' read -d '' -r -a userss <<< "$(echo "$usrgrps" | awk -v RS='\"' 'NR % 2 == 0 {print "\"" $0 "\""} NR % 2 == 1 {print $0}')"
      for userss1 in "${userss[@]}"; do
        clear
        echo ""
        echo "Adicionando o membro $userss1 ao grupo $validgrp2"
        echo ""
        samba-tool group addmembers "$validgrp2" "$userss1"
        sleep 1
        clear
      done
    } || {
      dialog --title "ERROR" --msgbox "Grupo(s) invalido(s)!" 7 25
    }
  }
}

function rm_user_group {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  validgrp=$(dialog --title "$ttitle" --backtitle "Remover Usuario de um Grupo" --inputbox "Insira o nome do Grupo" 0 0 2>&1 > /dev/tty)
  [ -z "$validgrp" ] && {
    dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
  } || {
    repeated=$(samba-tool user list | grep -x "$validusr")
    [ "$repeated" = "$validusr" ] && {
      repeated2=$(samba-tool group list | grep -x "$validgrp")
      [ "$repeated2" = "$validgrp" ] && {
        samba-tool group removemembers "$validgrp" "$validusr"
        dialog --title "Informacao" --msgbox "O usuario $validusr foi removido do grupo $validgrp!" 8 40
      } || {
        dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
      }
    } || {
      dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
      }
  }
}

}

function rm_group {
validgrp=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do grupo" 0 0 2>&1 > /dev/tty)
[ -z "$validgrp" ] && {
  dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool group list | grep -x "$validgrp")
  [ "$repeated" = "$validgrp" ] && {
    dialog --title 'Confirmacao' --backtitle 'Exclusao de Grupo' --yesno "Deseja excluir o grupo $validgrp?" 0 0
    [ $? = 0 ] && {
      samba-tool group delete "$validgrp"
      dialog --title "Informacao" --msgbox "Grupo $validgrp excluido com sucesso!" 7 25
    } || {
      echo "a" > /dev/null
      }
  } || {
    dialog --title "ERROR" --msgbox "Grupo invalido!" 7 25
  }
}

}

function expiracy_usr_pass {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    dialog --title 'Politica de Senha' --backtitle 'Configuracao de Senha' --yesno "A senha de $validusr nao deve mais expirar?" 0 0
    [ $? = 0 ] && {
      samba-tool user setexpiry "$validusr" --noexpiry
      dialog --title "Informacao" --msgbox "A senha de $validusr nao expira!" 8 40
    } || {
      echo "a" > /dev/null
      }
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function expiracy_global {
daystoexpire=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Defina quando TODAS AS senhas vao expirar, em dias:" 9 35 2>&1 > /dev/tty)
[ -z "$daystoexpire" ] && {
  dialog --title "ERRO" --msgbox "Os dias nao podem ficar em branco!" 8 40
} || {
  samba-tool domain passwordsettings set --max-pwd-age=$daystoexpire
  dialog --title "Confirmacao" --msgbox "Todos os usuarios devem trocar a senha em $daystoexpire dias!" 8 40
}

}

function expiracy_now {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    dialog --title 'Politica de Senha' --backtitle 'Configuracao de Senha' --yesno "O usuario $validusr deve trocar a senha imediatamente?" 0 0
    [ $? = 0 ] && {
      net sam set pwdmustchangenow $validusr yes
      dialog --title "Informacao" --msgbox "O usuario deve trocar a senha imediatamente!" 8 40
    } || {
      echo "a" > /dev/null
      }
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function expiracy_days {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    daystoexpire=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Defina quando a senha vai expirar, em dias" 0 0 2>&1 > /dev/tty)
    [ -z "$daystoexpire" ] && {
      dialog --title "ERRO" --msgbox "Os dias nao podem ficar em branco!" 8 40
    } || {
      samba-tool user setexpiry $validusr --days=$daystoexpire
      dialog --title "Confirmacao" --msgbox "O usuario $validusr devera trocar a senha em $daystoexpire dias!" 8 40
    }
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
  }
}

}

function show_group_user {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
    dialog --title "$ttitle" --backtitle "Listagem de Grupos" --msgbox "Pressione Enter para visualizar os Grupos! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 0 0
    grpsusr=$(samba-tool user getgroups "$validusr")
    echo "$grpsusr" | less
  } || {
    dialog --title "ERRO" --msgbox "Usuario invalido!" 8 40
    }
}

}

function search_user {
validusr1=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario. \n
Exemplos: joao, ou Admin" 9 40 2>&1 > /dev/tty)
[ $? -ne 0 ] && return
[ -z "$validusr1" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  usrdata=$(samba-tool user list | grep "$validusr1")
  clear
  dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os resultados! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
  [ $? -ne 0 ] && return
  echo "$usrdata" | less
}

}

function search_group {
validgrp1=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de grupo" 0 0 2>&1 > /dev/tty)
[ $? -ne 0 ] && return
[ -z "$validgrp1" ] && {
  dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
} || {
  grpdata=$(samba-tool group list | grep "$validgrp1")
  clear
  dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os resultados! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
  [ $? -ne 0 ] && return
  echo "$grpdata" | less
}

}

function check_user {
validusr1=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario. \n
Exemplo: joao_naves" 9 40 2>&1 > /dev/tty)
[ -z "$validusr1" ] && {
  dialog --title "ERRO" --msgbox "Usuario nao pode ficar em branco!" 8 40
} || {
  repeated2=$(samba-tool user list | grep "$validusr1")
  [ "$repeated2" = "$validusr1" ] && {
    dialog --title "Informacao" --msgbox "O usuario $validusr1 esta cadastrado!" 8 40
    clear
    dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os dados! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
    [ $? -ne 0 ] && return
    usrdata=$(samba-tool user show $validusr1)
    echo "$usrdata" | less
  } || {
    dialog --title "Informacao" --msgbox "O usuario $validusr1 nao foi encontrado neste servidor." 8 40
    }
}

}

function check_group {
validgrp1=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de grupo" 0 0 2>&1 > /dev/tty)
[ $? -ne 0 ] && return
[ -z "$validgrp1" ] && {
  dialog --title "ERRO" --msgbox "Grupo nao pode ficar em branco!" 8 40
} || {
  repeated3=$(samba-tool group list | grep "$validgrp1")
  [ "$repeated3" = "$validgrp1" ] && {
    dialog --title "Informacao" --msgbox "O grupo $validgrp1 esta cadastrado!" 8 40
    clear
    dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os dados! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
    [ $? -ne 0 ] && return
    grpdata=$(samba-tool group show $validgrp1)
    echo "$grpdata" | less
  } || {
    dialog --title "Informacao" --msgbox "O grupo $validgrp1 nao foi encontrado neste servidor." 8 40
    }
}

}

function domain_details {
smbv=$(samba --version)
domainv=$(samba-tool domain level show)
dialog --cr-wrap --title "Informaces encontradas" --backtitle "$bktitle" --msgbox "
Nome da Maquina: $HOSTNAME \n \n
Versao do SAMBA: $smbv \n \n
$domainv \n \n
" 0 0
}

function show_pass_policy {
  dialog --cr-wrap --title "Informaces encontradas" --backtitle "$bktitle" --msgbox  "$(samba-tool domain passwordsettings show)" 0 0
}

function smb_process {
  dialog --cr-wrap --title "Informaces encontradas" --backtitle "$bktitle" --msgbox  "$(samba-tool processes)" 0 0
}

function promote_user {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERROR" --msgbox "Usuario nao pode ficar em branco!" 7 25
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
      clear
      samba-tool group addmembers "Domain Admins" "$validusr"
      sleep 1
      samba-tool group addmembers "Schema Admins" "$validusr"
      sleep 1
      samba-tool group addmembers "Enterprise Admins" "$validusr"
      sleep 1
      samba-tool group addmembers "Group Policy Creator Owners" "$validusr"
      sleep 1
      samba-tool group addmembers "Administrators" "$validusr"
      sleep 1
      dialog --title "Informacao" --msgbox "Usuario $validusr se tornou administrador!" 8 40
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function demote_user {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERROR" --msgbox "Usuario nao pode ficar em branco!" 7 25
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
      clear
      samba-tool group removemembers "Domain Admins" "$validusr"
      sleep 1
      samba-tool group removemembers "Schema Admins" "$validusr"
      sleep 1
      samba-tool group removemembers "Enterprise Admins" "$validusr"
      sleep 1
      samba-tool group removemembers "Group Policy Creator Owners" "$validusr"
      sleep 1
      samba-tool group removemembers "Administrators" "$validusr"
      sleep 1
      dialog --title "Informacao" --msgbox "Usuario $validusr deixou de ser administrador!" 8 40
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function test_pass {
validusr=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome de usuario" 0 0 2>&1 > /dev/tty)
[ -z "$validusr" ] && {
  dialog --title "ERROR" --msgbox "Usuario nao pode ficar em branco!" 7 25
} || {
  repeated=$(samba-tool user list | grep -x "$validusr")
  [ "$repeated" = "$validusr" ] && {
      clear
      kinit "$validusr"
      echo ""
      read -p "Pressione Enter para continuar!"
  } || {
    dialog --title "ERROR" --msgbox "Usuario invalido!" 7 25
    }
}

}

function mv_pc_ou {
validpc=$(dialog --title "$ttitle" --backtitle "Mover Computador para OU" --inputbox "Insira o nome do Computador" 0 0 2>&1 > /dev/tty)
[ -z "$validpc" ] && {
  dialog --title "ERRO" --msgbox "Computador nao pode ficar em branco!" 8 40
} || {
  validou=$(dialog --title "$ttitle" --backtitle "Mover Computador para OU" --inputbox "Insira o nome da OU" 0 0 2>&1 > /dev/tty)
  [ -z "$validou" ] && {
    dialog --title "ERRO" --msgbox "OU nao pode ficar em branco!" 8 40
  } || {
    repeated=$(samba-tool computer list | grep -x "$validpc"\\$)
    [ "$repeated" = "$validpc"\$ ] && {
    repeated2=$(samba-tool ou list | grep -x OU="$validou")
      [ "$repeated2" = "OU=$validou" ] && {
        samba-tool computer move "$validpc" OU="$validou"
        dialog --title "Informacao" --msgbox "O Computador $validpc\$ foi movido para a OU=$validou!" 8 40
      } || {
        dialog --title "ERROR" --msgbox "OU invalida!" 7 25
        }
    } || {
      dialog --title "ERROR" --msgbox "Computador invalido!" 7 25
      }
    }
  }
}

function show_pcs {
dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os Computadores! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
[ $? -ne 0 ] && return
cmplist=$(samba-tool computer list)
echo "$cmplist" | less
}

function create_pc {
validpc=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Computador (sem o $)" 0 0 2>&1 > /dev/tty)
[ $? -ne 0 ] && return
[ -z "$validpc" ] && {
  dialog --title "ERRO" --msgbox "Computador nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool computer list | grep -x "$validpc"\\$)
  [ "$repeated" = "$validpc"\$ ] && {
    dialog --title "ERROR" --msgbox "Computador ja existe!" 7 25
  } || {
    samba-tool computer create "$validpc"
    dialog --title "Informacao" --msgbox "Computador $validpc\$ criado com sucesso!" 7 25
  }
}

}

function rm_pc {
validpc=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Computador (sem o $)" 0 0 2>&1 > /dev/tty)
[ $? -ne 0 ] && return
[ -z "$validpc" ] && {
  dialog --title "ERRO" --msgbox "Computador nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool computer list | grep -x "$validpc"\\$)
  [ "$repeated" = "$validpc"\$ ] && {
    dialog --title 'Confirmacao' --backtitle 'Exclusao de Computador' --yesno 'Deseja excluir este computador?' 0 0
    [ $? = 0 ] && {
      samba-tool computer delete "$validpc"\$
      dialog --title "Informacao" --msgbox "Computador $validpc\$ excluido com sucesso!" 7 25
    } || {
      echo "a" > /dev/null
      }
  } || {
    dialog --title "ERROR" --msgbox "Computador invalido!" 7 25
  }
}

}

function check_pc {
validpc=$(dialog --title "$ttitle" --backtitle "$bktitle" --inputbox "Insira o nome do Computador (sem o $)" 0 0 2>&1 > /dev/tty)
[ -z "$validpc" ] && {
  dialog --title "ERRO" --msgbox "Computador nao pode ficar em branco!" 8 40
} || {
  repeated=$(samba-tool computer list | grep -x "$validpc"\\$)
  [ "$repeated" = "$validpc"\$ ] && {
    dialog --title "Informacao" --msgbox "O computador "$validpc"\$ esta cadastrado!" 8 40
    clear
    dialog --title "$ttitle" --backtitle "$bktitle" --msgbox "Pressione Enter para visualizar os dados! Navegue com as setas para cima e para baixo. Para sair pressione 'q' !" 8 40
    [ $? -ne 0 ] && return
    pccdata=$(samba-tool computer show "$validpc"\$)
    echo "$pccdata" | less
  } || {
    dialog --title "ERROR" --msgbox "Computador invalido!" 7 25
  }
}

}

function share_tools {
  result=$(grep -rnw /etc/samba/external/smb.conf -e 'include' 2>/dev/null 1>/dev/null && echo sim || echo nao)
  [ $result = sim ] && {
    menu
  } || {
    dialog --title "ERRO" --msgbox "Sub-sistema INCLUDE nao encontrado para este Dominio! \n
O editor de pastas compartilhadas nao pode continuar. \n
Por favor, configure-o manualmente e tente novamente." 10 50
  }
}

function show_shared {
  setfolder="/etc/samba/external/smb.conf.d/"

  [ -d "$setfolder" ] && {
  files=()
  while IFS= read -r -d $'\0' file; do
    files+=("$file" "")
  done < <(find "$setfolder" -type f -name "*.conf" -print0)
    [ ${#files[@]} -eq 0 ] && {
      clear
      echo "Nenhuma configuracao encontrada em $setfolder"
      sleep 1
    } || {
      file=$(dialog --stdout --title "Escolha um compartilhamento para visualizar" --cancel-label "Voltar" --menu "Somente leitura. \nPara remover,
utilize o menu Excluir Compartilhamento!" 0 0 0 "${files[@]}")
      [ $? -ne 0 ] && return
      clear
      cat $file
      echo ""
      read -p "Pressione ENTER quando terminar de visualizar a configuracao!"
      show_shared
    } || {
      clear
      dialog --title "ERRO" --msgbox "Nenhum compartilhamento encontrado!" 5 40
    }
  }
}

# SHARED #

function create_shared {
VALUE1="nome_do_compartilhamento"
VALUE3="@grupo, usuario"
VALUE4="yes"
VALUE5="yes"

  VALUE0=$(dialog --help-button --help-label 'Dica' --ok-label "Criar" --title "Compartilhamento Comum" --form "Separe os grupos e/ou usuarios com virgula. \n
Se a pasta nao existe ela sera criada. \n
Use a Dica para achar a pasta!" 0 0 0 \
"Shr Name:" 1 1 "$VALUE1" 1 10 34 0 \
"     /mnt" 2 1 "$VALUE2" 2 10 34 0 \
"Grp Name:" 3 1 "$VALUE3" 3 10 34 0 \
"Writable:" 4 1 "$VALUE4" 4 10 34 0 \
"Browser.:" 5 1 "$VALUE5" 5 10 34 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

case $? in
   0) echo "." > /dev/null ;;
   1) return ;;
   2) dica0 ; return ;;
esac

  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  var3=$(echo "$VALUE0" | sed -n 3p)
  var4=$(echo "$VALUE0" | sed -n 4p)
  var5=$(echo "$VALUE0" | sed -n 5p)

[ -f /etc/samba/external/smb.conf.d/$var1.conf ] && {
    dialog --title "ERRO" --msgbox "ERRO: Um compartilhamento com este nome ja existe na rede! Ignorando." 7 40
  } || {
    if [[ $var1 = *" "* ]] || [[ $var2 = *" "* ]] || [[ $var1 = "" ]]; then
      dialog --title "ERRO" --msgbox "ERRO: Nao crie compartilhamentos com espacos nos nomes ou nomes vazios! Ignorando." 7 40
    else
      mkdir -p /mnt$var2
      tee /etc/samba/external/smb.conf.d/$var1.conf << EOF
[$var1]
path = /mnt$var2
valid users = $var3
admin users = $var3
writable = $var4
browsable = $var5
guest ok = no
create mask = 0777
force create mode = 0777
directory mask = 0777
force directory mode = 0777
EOF

      # Apply 777 but without -R flag!
      chmod 777 /mnt$var2

      revalid_shared
    fi
  }
}

# SYNC #

function create_sync {
VALUE1="nome_do_compartilhamento"
VALUE3="@Sync, @Desativar_Sync"
VALUE4="no"

  VALUE0=$(dialog --help-button --help-label 'Dica' --ok-label "Criar" --title "Compartilhamento para Sync Center" --form "Separe os grupos e/ou usuarios com virgula. \n
Se a pasta nao existir ela sera criada e ficara oculta. \n
A permissao da pasta sera do dono da mesma! \n
Use a Dica para achar a pasta!" 0 0 0 \
"Shr Name:" 1 1 "$VALUE1" 1 10 34 0 \
"     /mnt" 2 1 "$VALUE2" 2 10 34 0 \
"Grp Name:" 3 1 "$VALUE3" 3 10 34 0 \
"Browser.:" 4 1 "$VALUE4" 4 10 34 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

case $? in
   0) echo "." > /dev/null ;;
   1) return ;;
   2) dica0 ; return ;;
esac

  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  var3=$(echo "$VALUE0" | sed -n 3p)
  var4=$(echo "$VALUE0" | sed -n 4p)

[ -f /etc/samba/external/smb.conf.d/$var1.conf ] && {
    dialog --title "ERRO" --msgbox "ERRO: Um compartilhamento com este nome ja existe na rede! Ignorando." 7 40
  } || {
    if [[ $var1 = *" "* ]] || [[ $var2 = *" "* ]] || [[ $var1 = "" ]]; then
      dialog --title "ERRO" --msgbox "ERRO: Nao crie compartilhamentos com espacos nos nomes ou nomes vazios! Ignorando." 7 40
    else
      mkdir -p /mnt$var2
      tee /etc/samba/external/smb.conf.d/$var1.conf << EOF
[$var1]
path = /mnt$var2
valid users = $var3
browsable = $var4
writable = yes
guest ok = no
create mask = 0700
force create mode = 0700
directory mask = 0700
force directory mode = 0700
EOF

      # Apply 777 but without -R flag!
      chmod 777 /mnt$var2

      revalid_shared
    fi
  }
}

# REMOVE #

function remove_shared {
VALUE1="nome_do_compartilhamento"

VALUE0=$(dialog --ok-label "Ok" --title "Remover Compartilhamento" --form "Nome do Compartilhamento a ser removido. \n
Seus dados nao sao apagados, apenas o compartilhamento sera removido!" 0 0 0 \
"ShrName:" 1 1 "$VALUE1" 1 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

    case $? in
      0) echo "." > /dev/null ;;
      1) echo "." > /dev/null ;;
    esac

  varaqui=$(echo "$VALUE0" | sed -n 1p)

  [ -f "/etc/samba/external/smb.conf.d/$varaqui.conf" ] || {
    dialog --title "ERRO" --msgbox "O compartilhamento nao existe!" 8 40
    return
  } && {
    dialog --title 'Confirmacao' --backtitle 'Remover Compartilhamento' --yesno 'Deseja excluir este compartilhamento?' 0 0
    [ $? = 0 ] && {
      rm /etc/samba/external/smb.conf.d/$varaqui.conf
      revalid_shared
      dialog --title "Confirmacao" --msgbox "Compartilhamento removido!" 5 40
    } || {
      echo "." > /dev/null
    }
  }
}

function revalid_shared {
  ls /etc/samba/external/smb.conf.d/* | sed -e 's/^/include = /' > /etc/samba/external/includes.conf
  smbcontrol all reload-config
}

function dica0 {
  VALUE2=$(dialog --stdout --backtitle "Use as setas para navegar nos diretorios abaixo, use ESPACO 2x para confirmar uma pasta!" --title "Escolha a pasta alvo!" --dselect "/mnt" 15 40 | tail -c +5)
}

function faq_help {
clear

echo " "
echo "CUIDADO:"
echo "Se usar uma versao modificada do Windows, tipo o ReviCC ou W10Lite, tem uma grande chance de causar problemas/imprevistos!"
echo " "
echo "PROBLEMA: Nao consigo adicionar usuarios ou grupos ao Filtro de Seguranca!"
echo "SOLUCAO: Sair do Dominio e reingressar a maquina, pois esta perdeu a relacao de confianca com o AD. (ou aguarde umas boas horas o AD reverberar!)"
echo " "
echo "PROBLEMA: Permissoes ACLs incorretas para determinada pasta na rede; ou o compartilhamento foi feito com admin_users=yes; ou ainda nao quer funcionar SYNC CENTER."
echo "SOLUCAO: Crie uma nova pasta compartilhada estruturada temporaria com outro nome, crie pastas la dentro baseado em cada usuario; e copie as FACLs entre elas."
echo "Via SSH nao se esqueca de que a pasta /mnt/pasta_compartilhada sempre 777 e subpastas 0700."
echo ""
}

# Start all!
main_menu

# If any error...
exit 1

# COMMENTS if needed:
# EDITOR=nano ldbedit -H /var/lib/samba/private/sam.ldb --cross-ncs "(objectClass=nTDSDSA)" msDS-Behavior-Version
