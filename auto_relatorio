#!/bin/bash

setfolder="/srv/relatorios"

# ============================================================================ #

function relat0 {
var0=$(dialog --title 'Relatórios' --cancel-label "Voltar" --backtitle "Gerador de Relatórios v1.0" --menu " " 0 0 0 \
0 'Full!' \
1 'Atualizacao de Sistema' \
2 'Gerar SMART_DUMP' \
3 'Manutencao do Dominio' \
4 'Manutencao do PiHole' \
5 'Status Pentesting' \
6 'SysLogs do SAMBA' \
7 'Status dos Backups' \
8 'Relat. Custom' \
9 'CUIDADO: Cabecalho' \
X 'Voltar' 2>&1 > /dev/tty )
[ $? -ne 0 ] && start
case "$var0" in
0) relatfull ; relat0 ;;
1) upgrade0 ; relat0 ;;
2) smartdump0 ; relat0 ;;
3) domain0 ; relat0 ;;
4) pihole0 ; relat0 ;;
5) pentest0 ; relat0 ;;
6) syslog0 ; relat0 ;;
7) backup0 ; relat0 ;;
8) custom0 ; relat0 ;;
9) cabecalho ; relat0 ;;
X) echo a > /dev/null ;;
esac
}

function relatfull {
  cabecalho
  upgrade0
  smartdump0
  domain0
  pihole0
  pentest0
  syslog0
  backup0
  custom0
  relat0
}

function cabecalho {
  dateonly=$(date +"%m/%Y")
  clear
  echo "RELATÓRIO MENSAL DE PRESTAÇÃO DE SERVIÇOS DE INFORMÁTICA
Conforme estipulado em contrato mensal de prestação de serviços na área de
informática, segue abaixo o relatório de suporte, manutenções preventivas e
corretivas executados no período de $dateonly:
" | tee "$file"
  cat $file
  sleep 1
}

function upgrade0 {
  datetime=$(date +"%d/%m - %H:%m:%S:")
  export DEBIAN_FRONTEND=noninteractive
  clear
  apt update -y &&
  apt upgrade -y &&
  apt autoremove -y &&
  echo "$datetime Nesta data o servidor foi atualizado e está em dia com a segurança digital.
" | tee -a "$file"
}

function smartdump0 {
  datetime=$(date +"%d/%m - %H:%m:%S:")
  clear
  smartdump
  cat /home/administrador/SMART_DUMP
  enter0
  echo "$datetime Foi realizada a verificação da saúde dos discos rígidos.
Mais informações no anexo SMART_DUMP do e-mail.
" | tee -a "$file"
}

function backup0 {
  datetime=$(date +"%d/%m - %H:%m:%S:")
  clear
  df -h
  enter0

  clear
  journalctl -b 0 | grep rsnap | tail -n 5
  enter0

  clear
  journalctl -b 0 | grep rsync | tail -n 5
  enter0

  clear
  journalctl -b 0 | grep rclone | tail -n 5
  enter0

  clear
  destiny=$(sed -n '2p' /srv/containers/scripts/config/backupcont)
  ls -la $destiny; read
  enter0

  echo "$datetime Foi realizada a verificação das rotinas de backup do servidor.
O backup em nuvem, se existente, também foi verificado.
" | tee -a "$file"
}

function domain0 {
  datetime=$(date +"%d/%m - %H:%m:%S:")
  clear
  docker exec dominio samba-tool ntacl sysvolreset -U Administrator
  enter0

  clear
  docker exec dominio samba-tool dbcheck --cross-ncs --reset-well-known-acls --fix --yes
  enter0

  echo "$datetime Foi realizada a verificação da integridade do Controlador de Domínio.
" | tee -a "$file"
}

function pihole0 {
  datetime=$(date +"%d/%m - %H:%m:%S:")
  clear

  for i in $(find /srv/containers -maxdepth 1 -name '*pihole*'); do
    i2=$(basename "$i")
    docker exec "$i2" bash -c "pihole -g -r recover"
    docker exec "$i2" bash -c "rm /etc/pihole/pihole-FTL.db"
    sleep 1
    docker restart "$i2"
  done

  enter0

  echo "$datetime Nesta data o(s) serviço(s) de DNS e bloqueios de sites foi(foram) atualizado(s) e as listas de bloqueio
foram revalidadas!
" | tee -a "$file"
}

function pentest0 {
  [ -d "/srv/containers/pentest" ] && {
    datetime=$(date +"%d/%m - %H:%m:%S:")

    [ -f /srv/containers/pentest/Pentests/Ransomware_Detectado ] && {
      clear
      echo ""
      cat /srv/containers/pentest/Pentests/Ransomware_Detectado
      enter0
    } || {
      echo "." > /dev/null
    }

    var6=$(sed -n '6p' /srv/containers/pentest/Information)
    clear

    for i in $(find /srv/containers/pentest/Pentests/Likely_Vulnerable -name '*1*'); do
      clear
      cat "$i"
      enter0
    done

    echo "$datetime Nenhum novo equipamento vulnerável detectado na rede.
Por enquanto nenhum equipamento cujos testes sejam pertinentes de serem notificados.
" | tee -a "$file"
  } || {
    echo "." > /dev/null
  }
}

function syslog0 {
  datetime=$(date +"%d/%m - %H:%m:%S:")
  clear
  cat /srv/containers/*/log/syslog | grep renameat | tail -n 5
  enter0

  echo "$datetime Foi realizada a verificação da integridade dos Logs de Eventos
das pastas da rede e se os registros de uso, dos compartilhamentos, estão em dia.
" | tee -a "$file"
}

function custom0 {
  datetime=$(date +"%d/%m - %H:%m:%S:")
  VALUE0=$(dialog --ok-label "Criar" --title "Novo Relatório" --form "Customizado" 8 40 0 \
"Relat:" 1 1 "$VALUE1" 1 8 100 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && return
var1=$(echo "$VALUE0" | sed -n 1p)

  echo "$datetime $var1
" | tee -a "$file"
}

function smartdump {
  datetime=$(date +"%d/%m - %H:%m:%S:")
  # Clear SMART_DUMP File
  rm SMART_DUMP
  touch SMART_DUMP
  
  # Check SMART of block devices /dev/sdX
  for i in a b c d e f g h i j k l m n o p
    do
      sudo skdump /dev/sd$i | tee -a SMART_DUMP
    done

  # Check if there is NVME
  [ -b /dev/nvme0n1 ] && {
    for i in 1 2 3 4 5 6 7 8
      do
        sudo smartctl -a /dev/nvme0n1p$i | tee -a SMART_DUMP
      done
  } || {
    echo "NVME not present."
  }

  # Check if there is MegaRAID
  [ $4 = 1 ] && {
    for i in 0 1 2 3 4 5 6 7 8
      do
        sudo smartctl -d megaraid,$i -a /dev/sg$5 | tee -a SMART_DUMP
      done
    } || {
      echo "MegaRAID not present."
    }

echo "" | tee -a SMART_DUMP
echo "Verificacao concluida em $datetime ! Pressione Enter para sair." | tee -a SMART_DUMP
}

function enter0 {
  echo ""; read -p "Pressione Enter para continuar!"
}

# ============================================================================ #

[ "$EUID" -ne 0 ] && {
  echo "Execute esse script com sudo! Saindo..."
  exit
  }

sudo mkdir -p $setfolder
sudo touch $setfolder/relatorio.txt

datetime=$(date +"%d/%m - %H:%m:%S:")
files=()
  while IFS= read -r -d $'\0' file; do
files+=("$file" "")
done < <(find "$setfolder" -maxdepth 2 -type f -name "*.txt" -print0)
[ ${#files[@]} -eq 0 ] && {
  clear
  echo "Nenhum arquivo encontrado em $directory"
} || {
  file=$(dialog --stdout --title "Escolha um documento" --cancel-label "Sair" --menu "Escolha:" 0 0 0 "${files[@]}")
  [ $? -ne 0 ] && return
  clear

  relat0
}

exit 1
