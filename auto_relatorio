#!/bin/bash

function relat0 {
var0=$(dialog --title 'Relatórios' --cancel-label "Voltar" --backtitle "Gerador de Relatórios v1.0" --menu " " 0 0 0 \
0 'PROCESSAR TODOS!' \
1 'Atualizacao de Sistema' \
2 'Gerar SMART DUMP' \
3 'Manutencao .db Dominio' \
4 'Manutencao .db PiHole' \
5 'Status Pentests' \
6 'Status SYSLOGs' \
7 'Status dos Backups' \
8 'Relatorio Customizado' \
9 'Refazer Cabecalho (CUIDADO)' \
X 'Voltar' 2>&1 > /dev/tty )
[ $? -ne 0 ] && start
case "$var0" in
0) relatfull ; relat0 ;;
1) upgrade0 ; relat0 ;;
2) smartdump0 ; relat0 ;;
3) domain0 ; relat0 ;;
4) pihole0 ; relat0 ;;
5) pentest0 ; relat0 ;;
6) syslog0 ; relat0 ;;
7) backup0 ; relat0 ;;
8) custom0 ; relat0 ;;
9) cabecalho ; relat0 ;;
X) echo a > /dev/null ;;
esac
}

function relatfull {
  cabecalho
  upgrade0
  smartdump0
  domain0
  pihole0
  pentest0
  syslog0
  backup0
  contclean0
  relat0
}

function upgrade0 {
  datetime0
  export DEBIAN_FRONTEND=noninteractive
  clear
  sudo apt update -y &&
  sudo apt upgrade -y &&
  sudo apt autoremove -y &&
  echo "$datetime Nesta data o sistema do servidor foi atualizado e está em dia com a segurança digital.
" | sudo tee -a "$file"
}

function smartdump0 {
  datetime0
  clear
  smartdump1
  enter0
  echo "$datetime Foi realizada a verificação da saúde dos discos rígidos.
Mais informações no anexo SMART_DUMP no e-mail!
" | sudo tee -a "$file"
}

function smartdump1 {
  datetime0
  rm $smartdumplocal
  touch $smartdumplocal
  
  for i in {a..z}
  do
    # Check if block device exist
    [ -b /dev/sd$i ] && {
      echo ""; echo "############################################################################"; echo "Armazenamento: /dev/sd$i"; echo ""
      sudo smartctl -a -T permissive -T permissive /dev/sd$i | grep -a "Model Family:" | sudo tee -a $smartdumplocal
      sudo smartctl -a -T permissive -T permissive /dev/sd$i | grep -a "Device Model:" | sudo tee -a $smartdumplocal
      sudo smartctl -a -T permissive -T permissive /dev/sd$i | grep -a "Serial Number:" | sudo tee -a $smartdumplocal
      echo ""
      sudo smartctl -A -T permissive -T permissive /dev/sd$i | sudo tee -a $smartdumplocal
      echo ""
    } || {
      echo "." >/dev/null
    }
  done
 
  for i in {0..10}
  do
    # Check if block device exist
    [ -b /dev/nvme0n1p$i ] && {
        echo ""; echo "############################################################################"; echo "Armazenamento: /dev/nvme0n1p$i"; echo ""
        sudo smartctl -a -T permissive -T permissive /dev/nvme0n1p$i | grep -a "Model Number:" | sudo tee -a $smartdumplocal
        sudo smartctl -a -T permissive -T permissive /dev/nvme0n1p$i | grep -a "Serial Number:" | sudo tee -a $smartdumplocal
        echo ""
        sudo smartctl -A -T permissive -T permissive /dev/nvme0n1p$i | sudo tee -a $smartdumplocal
        echo ""
    } || {
      echo "." >/dev/null
    }    
  done

  for i in {0..5}
  do
    # Check if block device exist
    [ -c /dev/sg$i ] && {
    for j in {0..10}
      do
        testraid=$(sudo smartctl -d megaraid,$j -A -T permissive -T permissive /dev/sg$i | grep failed)
        # Check if SMART data exist for that block device
        [ "$testraid" = "" ] && {
          echo ""; echo "############################################################################"; echo ""; echo "RAID ID: $j"; echo ""
          sudo smartctl -d megaraid,$j -a -T permissive -T permissive /dev/sg$i | grep -a "Model Family:" | sudo tee -a $smartdumplocal
          sudo smartctl -d megaraid,$j -a -T permissive -T permissive /dev/sg$i | grep -a "Device Model:" | sudo tee -a $smartdumplocal
          sudo smartctl -d megaraid,$j -a -T permissive -T permissive /dev/sg$i | grep -a "Serial Number:" | sudo tee -a $smartdumplocal
          echo ""
          sudo smartctl -d megaraid,$j -A -T permissive -T permissive /dev/sg$i | sudo tee -a $smartdumplocal
          echo ""
        } || {
          echo "." >/dev/null
        }
      done
    } || {
      echo "." >/dev/null
    }
done

echo "" | sudo tee -a $smartdumplocal
echo "Verificacao concluida em $datetime!" | sudo tee -a $smartdumplocal
}

function domain0 {
  [ -d "/srv/containers/dominio" ] && {
  datetime0

  clear
  docker exec dominio samba-tool ntacl sysvolreset -U Administrator
  enter0

  clear
  docker exec dominio samba-tool dbcheck --cross-ncs --reset-well-known-acls --fix --yes
  enter0

  echo "$datetime Foi realizada a verificação da integridade do Controlador de Domínio.
" | sudo tee -a "$file"

  } || {
    echo "." >/dev/null
  }
}

function pihole0 {
  testpihole=$(docker image ls | grep -a "pihole")

  [ "$testpihole" = "" ] || {
    datetime0
    clear; echo ""; echo "Checando por updates do PiHole"
    docker pull "$docker_repo"
    clear

    for i in $(find /srv/containers -maxdepth 1 -name '*pihole*'); do
      i2=$(basename "$i")

      docker exec "$i2" bash -c "rm /etc/pihole/pihole-FTL.db"

      var1=$(sed -n '1p' /srv/containers/"$i2"/Information)
      var2=$(sed -n '2p' /srv/containers/"$i2"/Information)
      var3=$(sed -n '3p' /srv/containers/"$i2"/Information)
      var4=$(sed -n '4p' /srv/containers/"$i2"/Information)
      var5=$(sed -n '5p' /srv/containers/"$i2"/Information)

      pihole1

      docker exec "$i2" rm /etc/pihole/pihole-FTL.conf
      docker exec "$i2" touch /etc/pihole/pihole-FTL.conf
      docker exec "$i2" bash -c "echo 'LOCAL_IPV4=0.0.0.0' >> /etc/pihole/pihole-FTL.conf"
      docker exec "$i2" bash -c "echo 'RATE_LIMIT=0/0' >> /etc/pihole/pihole-FTL.conf"

      [ -f /srv/containers/"$i2"/dnsmasq.d/02-custom-settings.conf ] || {
        docker exec "$i2" bash -c "echo '# domain forward lookups' > /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo '#server=/ad.domain.local/191.168.0.10' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo '# domain PTR/reverse lookups' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo '#server=/0.168.192.in-addr.arpa/192.168.0.10' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo '# Custom DNS Max Queries and Cache' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo 'dns-forward-max=5096' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo 'min-cache-ttl=300' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo 'rebind-domain-ok=' >> /etc/dnsmasq.d/02-custom-settings.conf"
      } && {
        echo "." >/dev/null
      }

    echo "$datetime Nesta data os serviços de DNS e bloqueios de sites do $i2 foram atualizados e suas listas
foram revalidadas!
" | sudo tee -a "$file"
    done
    enter0
  } && {
    echo "." > /dev/null
  }
}

function pihole1 {
  docker stop "$i2" &&
  docker rm "$i2" &&

  [ "$var1" = "host" ] || [ "$var1" = "Host" ] || [ "$var1" = "HOST" ] || [ "$var1" = "hostname" ] || [ "$var1" = "localhost" ] && {
  docker run -d \
--name="$i2" \
--network host \
--hostname="$var4" \
--no-healthcheck \
--restart=unless-stopped \
--shm-size=512m \
-e SERVERIP=$var3 \
-e WEBPASSWORD=$var2 \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$i2"/etc/:/etc/pihole \
-v /srv/containers/"$i2"/dnsmasq.d/:/etc/dnsmasq.d \
-v /srv/containers/"$i2"/log/:/var/log/pihole \
-p 80:80 \
-p 443:443 \
-p 67:67/tcp \
-p 67:67/udp \
-p 53:53/tcp \
-p 53:53/udp \
$docker_repo
  } || {
  docker run -d \
--name="$i2" \
--network $var5 \
--ip=$var1 \
--dns=1.1.1.1  \
--hostname="$var4" \
--no-healthcheck \
--restart=unless-stopped \
--shm-size=512m \
-e SERVERIP=$var1 \
-e WEBPASSWORD=$var2 \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$i2"/etc/:/etc/pihole \
-v /srv/containers/"$i2"/dnsmasq.d/:/etc/dnsmasq.d \
-v /srv/containers/"$i2"/log/:/var/log/pihole \
-p 80:80 \
-p 443:443 \
-p 67:67/tcp \
-p 67:67/udp \
-p 53:53/tcp \
-p 53:53/udp \
$docker_repo
  }
}

function pentest0 {
  [ -d "/srv/containers/pentest" ] && {
    datetime0

    [ -f /srv/containers/pentest/Pentests/Ransomware_Detectado ] && {
      clear
      echo ""
      cat /srv/containers/pentest/Pentests/Ransomware_Detectado
      enter0
    } || {
      echo "." > /dev/null
    }

    var6=$(sed -n '6p' /srv/containers/pentest/Information)
    clear

    for i in $(find /srv/containers/pentest/Pentests/Likely_Vulnerable -name '*1*'); do
      clear
      cat "$i"
      enter0
    done

    echo "$datetime Nenhum novo equipamento vulnerável detectado na rede.
Por enquanto nenhum equipamento cujos testes sejam pertinentes de serem notificados.
" | sudo tee -a "$file"
  } || {
    echo "." > /dev/null
  }
}

function syslog0 {
  datetime0
  clear

  for i in $(ls /srv/containers/*/log/syslog); do
    clear
    echo ""; echo "$i"; echo ""
    cat $i | grep -a 'renameat' | tail -n 5
    enter0
  done 

  echo "$datetime Foi realizada a verificação da integridade dos Logs de Eventos
das pastas da rede e se os registros de uso, dos compartilhamentos, estão em dia.
" | sudo tee -a "$file"
}

function backup0 {
  datetime0
  clear; echo ""; echo "Checando armazenamento geral!"; echo ""
  df -h
  enter0

  clear; echo ""; echo "DUMP de RSnapshots!"; echo ""
  journalctl -b 0 | grep -a "rsnap" | tail -n 5
  enter0

  clear; echo ""; echo "DUMP de RSYNC!"; echo ""
  journalctl -b 0 | grep -a "rsync" | tail -n 5
  enter0

  clear; echo ""; echo "DUMP do RClone (se existente)!"; echo ""
  journalctl -b 0 | grep -a "rclone" | tail -n 5
  enter0

  clear; echo ""; echo "Checando backups dos containers!"; echo ""
  destiny=$(sed -n '2p' /srv/containers/scripts/config/backupcont)
  [ -d "$destiny" ] && {
    ls -la $destiny
    enter0
  } || {
    clear; echo ""; echo "Não existem backups de containers neste servidor! Verifique se esta situação está correta!"; echo ""
    enter0
  }

  echo "$datetime Foi realizada a verificação das rotinas de backup do servidor.
O backup para a nuvem, se existente, também foi verificado.
" | sudo tee -a "$file"
}

function contclean0 {
  docker image prune -a -f

  echo "$datetime Foi realizada a limpeza do sistema com remoção de somente pacotes e
imagens obsoletas dos serviços, objetivando reduzir o consumo de armazenamento.
" | sudo tee -a "$file"
}

function custom0 {
  datetime0
  VALUE0=$(dialog --ok-label "Criar" --title "Novo Relatório" --form "Customizado" 8 40 0 \
"Relat:" 1 1 "$VALUE1" 1 8 100 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && return
var1=$(echo "$VALUE0" | sed -n 1p)

  echo "$datetime $var1
" | sudo tee -a "$file"
}

function cabecalho {
  [ -f "$file" ] || {
    sudo touch $setfolder/relatorio-$monthonly.txt

    clear
    echo "RELATÓRIO MENSAL DE PRESTAÇÃO DE SERVIÇOS DE INFORMÁTICA
Conforme estipulado em contrato mensal de prestação de serviços na área de
informática, segue abaixo o relatório de suporte, manutenções preventivas e
corretivas executados no período de $monthonly:
" | sudo tee "$file"
    sleep 1
  } && {
    echo "." > /dev/null
  }
}

function datetime0 {
  datetime=$(date +"%d/%m")
  #datetime=$(date +"%d/%m - %H:%m:%S")
}

function enter0 {
  echo ""; read -p "Pressione Enter para continuar!"
}

###############
# Start here! #
###############

[ "$EUID" -ne 0 ] && {
  echo "Execute esse script com sudo! Saindo..."
  exit
  }

setfolder="/srv/relatorios"
smartdumplocal="$setfolder/SMART_DUMP"
docker_repo="pihole/pihole:latest"

sudo mkdir -p $setfolder
monthonly=$(date +"%m-%Y")
file="$setfolder/relatorio-$monthonly.txt"

relat0

exit 1
