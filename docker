#!/bin/bash

function menu01 {

[ $(which docker 2>/dev/null) ] && {

  mysqld0=$(docker inspect mysql | grep running | awk {'print $2'} | cut -c 2,3,4,5,6,7,8)
  mysqld1=$(docker inspect mysql | grep exited | awk {'print $2'} | cut -c 2,3,4,5,6,7)
  [ "$mysqld0" = "running" ] && {
    dmysql="Executando"
    } || {
      [ "$mysqld1" = "exited" ] && {
        dmysql="Parado"
        } || {
          dmysql="- - -"
          }
  }
  piholed0=$(docker inspect pihole | grep running | awk {'print $2'} | cut -c 2,3,4,5,6,7,8)
  piholed1=$(docker inspect pihole | grep exited | awk {'print $2'} | cut -c 2,3,4,5,6,7)
  [ "$piholed0" = "running" ] && {
    dpihole="Executando"
    } || {
      [ "$piholed1" = "exited" ] && {
        dpihole="Parado"
        } || {
          dpihole="- - -"
          }
  }
  
  dominiod0=$(docker inspect dominio | grep running | awk {'print $2'} | cut -c 2,3,4,5,6,7,8)
  dominiod1=$(docker inspect dominio | grep exited | awk {'print $2'} | cut -c 2,3,4,5,6,7)
  [ "$dominiod0" = "running" ] && {
    ddominio="Executando"
    } || {
      [ "$dominiod1" = "exited" ] && {
        ddominio="Parado"
        } || {
          ddominio="- - -"
          }
  }
  
  pentestd0=$(docker inspect pentest | grep running | awk {'print $2'} | cut -c 2,3,4,5,6,7,8)
  pentestd1=$(docker inspect pentest | grep exited | awk {'print $2'} | cut -c 2,3,4,5,6,7)
  [ "$pentestd0" = "running" ] && {
    dpentest="Executando"
    } || {
      [ "$pentestd1" = "exited" ] && {
        dpentest="Parado"
        } || {
          dpentest="- - -"
          }
  }

  backupd0=$(docker inspect backup | grep running | awk {'print $2'} | cut -c 2,3,4,5,6,7,8)
  backupd1=$(docker inspect backup | grep exited | awk {'print $2'} | cut -c 2,3,4,5,6,7)
  [ "$backupd0" = "running" ] && {
    dbackup="Executando"
    } || {
      [ "$backupd1" = "exited" ] && {
        dbackup="Parado"
        } || {
          dbackup="- - -"
          }
  }

  nextcloudd0=$(docker inspect nextcloud | grep running | awk {'print $2'} | cut -c 2,3,4,5,6,7,8)
  nextcloudd1=$(docker inspect nextcloud | grep exited | awk {'print $2'} | cut -c 2,3,4,5,6,7)
  [ "$nextcloudd0" = "running" ] && {
    dnextcloud="Executando"
    } || {
      [ "$nextcloudd1" = "exited" ] && {
        dnextcloud="Parado"
        } || {
          dnextcloud="- - -"
          }
  }
  
  unifid0=$(docker inspect unifi | grep running | awk {'print $2'} | cut -c 2,3,4,5,6,7,8)
  unifid1=$(docker inspect unifi | grep exited | awk {'print $2'} | cut -c 2,3,4,5,6,7)
  [ "$unifid0" = "running" ] && {
    dunifi="Executando"
    } || {
      [ "$unifid1" = "exited" ] && {
        dunifi="Parado"
        } || {
          dunifi="- - -"
          }
  }
  
  sambad0=$(docker inspect samba | grep running | awk {'print $2'} | cut -c 2,3,4,5,6,7,8)
  sambad1=$(docker inspect samba | grep exited | awk {'print $2'} | cut -c 2,3,4,5,6,7)
  [ "$sambad0" = "running" ] && {
    dsamba="Executando"
    } || {
      [ "$sambad1" = "exited" ] && {
        dsamba="Parado"
        } || {
          dsamba="- - -"
          }
  }

  menuxy=$(dialog --ok-label 'Ajustar' --help-button --help-label 'Ajuda' --backtitle "Bem-Vindo ao Gestor de Containers!" --title "Gestão de Containers" --menu "Hostname: $HOSTNAME" 0 0 0 \
  Status "Geral" \
  "PiHole" "$dpihole" \
  "Dominio" "$ddominio" \
  "Pentest" "$dpentest" \
  "Backup" "$dbackup" \
  "Nextcloud" "$dnextcloud" \
  "MySQL" "$dmysql" \
  "Unifi" "$dunifi" \
  "Samba" "$dsamba" \
  "X Voltar" "" 2>&1 > /dev/tty )

  case $? in
    2) curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/orchestration | bash ; menu01 ;;
  esac

  [ $? -ne 0 ] && exit
  
  case "$menuxy" in
  Status) docker ps -a ; read ; menu01 ;;
  PiHole) chkcnt="$dpihole"; nmcnt="pihole"; menu02 ;;
  Dominio) chkcnt="$ddominio"; nmcnt="dominio"; menu02 ;;
  Pentest) chkcnt="$dpentest"; nmcnt="pentest"; menu02 ;;
  Backup) chkcnt="$dbackup"; nmcnt="backup"; menu02 ;;
  Nextcloud) chkcnt="$dnextcloud"; nmcnt="nextcloud"; menu02 ;;
  MySQL) chkcnt="$dmysql"; nmcnt="mysql"; menu02 ;;
  Unifi) chkcnt="$dunifi"; nmcnt="unifi"; menu02 ;;
  Samba) chkcnt="$dsamba"; nmcnt="samba"; menu02 ;;
  "X Voltar") exit ;;
  esac
} || {
  dialog --cr-wrap --title 'ERRO DETECTADO' --backtitle "Docker" --msgbox "O Docker não está configurado neste sistema!" 7 40
  }

}

function menu02 {
[ "$chkcnt" = "Executando" ] && {
  dialog --title "$nmcnt" --yesno "Deseja reiniciar o container $nmcnt?" 6 40
  [ $? = 0 ] && {
    docker restart "$nmcnt"
    dialog --title "$nmcnt" --msgbox "O container $nmcnt foi reiniciado!" 6 40
  } || {
    dialog --title "$nmcnt" --yesno "Deseja desligar o container $nmcnt?" 6 40
    [ $? = 0 ] && {
      docker stop "$nmcnt"
      dialog --title "$nmcnt" --msgbox "O container $nmcnt foi desligado!" 6 40
    } || {
      dialog --title "$nmcnt" --yesno "Deseja desligar FORÇADAMENTE o container $nmcnt?" 6 40
      [ $? = 0 ] && {
        docker kill "$nmcnt"
        dialog --title "$nmcnt" --msgbox "O container $nmcnt foi desligado de forma forçada!" 6 40
      } || {
        echo "a" > /dev/null
        }
    }
  }
} || {
  [ "$chkcnt" = "- - -" ] && {
    dialog --title "$nmcnt" --msgbox "O container $nmcnt não existe!" 6 40
  } || {
    [ "$chkcnt" = "Parado" ] && {
      dialog --title "$nmcnt" --yesno "Deseja tentar ligar o container $nmcnt?" 6 40
      [ $? = 0 ] && {
        docker start "$nmcnt"
        dialog --title "$nmcnt" --msgbox "Verifique se o container $nmcnt iniciou!" 6 40
      } || {
        echo "a" > /dev/null
        }
    }
  }
}

menu01
}

function menuX {
  curl -sSL https://docker.linuxuniverse.com.br | sudo bash
}

TEXTAO1="Menu de Ajuda. Em construção."

# Start
menu01

# Exit on Error
exit 1

#dialog --title "Ajuda" --msgbox "$TEXTAO1" 0 0 ; menu01 ;;
